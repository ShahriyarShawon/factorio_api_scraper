{
  "classes": [
    {
      "name": "LuaBootstrap",
      "extends": "",
      "desc": "Entry point for registering event handlers. It is accessible through the global object named script.",
      "methods": [
        {
          "name": "on_init",
          "desc": "Register a function to be run on mod initialization. This is only called when a new save game is created or when a save file is loaded that previously didn't contain the mod. During it, the mod gets the chance to set up initial values that it will use for its lifetime. It has full access to LuaGameScript and the global table and can change anything about them that it deems appropriate. No other events will be raised for the mod until it has finished this step.",
          "params": [
            {
              "name": "handler",
              "types": [
                "function()",
                "nil"
              ],
              "desc": "The handler for this event. Passing nil will unregister it."
            }
          ],
          "takes_table": false
        },
        {
          "name": "on_load",
          "desc": "Register a function to be run on save load. This is only called for mods that have been part of the save previously, or for players connecting to a running multiplayer session.",
          "params": [
            {
              "name": "handler",
              "types": [
                "function()",
                "nil"
              ],
              "desc": "The handler for this event. Passing nil will unregister it."
            }
          ],
          "takes_table": false
        },
        {
          "name": "on_configuration_changed",
          "desc": "Register a function to be run when mod configuration changes. This is called when the game version or any mod version changed, when any mod was added or removed, when a startup setting has changed, when any prototypes have been added or removed, or when a migration was applied. It allows the mod to make any changes it deems appropriate to both the data structures in its global table or to the game state through LuaGameScript.",
          "params": [
            {
              "name": "handler",
              "types": [
                "function(ConfigurationChangedData)",
                "nil"
              ],
              "desc": "The handler for this event. Passing nil will unregister it."
            }
          ],
          "takes_table": false
        },
        {
          "name": "on_event",
          "desc": "Register a handler to run on the specified event(s). Each mod can only register once for every event, as any additional registration will overwrite the previous one. This holds true even if different filters are used for subsequent registrations.",
          "params": [
            {
              "name": "event",
              "types": [
                "defines.events",
                "string",
                "array[defines.events",
                "string]"
              ],
              "desc": "The event(s) or custom-input to invoke the handler on."
            },
            {
              "name": "handler",
              "types": [
                "function(EventData)",
                "nil"
              ],
              "desc": "The handler for this event. Passing nil will unregister it."
            },
            {
              "name": "filters",
              "types": [
                "EventFilter?"
              ],
              "desc": "The filters for this event. Can only be used when registering for individual events."
            }
          ],
          "takes_table": false
        },
        {
          "name": "on_nth_tick",
          "desc": "Register a handler to run every nth-tick(s). When the game is on tick 0 it will trigger all registered handlers.",
          "params": [
            {
              "name": "tick",
              "types": [
                "uint",
                "array[uint]",
                "nil"
              ],
              "desc": "The nth-tick(s) to invoke the handler on. Passing nil as the only parameter will unregister all nth-tick handlers."
            },
            {
              "name": "handler",
              "types": [
                "function(NthTickEventData)",
                "nil"
              ],
              "desc": "The handler to run. Passing nil will unregister it for the provided nth-tick(s)."
            }
          ],
          "takes_table": false
        },
        {
          "name": "register_on_entity_destroyed",
          "desc": "Registers an entity so that after it's destroyed, on_entity_destroyed is called. Once an entity is registered, it stays registered until it is actually destroyed, even through save/load cycles. The registration is global across all mods, meaning once one mod registers an entity, all mods listening to on_entity_destroyed will receive the event when it is destroyed. Registering the same entity multiple times will still only fire the destruction event once, and will return the same registration number.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": "The entity to register."
            }
          ],
          "takes_table": false
        },
        {
          "name": "register_metatable",
          "desc": "Register a metatable to have linkage recorded and restored when saving/loading. The metatable itself will not be saved. Instead, only the linkage to a registered metatable is saved, and the metatable registered under that name will be used when loading the table.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "The name of this metatable. Names must be unique per mod."
            },
            {
              "name": "metatable",
              "types": [
                "table"
              ],
              "desc": "The metatable to register."
            }
          ],
          "takes_table": false
        },
        {
          "name": "generate_event_name",
          "desc": "Generate a new, unique event ID that can be used to raise custom events with LuaBootstrap::raise_event.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_event_handler",
          "desc": "Find the event handler for an event.",
          "params": [
            {
              "name": "event",
              "types": [
                "uint"
              ],
              "desc": "The event identifier to get a handler for."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_event_order",
          "desc": "Gets the mod event order as a string.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_event_filter",
          "desc": "Sets the filters for the given event. The filters are only retained when set after the actual event registration, because registering for an event with different or no filters will overwrite previously set ones.",
          "params": [
            {
              "name": "event",
              "types": [
                "uint"
              ],
              "desc": "ID of the event to filter."
            },
            {
              "name": "filters",
              "types": [
                "EventFilter?"
              ],
              "desc": "The filters or nil to clear them."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_event_filter",
          "desc": "Gets the filters for the given event.",
          "params": [
            {
              "name": "event",
              "types": [
                "uint"
              ],
              "desc": "ID of the event to get."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_prototype_history",
          "desc": "Gets the prototype history for the given type and name.",
          "params": [
            {
              "name": "type",
              "types": [
                "string"
              ],
              "desc": ""
            },
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "raise_event",
          "desc": "Raise an event. Only events generated with LuaBootstrap::generate_event_name and the following can be raised:",
          "params": [
            {
              "name": "event",
              "types": [
                "uint"
              ],
              "desc": "ID of the event to raise."
            },
            {
              "name": "data",
              "types": [
                "table"
              ],
              "desc": "Table with extra data that will be passed to the event handler. Any invalid LuaObjects will silently stop the event from being raised."
            }
          ],
          "takes_table": false
        },
        {
          "name": "raise_console_chat",
          "desc": "The player doing the chatting.",
          "params": [
            {
              "name": "player_index",
              "types": [
                "uint"
              ],
              "desc": "The player doing the chatting."
            },
            {
              "name": "message",
              "types": [
                "string"
              ],
              "desc": "The chat message to send."
            }
          ],
          "takes_table": true
        },
        {
          "name": "raise_player_crafted_item",
          "desc": "The item that has been crafted.",
          "params": [
            {
              "name": "item_stack",
              "types": [
                "LuaItemStack"
              ],
              "desc": "The item that has been crafted."
            },
            {
              "name": "player_index",
              "types": [
                "uint"
              ],
              "desc": "The player doing the crafting."
            },
            {
              "name": "recipe",
              "types": [
                "LuaRecipe"
              ],
              "desc": "The recipe used to craft this item."
            }
          ],
          "takes_table": true
        },
        {
          "name": "raise_player_fast_transferred",
          "desc": "The player transferred from or to.",
          "params": [
            {
              "name": "player_index",
              "types": [
                "uint"
              ],
              "desc": "The player transferred from or to."
            },
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": "The entity transferred from or to."
            },
            {
              "name": "from_player",
              "types": [
                "boolean"
              ],
              "desc": "Whether the transfer was from player to entity. If false, the transfer was from entity to player."
            },
            {
              "name": "is_split",
              "types": [
                "boolean"
              ],
              "desc": "Whether the transfer was a split action (half stack)."
            }
          ],
          "takes_table": true
        },
        {
          "name": "raise_biter_base_built",
          "desc": "The entity that was built.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": "The entity that was built."
            }
          ],
          "takes_table": true
        },
        {
          "name": "raise_market_item_purchased",
          "desc": "The player who did the purchasing.",
          "params": [
            {
              "name": "player_index",
              "types": [
                "uint"
              ],
              "desc": "The player who did the purchasing."
            },
            {
              "name": "market",
              "types": [
                "LuaEntity"
              ],
              "desc": "The market entity."
            },
            {
              "name": "offer_index",
              "types": [
                "uint"
              ],
              "desc": "The index of the offer purchased."
            },
            {
              "name": "count",
              "types": [
                "uint"
              ],
              "desc": "The amount of offers purchased."
            }
          ],
          "takes_table": true
        },
        {
          "name": "raise_script_built",
          "desc": "The entity that has been built.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": "The entity that has been built."
            }
          ],
          "takes_table": true
        },
        {
          "name": "raise_script_destroy",
          "desc": "The entity that was destroyed.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": "The entity that was destroyed."
            }
          ],
          "takes_table": true
        },
        {
          "name": "raise_script_revive",
          "desc": "The entity that was revived.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": "The entity that was revived."
            },
            {
              "name": "tags",
              "types": [
                "Tags?"
              ],
              "desc": "The tags associated with this entity, if any."
            }
          ],
          "takes_table": true
        },
        {
          "name": "raise_script_teleported",
          "desc": "The entity that was teleported.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": "The entity that was teleported."
            },
            {
              "name": "old_surface_index",
              "types": [
                "uint8"
              ],
              "desc": "The entity's surface before the teleportation."
            },
            {
              "name": "old_position",
              "types": [
                "MapPosition"
              ],
              "desc": "The entity's position before the teleportation."
            }
          ],
          "takes_table": true
        },
        {
          "name": "raise_script_set_tiles",
          "desc": "The surface whose tiles have been changed.",
          "params": [
            {
              "name": "surface_index",
              "types": [
                "uint"
              ],
              "desc": "The surface whose tiles have been changed."
            },
            {
              "name": "tiles",
              "types": [
                "array[Tile]"
              ],
              "desc": "The tiles that have been changed."
            }
          ],
          "takes_table": true
        }
      ],
      "attributes": [
        {
          "name": "mod_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The name of the mod from the environment this is used in."
        },
        {
          "name": "level",
          "_type": "table",
          "permissions": "Read",
          "description": "Information about the currently running scenario/campaign/tutorial."
        },
        {
          "name": "active_mods",
          "_type": "dictionary[string \u2192 string]",
          "permissions": "Read",
          "description": "A dictionary listing the names of all currently active mods and mapping them to their version."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "This object's name."
        }
      ]
    },
    {
      "name": "LuaBurner",
      "extends": "",
      "desc": "A reference to the burner energy source owned by a specific LuaEntity or LuaEquipment.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "owner",
          "_type": "LuaEntity|LuaEquipment",
          "permissions": "Read",
          "description": "The owner of this burner energy source"
        },
        {
          "name": "inventory",
          "_type": "LuaInventory",
          "permissions": "Read",
          "description": "The fuel inventory."
        },
        {
          "name": "burnt_result_inventory",
          "_type": "LuaInventory",
          "permissions": "Read",
          "description": "The burnt result inventory."
        },
        {
          "name": "heat",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The current heat (energy) stored in this burner."
        },
        {
          "name": "heat_capacity",
          "_type": "double",
          "permissions": "Read",
          "description": "The maximum heat (maximum energy) that this burner can store."
        },
        {
          "name": "remaining_burning_fuel",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The amount of energy left in the currently-burning fuel item."
        },
        {
          "name": "currently_burning",
          "_type": "LuaItemPrototype|nil",
          "permissions": "Read/Write",
          "description": "The currently burning item. Writing nil will void the currently burning item without producing a LuaBurner::burnt_result."
        },
        {
          "name": "fuel_categories",
          "_type": "dictionary[string \u2192 boolean]",
          "permissions": "Read",
          "description": "The fuel categories this burner uses."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaBurnerPrototype",
      "extends": "",
      "desc": "Prototype of a burner energy source.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "emissions",
          "_type": "double",
          "permissions": "Read",
          "description": "The emissions of this energy source in pollution/Joule. Multiplying it by energy consumption in Watt gives pollution/second."
        },
        {
          "name": "render_no_network_icon",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "render_no_power_icon",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "effectivity",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "fuel_inventory_size",
          "_type": "uint",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "burnt_inventory_size",
          "_type": "uint",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "smoke",
          "_type": "array[SmokeSource]|nil",
          "permissions": "Read",
          "description": "The smoke sources for this burner prototype."
        },
        {
          "name": "light_flicker",
          "_type": "table|nil",
          "permissions": "Read",
          "description": "The light flicker definition for this burner prototype."
        },
        {
          "name": "fuel_categories",
          "_type": "dictionary[string \u2192 boolean]",
          "permissions": "Read",
          "description": "The value in the dictionary is meaningless and exists just to allow for easy lookup."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaChunkIterator",
      "extends": "",
      "desc": "A chunk iterator can be used for iterating chunks coordinates of a surface.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaCircuitNetwork",
      "extends": "",
      "desc": "A circuit network associated with a given entity, connector, and wire type.",
      "methods": [
        {
          "name": "get_signal",
          "desc": "The signal to read.",
          "params": [
            {
              "name": "signal",
              "types": [
                "SignalID"
              ],
              "desc": "The signal to read."
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "entity",
          "_type": "LuaEntity",
          "permissions": "Read",
          "description": "The entity this circuit network reference is associated with."
        },
        {
          "name": "wire_type",
          "_type": "defines.wire_type",
          "permissions": "Read",
          "description": "The wire type this network is associated with."
        },
        {
          "name": "circuit_connector_id",
          "_type": "defines.circuit_connector_id",
          "permissions": "Read",
          "description": "The circuit connector ID on the associated entity this network was gotten from."
        },
        {
          "name": "signals",
          "_type": "array[Signal]|nil",
          "permissions": "Read",
          "description": "The circuit network signals last tick. nil if there were no signals last tick."
        },
        {
          "name": "network_id",
          "_type": "uint",
          "permissions": "Read",
          "description": "The circuit networks ID."
        },
        {
          "name": "connected_circuit_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "The number of circuits connected to this network."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaCombinatorControlBehavior",
      "extends": "",
      "desc": "Membersget_signal_last_tick(signal)  \u00a0\u2192 int?Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exist.Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exist.signals_last_tick  [R]  ::\u00a0array[Signal] The circuit network signals sent by this combinator last tick.The circuit network signals sent by this combinator last tick. Inherited from LuaControlBehavior: type, entity, get_circuit_network ",
      "methods": [
        {
          "name": "get_signal_last_tick",
          "desc": "Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exist.",
          "params": [
            {
              "name": "signal",
              "types": [
                "SignalID"
              ],
              "desc": "The signal to get"
            }
          ],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "signals_last_tick",
          "_type": "array[Signal]",
          "permissions": "Read",
          "description": "The circuit network signals sent by this combinator last tick."
        }
      ]
    },
    {
      "name": "LuaCommandProcessor",
      "extends": "",
      "desc": "Allows for the registration of custom console commands through the global object named commands. Similarly to event subscriptions, these don't persist through a save-and-load cycle.",
      "methods": [
        {
          "name": "add_command",
          "desc": "Add a custom console command.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "The desired name of the command (case sensitive)."
            },
            {
              "name": "help",
              "types": [
                "LocalisedString"
              ],
              "desc": "The localised help message. It will be shown to players using the /help command."
            },
            {
              "name": "function",
              "types": [
                "function(CustomCommandData)"
              ],
              "desc": "The function that will be called when this command is invoked."
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove_command",
          "desc": "Remove a custom console command.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "The name of the command to remove (case sensitive)."
            }
          ],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "commands",
          "_type": "dictionary[string \u2192 LocalisedString]",
          "permissions": "Read",
          "description": "Lists the custom commands registered by scripts through LuaCommandProcessor."
        },
        {
          "name": "game_commands",
          "_type": "dictionary[string \u2192 LocalisedString]",
          "permissions": "Read",
          "description": "Lists the built-in commands of the core game. The wiki has an overview of these."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "This object's name."
        }
      ]
    },
    {
      "name": "LuaConstantCombinatorControlBehavior",
      "extends": "",
      "desc": "Control behavior for constant combinators.",
      "methods": [
        {
          "name": "set_signal",
          "desc": "Sets the signal at the given index.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            },
            {
              "name": "signal",
              "types": [
                "Signal?"
              ],
              "desc": "Passing nil clears the signal."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_signal",
          "desc": "Gets the signal at the given index. Returned Signal will not contain signal if none is set for the index.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "parameters",
          "_type": "array[ConstantCombinatorParameters]|nil",
          "permissions": "Read/Write",
          "description": "This constant combinator's parameters. nil if the item_slot_count of the combinator's prototype is 0."
        },
        {
          "name": "enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Turns this constant combinator on and off."
        },
        {
          "name": "signals_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "The number of signals this constant combinator supports."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaContainerControlBehavior",
      "extends": "",
      "desc": "Control behavior for container entities.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaControl",
      "extends": "",
      "desc": "This is an abstract base class containing the common functionality between LuaPlayer and entities (see LuaEntity). When accessing player-related functions through a LuaEntity, it must refer to a character entity.",
      "methods": [
        {
          "name": "get_inventory",
          "desc": "Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxiliary one, like the module slots or logistic trash slots.",
          "params": [
            {
              "name": "inventory",
              "types": [
                "defines.inventory"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_max_inventory_index",
          "desc": "The highest index of all inventories this entity can use. Allows iteration over all of them if desired.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_main_inventory",
          "desc": "Gets the main inventory for this character or player if this is a character or player.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "can_insert",
          "desc": "Can at least some items be inserted?",
          "params": [
            {
              "name": "items",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "Items that would be inserted."
            }
          ],
          "takes_table": false
        },
        {
          "name": "insert",
          "desc": "Insert items into this entity. This works the same way as inserters or shift-clicking: the \"best\" inventory is chosen automatically.",
          "params": [
            {
              "name": "items",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "The items to insert."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_gui_arrow",
          "desc": "Create an arrow which points at this entity. This is used in the tutorial. For examples, see control.lua in the campaign missions.",
          "params": [
            {
              "name": "margin",
              "types": [
                "uint"
              ],
              "desc": ""
            },
            {
              "name": "type",
              "types": [
                "GuiArrowType"
              ],
              "desc": "Where to point to. This field determines what other fields are mandatory."
            }
          ],
          "takes_table": true
        },
        {
          "name": "clear_gui_arrow",
          "desc": "Removes the arrow created by set_gui_arrow.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_item_count",
          "desc": "Get the number of all or some items in this entity.",
          "params": [
            {
              "name": "item",
              "types": [
                "string?"
              ],
              "desc": "Prototype name of the item to count. If not specified, count all items."
            }
          ],
          "takes_table": false
        },
        {
          "name": "has_items_inside",
          "desc": "Does this entity have any item inside it?",
          "params": [],
          "takes_table": false
        },
        {
          "name": "can_reach_entity",
          "desc": "Can a given entity be opened or accessed?",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_items_inside",
          "desc": "Remove all items from this entity.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "remove_item",
          "desc": "Remove items from this entity.",
          "params": [
            {
              "name": "items",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "The items to remove."
            }
          ],
          "takes_table": false
        },
        {
          "name": "teleport",
          "desc": "Teleport the entity to a given position, possibly on another surface.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Where to teleport to."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": "Surface to teleport to. If not given, will teleport to the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface."
            },
            {
              "name": "raise_teleported",
              "types": [
                "boolean?"
              ],
              "desc": "If true, defines.events.script_raised_teleported will be fired on successful entity teleportation."
            }
          ],
          "takes_table": false
        },
        {
          "name": "update_selected_entity",
          "desc": "Select an entity, as if by hovering the mouse above it.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Position of the entity to select."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_selected_entity",
          "desc": "Unselect any selected entity.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "disable_flashlight",
          "desc": "Disable the flashlight.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "enable_flashlight",
          "desc": "Enable the flashlight.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_flashlight_enabled",
          "desc": "Is the flashlight enabled.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_craftable_count",
          "desc": "Gets the count of the given recipe that can be crafted.",
          "params": [
            {
              "name": "recipe",
              "types": [
                "string",
                "LuaRecipe"
              ],
              "desc": "The recipe."
            }
          ],
          "takes_table": false
        },
        {
          "name": "begin_crafting",
          "desc": "Begins crafting the given count of the given recipe.",
          "params": [
            {
              "name": "count",
              "types": [
                "uint"
              ],
              "desc": "The count to craft."
            },
            {
              "name": "recipe",
              "types": [
                "string",
                "LuaRecipe"
              ],
              "desc": "The recipe to craft."
            },
            {
              "name": "silent",
              "types": [
                "boolean?"
              ],
              "desc": "If false and the recipe can't be crafted the requested number of times printing the failure is skipped."
            }
          ],
          "takes_table": true
        },
        {
          "name": "cancel_crafting",
          "desc": "Cancels crafting the given count of the given crafting queue index.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The crafting queue index."
            },
            {
              "name": "count",
              "types": [
                "uint"
              ],
              "desc": "The count to cancel crafting."
            }
          ],
          "takes_table": true
        },
        {
          "name": "mine_entity",
          "desc": "Mines the given entity as if this player (or character) mined it.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": "The entity to mine"
            },
            {
              "name": "force",
              "types": [
                "boolean?"
              ],
              "desc": "Forces mining the entity even if the items can't fit in the player."
            }
          ],
          "takes_table": false
        },
        {
          "name": "mine_tile",
          "desc": "Mines the given tile as if this player (or character) mined it.",
          "params": [
            {
              "name": "tile",
              "types": [
                "LuaTile"
              ],
              "desc": "The tile to mine."
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_player",
          "desc": "When true control adapter is a LuaPlayer object, false for entities including characters with players.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "open_technology_gui",
          "desc": "Open the technology GUI and select a given technology.",
          "params": [
            {
              "name": "technology",
              "types": [
                "TechnologyIdentification?"
              ],
              "desc": "The technology to select after opening the GUI."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_personal_logistic_slot",
          "desc": "Sets a personal logistic request and auto-trash slot to the given value.",
          "params": [
            {
              "name": "slot_index",
              "types": [
                "uint"
              ],
              "desc": "The slot to set."
            },
            {
              "name": "value",
              "types": [
                "LogisticParameters"
              ],
              "desc": "The logistic request parameters."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_vehicle_logistic_slot",
          "desc": "Sets a vehicle logistic request and auto-trash slot to the given value. Only used on spider-vehicle.",
          "params": [
            {
              "name": "slot_index",
              "types": [
                "uint"
              ],
              "desc": "The slot to set."
            },
            {
              "name": "value",
              "types": [
                "LogisticParameters"
              ],
              "desc": "The logistic request parameters."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_personal_logistic_slot",
          "desc": "Gets the parameters of a personal logistic request and auto-trash slot.",
          "params": [
            {
              "name": "slot_index",
              "types": [
                "uint"
              ],
              "desc": "The slot to get."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_vehicle_logistic_slot",
          "desc": "Gets the parameters of a vehicle logistic request and auto-trash slot. Only used on spider-vehicle.",
          "params": [
            {
              "name": "slot_index",
              "types": [
                "uint"
              ],
              "desc": "The slot to get."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_personal_logistic_slot",
          "desc": "The slot to clear.",
          "params": [
            {
              "name": "slot_index",
              "types": [
                "uint"
              ],
              "desc": "The slot to clear."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_vehicle_logistic_slot",
          "desc": "The slot to clear.",
          "params": [
            {
              "name": "slot_index",
              "types": [
                "uint"
              ],
              "desc": "The slot to clear."
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_cursor_blueprint",
          "desc": "Returns whether the player is holding a blueprint. This takes both blueprint items as well as blueprint records from the blueprint library into account.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_blueprint_entities",
          "desc": "Gets the entities that are part of the currently selected blueprint, regardless of it being in a blueprint book or picked from the blueprint library.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_cursor_empty",
          "desc": "Returns whether the player is holding something in the cursor. It takes into account items from the blueprint library, as well as items and ghost cursor.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "surface",
          "_type": "LuaSurface",
          "permissions": "Read",
          "description": "The surface this entity is currently on."
        },
        {
          "name": "surface_index",
          "_type": "uint",
          "permissions": "Read",
          "description": "Unique index (ID) associated with the surface this entity is currently on."
        },
        {
          "name": "position",
          "_type": "MapPosition",
          "permissions": "Read",
          "description": "The current position of the entity."
        },
        {
          "name": "vehicle",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The vehicle the player is currently sitting in."
        },
        {
          "name": "force",
          "_type": "ForceIdentification",
          "permissions": "Read/Write",
          "description": "The force of this entity. Reading will always give a LuaForce, but it is possible to assign either string or LuaForce to this attribute to change the force."
        },
        {
          "name": "force_index",
          "_type": "uint",
          "permissions": "Read",
          "description": "Unique index (ID) associated with the force of this entity."
        },
        {
          "name": "selected",
          "_type": "LuaEntity|nil",
          "permissions": "Read/Write",
          "description": "The currently selected entity. Assigning an entity will select it if is selectable, otherwise the selection is cleared."
        },
        {
          "name": "opened",
          "_type": "LuaEntity|LuaItemStack|LuaEquipment|LuaEquipmentGrid|LuaPlayer|LuaGuiElement|LuaInventory|LuaTechnology|defines.gui_type|nil",
          "permissions": "Read/Write",
          "description": "The GUI the player currently has open."
        },
        {
          "name": "crafting_queue_size",
          "_type": "uint",
          "permissions": "Read",
          "description": "Size of the crafting queue."
        },
        {
          "name": "crafting_queue_progress",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The crafting queue progress in the range [0-1]. 0 when no recipe is being crafted."
        },
        {
          "name": "walking_state",
          "_type": "table",
          "permissions": "Read/Write",
          "description": "Current walking state."
        },
        {
          "name": "riding_state",
          "_type": "RidingState",
          "permissions": "Read/Write",
          "description": "Current riding state of this car, or of the car this player is riding in."
        },
        {
          "name": "mining_state",
          "_type": "table",
          "permissions": "Read/Write",
          "description": "Current mining state."
        },
        {
          "name": "shooting_state",
          "_type": "table",
          "permissions": "Read/Write",
          "description": "Current shooting state."
        },
        {
          "name": "picking_state",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Current item-picking state."
        },
        {
          "name": "repair_state",
          "_type": "table",
          "permissions": "Read/Write",
          "description": "Current repair state."
        },
        {
          "name": "cursor_stack",
          "_type": "LuaItemStack|nil",
          "permissions": "Read",
          "description": "The player's cursor stack. nil if the player controller is a spectator."
        },
        {
          "name": "cursor_ghost",
          "_type": "ItemPrototypeIdentification|nil",
          "permissions": "Read/Write",
          "description": "The ghost prototype in the player's cursor. When read, it will be a LuaItemPrototype."
        },
        {
          "name": "driving",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if the player is in a vehicle. Writing to this attribute puts the player in or out of a vehicle."
        },
        {
          "name": "crafting_queue",
          "_type": "array[CraftingQueueItem]",
          "permissions": "Read",
          "description": "The current crafting queue items."
        },
        {
          "name": "following_robots",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "The current combat robots following the character."
        },
        {
          "name": "cheat_mode",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "When true hand crafting is free and instant."
        },
        {
          "name": "character_crafting_speed_modifier",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character)."
        },
        {
          "name": "character_mining_speed_modifier",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character)."
        },
        {
          "name": "character_additional_mining_categories",
          "_type": "array[string]",
          "permissions": "Read/Write",
          "description": "When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character)."
        },
        {
          "name": "character_running_speed_modifier",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Modifies the running speed of this character by the given value as a percentage. Setting the running modifier to 0.5 makes the character run 50% faster. The minimum value of -1 reduces the movement speed by 100%, resulting in a speed of 0."
        },
        {
          "name": "character_build_distance_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character)."
        },
        {
          "name": "character_item_drop_distance_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character)."
        },
        {
          "name": "character_reach_distance_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character)."
        },
        {
          "name": "character_resource_reach_distance_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character)."
        },
        {
          "name": "character_item_pickup_distance_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character)."
        },
        {
          "name": "character_loot_pickup_distance_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character)."
        },
        {
          "name": "character_inventory_slots_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character)."
        },
        {
          "name": "character_trash_slot_count_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character)."
        },
        {
          "name": "character_maximum_following_robot_count_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character)."
        },
        {
          "name": "character_health_bonus",
          "_type": "float",
          "permissions": "Read/Write",
          "description": "When called on a LuaPlayer, it must be associated with a character (see LuaPlayer::character)."
        },
        {
          "name": "character_personal_logistic_requests_enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If personal logistic requests are enabled for this character or players character."
        },
        {
          "name": "vehicle_logistic_requests_enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If personal logistic requests are enabled for this vehicle (spidertron)."
        },
        {
          "name": "opened_gui_type",
          "_type": "defines.gui_type|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "build_distance",
          "_type": "uint",
          "permissions": "Read",
          "description": "The build distance of this character or max uint when not a character or player connected to a character."
        },
        {
          "name": "drop_item_distance",
          "_type": "uint",
          "permissions": "Read",
          "description": "The item drop distance of this character or max uint when not a character or player connected to a character."
        },
        {
          "name": "reach_distance",
          "_type": "uint",
          "permissions": "Read",
          "description": "The reach distance of this character or max uint when not a character or player connected to a character."
        },
        {
          "name": "item_pickup_distance",
          "_type": "double",
          "permissions": "Read",
          "description": "The item pickup distance of this character or max double when not a character or player connected to a character."
        },
        {
          "name": "loot_pickup_distance",
          "_type": "double",
          "permissions": "Read",
          "description": "The loot pickup distance of this character or max double when not a character or player connected to a character."
        },
        {
          "name": "resource_reach_distance",
          "_type": "double",
          "permissions": "Read",
          "description": "The resource reach distance of this character or max double when not a character or player connected to a character."
        },
        {
          "name": "in_combat",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether this character entity is in combat."
        },
        {
          "name": "character_running_speed",
          "_type": "double",
          "permissions": "Read",
          "description": "The current movement speed of this character, including effects from exoskeletons, tiles, stickers and shooting."
        },
        {
          "name": "character_mining_progress",
          "_type": "double",
          "permissions": "Read",
          "description": "The current mining progress between 0 and 1 of this character, or 0 if they aren't mining."
        }
      ]
    },
    {
      "name": "LuaControlBehavior",
      "extends": "",
      "desc": "The control behavior for an entity. Inserters have logistic network and circuit network behavior logic, lamps have circuit logic and so on. This is an abstract base class that concrete control behaviors inherit.",
      "methods": [
        {
          "name": "get_circuit_network",
          "desc": "Wire color of the network connected to this entity.",
          "params": [
            {
              "name": "wire",
              "types": [
                "defines.wire_type"
              ],
              "desc": "Wire color of the network connected to this entity."
            },
            {
              "name": "circuit_connector",
              "types": [
                "defines.circuit_connector_id?"
              ],
              "desc": "The connector to get circuit network for. Must be specified for entities with more than one circuit network connector."
            }
          ],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "type",
          "_type": "defines.control_behavior.type",
          "permissions": "Read",
          "description": "The concrete type of this control behavior."
        },
        {
          "name": "entity",
          "_type": "LuaEntity",
          "permissions": "Read",
          "description": "The entity this control behavior belongs to."
        }
      ]
    },
    {
      "name": "LuaCustomChartTag",
      "extends": "",
      "desc": "A custom tag that shows on the map view.",
      "methods": [
        {
          "name": "destroy",
          "desc": "Destroys this tag.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "icon",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": "This tag's icon, if it has one. Writing nil removes it."
        },
        {
          "name": "last_user",
          "_type": "LuaPlayer|nil",
          "permissions": "Read/Write",
          "description": "The player who last edited this tag."
        },
        {
          "name": "position",
          "_type": "MapPosition",
          "permissions": "Read",
          "description": "The position of this tag."
        },
        {
          "name": "text",
          "_type": "string",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "tag_number",
          "_type": "uint",
          "permissions": "Read",
          "description": "The unique ID for this tag on this force."
        },
        {
          "name": "force",
          "_type": "LuaForce",
          "permissions": "Read",
          "description": "The force this tag belongs to."
        },
        {
          "name": "surface",
          "_type": "LuaSurface",
          "permissions": "Read",
          "description": "The surface this tag belongs to."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaCustomInputPrototype",
      "extends": "",
      "desc": "Prototype of a custom input.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "key_sequence",
          "_type": "string",
          "permissions": "Read",
          "description": "The default key sequence for this custom input."
        },
        {
          "name": "alternative_key_sequence",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The default alternative key sequence for this custom input, if any"
        },
        {
          "name": "controller_key_sequence",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The default controller key sequence for this custom input, if any"
        },
        {
          "name": "controller_alternative_key_sequence",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The default controller alternative key sequence for this custom input, if any"
        },
        {
          "name": "linked_game_control",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The linked game control name, if any."
        },
        {
          "name": "consuming",
          "_type": "\"none\"|\"game-only\"",
          "permissions": "Read",
          "description": "The consuming type."
        },
        {
          "name": "action",
          "_type": "string",
          "permissions": "Read",
          "description": "The action that happens when this custom input is triggered."
        },
        {
          "name": "enabled",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether this custom input is enabled. Disabled custom inputs exist but are not used by the game."
        },
        {
          "name": "enabled_while_spectating",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether this custom input is enabled while using the spectator controller."
        },
        {
          "name": "enabled_while_in_cutscene",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether this custom input is enabled while using the cutscene controller."
        },
        {
          "name": "include_selected_prototype",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether this custom input will include the selected prototype (if any) when triggered."
        },
        {
          "name": "item_to_spawn",
          "_type": "LuaItemPrototype|nil",
          "permissions": "Read",
          "description": "The item that gets spawned when this custom input is fired, if any."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaCustomTable",
      "extends": "",
      "desc": "Lazily evaluated table. For performance reasons, we sometimes return a custom table-like type instead of a native Lua table. This custom type lazily constructs the necessary Lua wrappers of the corresponding C++ objects, therefore preventing their unnecessary construction in some cases.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaDamagePrototype",
      "extends": "",
      "desc": "Prototype of a damage.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "hidden",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether this damage type is hidden from entity tooltips."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaDeciderCombinatorControlBehavior",
      "extends": "",
      "desc": "Control behavior for decider combinators.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "parameters",
          "_type": "DeciderCombinatorParameters",
          "permissions": "Read/Write",
          "description": "This decider combinator's parameters."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaDecorativePrototype",
      "extends": "",
      "desc": "Prototype of an optimized decorative.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "collision_box",
          "_type": "BoundingBox",
          "permissions": "Read",
          "description": "The bounding box used for collision checking."
        },
        {
          "name": "collision_mask",
          "_type": "CollisionMask",
          "permissions": "Read",
          "description": "The collision masks this decorative uses"
        },
        {
          "name": "collision_mask_with_flags",
          "_type": "CollisionMaskWithFlags",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "autoplace_specification",
          "_type": "AutoplaceSpecification|nil",
          "permissions": "Read",
          "description": "Autoplace specification for this decorative prototype, if any."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaElectricEnergySourcePrototype",
      "extends": "",
      "desc": "Prototype of an electric energy source.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "buffer_capacity",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "usage_priority",
          "_type": "string",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "input_flow_limit",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "output_flow_limit",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "drain",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "emissions",
          "_type": "double",
          "permissions": "Read",
          "description": "The emissions of this energy source in pollution/Joule. Multiplying it by energy consumption in Watt gives pollution/second."
        },
        {
          "name": "render_no_network_icon",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "render_no_power_icon",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaEntity",
      "extends": "",
      "desc": "The primary interface for interacting with entities through the Lua API. Entities are everything that exists on the map except for tiles (see LuaTile).",
      "methods": [
        {
          "name": "get_output_inventory",
          "desc": "Gets the entity's output inventory if it has one.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_module_inventory",
          "desc": "Inventory for storing modules of this entity; nil if this entity has no module inventory.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_fuel_inventory",
          "desc": "The fuel inventory for this entity or nil if this entity doesn't have a fuel inventory.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_burnt_result_inventory",
          "desc": "The burnt result inventory for this entity or nil if this entity doesn't have a burnt result inventory.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "damage",
          "desc": "Damages the entity.",
          "params": [
            {
              "name": "damage",
              "types": [
                "float"
              ],
              "desc": "The amount of damage to be done."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force that will be doing the damage."
            },
            {
              "name": "type",
              "types": [
                "string?"
              ],
              "desc": "The type of damage to be done, defaults to \"impact\". Can't be nil."
            },
            {
              "name": "dealer",
              "types": [
                "LuaEntity?"
              ],
              "desc": "The entity to consider as the damage dealer. Needs to be on the same surface as the entity being damaged."
            }
          ],
          "takes_table": false
        },
        {
          "name": "can_be_destroyed",
          "desc": "Whether the entity can be destroyed",
          "params": [],
          "takes_table": false
        },
        {
          "name": "destroy",
          "desc": "Destroys the entity.",
          "params": [
            {
              "name": "do_cliff_correction",
              "types": [
                "boolean?"
              ],
              "desc": "Whether neighbouring cliffs should be corrected. Defaults to false."
            },
            {
              "name": "raise_destroy",
              "types": [
                "boolean?"
              ],
              "desc": "If true, script_raised_destroy will be called. Defaults to false."
            }
          ],
          "takes_table": true
        },
        {
          "name": "set_command",
          "desc": "Give the entity a command.",
          "params": [
            {
              "name": "command",
              "types": [
                "Command"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_distraction_command",
          "desc": "Give the entity a distraction command.",
          "params": [
            {
              "name": "command",
              "types": [
                "Command"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "has_command",
          "desc": "Has this unit been assigned a command?",
          "params": [],
          "takes_table": false
        },
        {
          "name": "die",
          "desc": "Immediately kills the entity. Does nothing if the entity doesn't have health.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "The force to attribute the kill to."
            },
            {
              "name": "cause",
              "types": [
                "LuaEntity?"
              ],
              "desc": "The cause to attribute the kill to."
            }
          ],
          "takes_table": false
        },
        {
          "name": "has_flag",
          "desc": "Test whether this entity's prototype has a certain flag set.",
          "params": [
            {
              "name": "flag",
              "types": [
                "EntityPrototypeFlag"
              ],
              "desc": "The flag to test."
            }
          ],
          "takes_table": false
        },
        {
          "name": "ghost_has_flag",
          "desc": "Same as LuaEntity::has_flag, but targets the inner entity on a entity ghost.",
          "params": [
            {
              "name": "flag",
              "types": [
                "EntityPrototypeFlag"
              ],
              "desc": "The flag to test."
            }
          ],
          "takes_table": false
        },
        {
          "name": "add_market_item",
          "desc": "Offer a thing on the market.",
          "params": [
            {
              "name": "offer",
              "types": [
                "Offer"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove_market_item",
          "desc": "Remove an offer from a market.",
          "params": [
            {
              "name": "offer",
              "types": [
                "uint"
              ],
              "desc": "Index of offer to remove."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_market_items",
          "desc": "Get all offers in a market as an array.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "clear_market_items",
          "desc": "Removes all offers from a market.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "connect_neighbour",
          "desc": "Connect two devices with a circuit wire or copper cable. Depending on which type of connection should be made, there are different procedures:",
          "params": [
            {
              "name": "target",
              "types": [
                "LuaEntity",
                "WireConnectionDefinition"
              ],
              "desc": "The target with which to establish a connection."
            }
          ],
          "takes_table": false
        },
        {
          "name": "disconnect_neighbour",
          "desc": "Disconnect circuit wires or copper cables between devices. Depending on which type of connection should be cut, there are different procedures:",
          "params": [
            {
              "name": "target",
              "types": [
                "defines.wire_type",
                "LuaEntity",
                "WireConnectionDefinition?"
              ],
              "desc": "The target with which to cut a connection."
            }
          ],
          "takes_table": false
        },
        {
          "name": "order_deconstruction",
          "desc": "Sets the entity to be deconstructed by construction robots.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force whose robots are supposed to do the deconstruction."
            },
            {
              "name": "player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "The player to set the last_user to if any."
            }
          ],
          "takes_table": false
        },
        {
          "name": "cancel_deconstruction",
          "desc": "Cancels deconstruction if it is scheduled, does nothing otherwise.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force who did the deconstruction order."
            },
            {
              "name": "player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "The player to set the last_user to if any."
            }
          ],
          "takes_table": false
        },
        {
          "name": "to_be_deconstructed",
          "desc": "Is this entity marked for deconstruction?",
          "params": [],
          "takes_table": false
        },
        {
          "name": "order_upgrade",
          "desc": "Sets the entity to be upgraded by construction robots.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force whose robots are supposed to do the upgrade."
            },
            {
              "name": "target",
              "types": [
                "EntityPrototypeIdentification"
              ],
              "desc": "The prototype of the entity to upgrade to."
            },
            {
              "name": "player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": ""
            },
            {
              "name": "direction",
              "types": [
                "defines.direction?"
              ],
              "desc": "The new direction if any."
            }
          ],
          "takes_table": true
        },
        {
          "name": "cancel_upgrade",
          "desc": "Cancels upgrade if it is scheduled, does nothing otherwise.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force who did the upgrade order."
            },
            {
              "name": "player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "The player to set the last_user to if any."
            }
          ],
          "takes_table": false
        },
        {
          "name": "to_be_upgraded",
          "desc": "Is this entity marked for upgrade?",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_request_slot",
          "desc": "Get a logistic requester slot.",
          "params": [
            {
              "name": "slot",
              "types": [
                "uint"
              ],
              "desc": "The slot index."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_request_slot",
          "desc": "Set a logistic requester slot.",
          "params": [
            {
              "name": "request",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "What to request."
            },
            {
              "name": "slot",
              "types": [
                "uint"
              ],
              "desc": "The slot index."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_request_slot",
          "desc": "Clear a logistic requester slot.",
          "params": [
            {
              "name": "slot",
              "types": [
                "uint"
              ],
              "desc": "The slot index."
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_crafting",
          "desc": "Returns whether a craft is currently in process. It does not indicate whether progress is currently being made, but whether a crafting process has been started in this machine.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_opened",
          "desc": "true if this gate is currently opened.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_opening",
          "desc": "true if this gate is currently opening.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_closed",
          "desc": "true if this gate is currently closed.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_closing",
          "desc": "true if this gate is currently closing",
          "params": [],
          "takes_table": false
        },
        {
          "name": "request_to_open",
          "desc": "The force that requests the gate to be open.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force that requests the gate to be open."
            },
            {
              "name": "extra_time",
              "types": [
                "uint?"
              ],
              "desc": "Extra ticks to stay open."
            }
          ],
          "takes_table": false
        },
        {
          "name": "request_to_close",
          "desc": "The force that requests the gate to be closed.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force that requests the gate to be closed."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_transport_line",
          "desc": "Get a transport line of a belt or belt connectable entity.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "Index of the requested transport line. Transport lines are 1-indexed."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_max_transport_line_index",
          "desc": "Get the maximum transport line index of a belt or belt connectable entity.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "launch_rocket",
          "desc": "true if the rocket was successfully launched. Return value of false means the silo is not ready for launch.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "revive",
          "desc": "Revive a ghost. I.e. turn it from a ghost to a real entity or tile.",
          "params": [
            {
              "name": "return_item_request_proxy",
              "types": [
                "boolean?"
              ],
              "desc": "If true the function will return item request proxy as the third return value."
            },
            {
              "name": "raise_revive",
              "types": [
                "boolean?"
              ],
              "desc": "If true, and an entity ghost; script_raised_revive will be called. Else if true, and a tile ghost; script_raised_set_tiles will be called."
            }
          ],
          "takes_table": true
        },
        {
          "name": "silent_revive",
          "desc": "Revives a ghost silently.",
          "params": [
            {
              "name": "return_item_request_proxy",
              "types": [
                "boolean?"
              ],
              "desc": "If true the function will return item request proxy as the third parameter."
            },
            {
              "name": "raise_revive",
              "types": [
                "boolean?"
              ],
              "desc": "If true, and an entity ghost; script_raised_revive will be called. Else if true, and a tile ghost; script_raised_set_tiles will be called."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_connected_rail",
          "desc": "Return values \u2192\u00a0LuaEntity?Rail connected in the specified manner to this one, nil if unsuccessful. \u2192\u00a0defines.rail_direction?Rail direction of the returned rail which points to origin rail \u2192\u00a0defines.rail_connection_direction?Turn to be taken when going back from returned rail to origin railCan only be used if this is Rail",
          "params": [
            {
              "name": "rail_direction",
              "types": [
                "defines.rail_direction"
              ],
              "desc": ""
            },
            {
              "name": "rail_connection_direction",
              "types": [
                "defines.rail_connection_direction"
              ],
              "desc": ""
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_connected_rails",
          "desc": "Get the rails that this signal is connected to.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_rail_segment_entity",
          "desc": "Get the rail signal or train stop at the start/end of the rail segment this rail is in.",
          "params": [
            {
              "name": "direction",
              "types": [
                "defines.rail_direction"
              ],
              "desc": "The direction of travel relative to this rail."
            },
            {
              "name": "in_else_out",
              "types": [
                "boolean"
              ],
              "desc": "If true, gets the entity at the entrance of the rail segment, otherwise gets the entity at the exit of the rail segment."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_rail_segment_end",
          "desc": "Get the rail at the end of the rail segment this rail is in.",
          "params": [
            {
              "name": "direction",
              "types": [
                "defines.rail_direction"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_rail_segment_rails",
          "desc": "Get all rails of a rail segment this rail is in",
          "params": [
            {
              "name": "direction",
              "types": [
                "defines.rail_direction"
              ],
              "desc": "Selects end of this rail that points to a rail segment end from which to start returning rails"
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_rail_segment_length",
          "desc": "Get the length of the rail segment this rail is in.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_rail_segment_overlaps",
          "desc": "Get a rail from each rail segment that overlaps with this rail's rail segment.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_rail_in_same_rail_segment_as",
          "desc": "Checks if this rail and other rail both belong to the same rail segment.",
          "params": [
            {
              "name": "other_rail",
              "types": [
                "LuaEntity"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_rail_in_same_rail_block_as",
          "desc": "Checks if this rail and other rail both belong to the same rail block.",
          "params": [
            {
              "name": "other_rail",
              "types": [
                "LuaEntity"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_parent_signals",
          "desc": "Returns all parent signals. Parent signals are always RailChainSignal. Parent signals are those signals that are checking state of this signal to determine their own chain state.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_child_signals",
          "desc": "Returns all child signals. Child signals can be either RailSignal or RailChainSignal. Child signals are signals which are checked by this signal to determine a chain state.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_inbound_signals",
          "desc": "Returns all signals guarding entrance to a rail block this rail belongs to.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_outbound_signals",
          "desc": "Returns all signals guarding exit from a rail block this rail belongs to.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_filter",
          "desc": "Get the filter for a slot in an inserter, loader, or logistic storage container.",
          "params": [
            {
              "name": "slot_index",
              "types": [
                "uint"
              ],
              "desc": "Index of the slot to get the filter for."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_filter",
          "desc": "Set the filter for a slot in an inserter, loader, or logistic storage container.",
          "params": [
            {
              "name": "slot_index",
              "types": [
                "uint"
              ],
              "desc": "Index of the slot to set the filter for."
            },
            {
              "name": "item",
              "types": [
                "string",
                "nil"
              ],
              "desc": "Prototype name of the item to filter, or nil to clear the filter."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_infinity_container_filter",
          "desc": "Gets the filter for this infinity container at the given index, or nil if the filter index doesn't exist or is empty.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The index to get."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_infinity_container_filter",
          "desc": "Sets the filter for this infinity container at the given index.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The index to set."
            },
            {
              "name": "filter",
              "types": [
                "InfinityInventoryFilter",
                "nil"
              ],
              "desc": "The new filter, or nil to clear the filter."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_infinity_pipe_filter",
          "desc": "Gets the filter for this infinity pipe, or nil if the filter is empty.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_infinity_pipe_filter",
          "desc": "Sets the filter for this infinity pipe.",
          "params": [
            {
              "name": "filter",
              "types": [
                "InfinityPipeFilter",
                "nil"
              ],
              "desc": "The new filter, or nil to clear the filter."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_heat_setting",
          "desc": "Gets the heat setting for this heat interface.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_heat_setting",
          "desc": "Sets the heat setting for this heat interface.",
          "params": [
            {
              "name": "filter",
              "types": [
                "HeatSetting"
              ],
              "desc": "The new setting."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_control_behavior",
          "desc": "Gets the control behavior of the entity (if any).",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_or_create_control_behavior",
          "desc": "Gets (and or creates if needed) the control behavior of the entity.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_circuit_network",
          "desc": "Wire color of the network connected to this entity.",
          "params": [
            {
              "name": "wire",
              "types": [
                "defines.wire_type"
              ],
              "desc": "Wire color of the network connected to this entity."
            },
            {
              "name": "circuit_connector",
              "types": [
                "defines.circuit_connector_id?"
              ],
              "desc": "The connector to get circuit network for. Must be specified for entities with more than one circuit network connector."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_merged_signal",
          "desc": "Read a single signal from the combined circuit networks.",
          "params": [
            {
              "name": "signal",
              "types": [
                "SignalID"
              ],
              "desc": "The signal to read."
            },
            {
              "name": "circuit_connector",
              "types": [
                "defines.circuit_connector_id?"
              ],
              "desc": "The connector to get signals for. Must be specified for entities with more than one circuit network connector."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_merged_signals",
          "desc": "The merged circuit network signals or nil if there are no signals.",
          "params": [
            {
              "name": "circuit_connector",
              "types": [
                "defines.circuit_connector_id?"
              ],
              "desc": "The connector to get signals for. Must be specified for entities with more than one circuit network connector."
            }
          ],
          "takes_table": false
        },
        {
          "name": "supports_backer_name",
          "desc": "Whether this entity supports a backer name.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "copy_settings",
          "desc": "Copies settings from the given entity onto this entity.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "by_player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "If provided, the copying is done 'as' this player and on_entity_settings_pasted is triggered."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_logistic_point",
          "desc": "Gets all the LuaLogisticPoints that this entity owns. Optionally returns only the point specified by the index parameter.",
          "params": [
            {
              "name": "index",
              "types": [
                "defines.logistic_member_index?"
              ],
              "desc": "If provided, only returns the LuaLogisticPoint specified by this index."
            }
          ],
          "takes_table": false
        },
        {
          "name": "play_note",
          "desc": "Plays a note with the given instrument and note.",
          "params": [
            {
              "name": "instrument",
              "types": [
                "uint"
              ],
              "desc": ""
            },
            {
              "name": "note",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "connect_rolling_stock",
          "desc": "Connects the rolling stock in the given direction.",
          "params": [
            {
              "name": "direction",
              "types": [
                "defines.rail_direction"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "disconnect_rolling_stock",
          "desc": "Tries to disconnect this rolling stock in the given direction.",
          "params": [
            {
              "name": "direction",
              "types": [
                "defines.rail_direction"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "update_connections",
          "desc": "Reconnect loader, beacon, cliff and mining drill connections to entities that might have been teleported out or in by the script. The game doesn't do this automatically as we don't want to loose performance by checking this in normal games.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_recipe",
          "desc": "Current recipe being assembled by this machine, if any.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_recipe",
          "desc": "Sets the given recipe in this assembly machine.",
          "params": [
            {
              "name": "recipe",
              "types": [
                "string",
                "LuaRecipe",
                "nil"
              ],
              "desc": "The new recipe. Writing nil clears the recipe, if any."
            }
          ],
          "takes_table": false
        },
        {
          "name": "rotate",
          "desc": "Rotates this entity as if the player rotated it.",
          "params": [
            {
              "name": "reverse",
              "types": [
                "boolean?"
              ],
              "desc": "If true, rotate the entity in the counter-clockwise direction."
            },
            {
              "name": "by_player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "If not specified, the on_player_rotated_entity event will not be fired."
            },
            {
              "name": "spill_items",
              "types": [
                "boolean?"
              ],
              "desc": "If the player is not given should extra items be spilled or returned as a second return value from this."
            },
            {
              "name": "enable_looted",
              "types": [
                "boolean?"
              ],
              "desc": "When true, each spilled item will be flagged with the LuaEntity::to_be_looted flag."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "When provided the spilled items will be marked for deconstruction by this force."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_driver",
          "desc": "Gets the driver of this vehicle if any.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_driver",
          "desc": "Sets the driver of this vehicle.",
          "params": [
            {
              "name": "driver",
              "types": [
                "LuaEntity",
                "PlayerIdentification?"
              ],
              "desc": "The new driver. Writing nil ejects the current driver, if any."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_passenger",
          "desc": "Gets the passenger of this car or spidertron if any.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_passenger",
          "desc": "Sets the passenger of this car or spidertron.",
          "params": [
            {
              "name": "passenger",
              "types": [
                "LuaEntity",
                "PlayerIdentification?"
              ],
              "desc": "The new passenger. Writing nil ejects the current passenger, if any."
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_connected_to_electric_network",
          "desc": "Returns true if this entity produces or consumes electricity and is connected to an electric network that has at least one entity that can produce power.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_train_stop_trains",
          "desc": "The trains scheduled to stop at this train stop.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_stopped_train",
          "desc": "The train currently stopped at this train stop, if any.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "clone",
          "desc": "Clones this entity.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "The destination position"
            },
            {
              "name": "surface",
              "types": [
                "LuaSurface?"
              ],
              "desc": "The destination surface"
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": ""
            },
            {
              "name": "create_build_effect_smoke",
              "types": [
                "boolean?"
              ],
              "desc": "If false, the building effect smoke will not be shown around the new entity."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_fluid_count",
          "desc": "Get the amount of all or some fluid in this entity.",
          "params": [
            {
              "name": "fluid",
              "types": [
                "string?"
              ],
              "desc": "Prototype name of the fluid to count. If not specified, count all fluids."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_fluid_contents",
          "desc": "Get amounts of all fluids in this entity.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "remove_fluid",
          "desc": "Remove fluid from this entity.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "Fluid prototype name."
            },
            {
              "name": "amount",
              "types": [
                "double"
              ],
              "desc": "Amount to remove"
            },
            {
              "name": "minimum_temperature",
              "types": [
                "double?"
              ],
              "desc": ""
            },
            {
              "name": "maximum_temperature",
              "types": [
                "double?"
              ],
              "desc": ""
            },
            {
              "name": "temperature",
              "types": [
                "double?"
              ],
              "desc": ""
            }
          ],
          "takes_table": true
        },
        {
          "name": "insert_fluid",
          "desc": "Insert fluid into this entity. Fluidbox is chosen automatically.",
          "params": [
            {
              "name": "fluid",
              "types": [
                "Fluid"
              ],
              "desc": "Fluid to insert."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_fluid_inside",
          "desc": "Remove all fluids from this entity.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_beam_source",
          "desc": "Get the source of this beam.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_beam_source",
          "desc": "Set the source of this beam.",
          "params": [
            {
              "name": "source",
              "types": [
                "LuaEntity",
                "MapPosition"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_beam_target",
          "desc": "Get the target of this beam.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_beam_target",
          "desc": "Set the target of this beam.",
          "params": [
            {
              "name": "target",
              "types": [
                "LuaEntity",
                "MapPosition"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_radius",
          "desc": "The radius of this entity.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_health_ratio",
          "desc": "The health ratio of this entity between 1 and 0 (for full health and no health respectively).",
          "params": [],
          "takes_table": false
        },
        {
          "name": "create_build_effect_smoke",
          "desc": "Creates the same smoke that is created when you place a building by hand. You can play the building sound to go with it by using LuaSurface::play_sound, eg: entity.surface.play_sound{path=\"entity-build/\"..entity.prototype.name, position=entity.position}",
          "params": [],
          "takes_table": false
        },
        {
          "name": "release_from_spawner",
          "desc": "Release the unit from the spawner which spawned it. This allows the spawner to continue spawning additional units.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "toggle_equipment_movement_bonus",
          "desc": "Toggle this entity's equipment movement bonus. Does nothing if the entity does not have an equipment grid.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "can_shoot",
          "desc": "Whether this character can shoot the given entity or position.",
          "params": [
            {
              "name": "target",
              "types": [
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "start_fading_out",
          "desc": "Only works if the entity is a speech-bubble, with an \"effect\" defined in its wrapper_flow_style. Starts animating the opacity of the speech bubble towards zero, and destroys the entity when it hits zero.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_upgrade_target",
          "desc": "Returns the new entity prototype.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_upgrade_direction",
          "desc": "Returns the new entity direction after upgrading.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_damage_to_be_taken",
          "desc": "Returns the amount of damage to be taken by this entity.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "deplete",
          "desc": "Depletes and destroys this resource entity.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "mine",
          "desc": "Mines this entity.",
          "params": [
            {
              "name": "inventory",
              "types": [
                "LuaInventory?"
              ],
              "desc": "If provided the item(s) will be transferred into this inventory. If provided, this must be an inventory created with LuaGameScript::create_inventory or be a basic inventory owned by some entity."
            },
            {
              "name": "force",
              "types": [
                "boolean?"
              ],
              "desc": "If true, when the item(s) don't fit into the given inventory the entity is force mined. If false, the mining operation fails when there isn't enough room to transfer all of the items into the inventory. Defaults to false. This is ignored and acts as true if no inventory is provided."
            },
            {
              "name": "raise_destroyed",
              "types": [
                "boolean?"
              ],
              "desc": "If true, script_raised_destroy will be raised. Defaults to true."
            },
            {
              "name": "ignore_minable",
              "types": [
                "boolean?"
              ],
              "desc": "If true, the minable state of the entity is ignored. Defaults to false. If false, an entity that isn't minable (set as not-minable in the prototype or isn't minable for other reasons) will fail to be mined."
            }
          ],
          "takes_table": true
        },
        {
          "name": "spawn_decorations",
          "desc": "Triggers spawn_decoration actions defined in the entity prototype or does nothing if entity is not \"turret\" or \"unit-spawner\".",
          "params": [],
          "takes_table": false
        },
        {
          "name": "can_wires_reach",
          "desc": "Can wires reach between these entities.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_connected_rolling_stock",
          "desc": "Gets rolling stock connected to the given end of this stock.",
          "params": [
            {
              "name": "direction",
              "types": [
                "defines.rail_direction"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_registered_for_construction",
          "desc": "Is this entity or tile ghost or item request proxy registered for construction? If false, it means a construction robot has been dispatched to build the entity, or it is not an entity that can be constructed.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_registered_for_deconstruction",
          "desc": "Is this entity registered for deconstruction with this force? If false, it means a construction robot has been dispatched to deconstruct it, or it is not marked for deconstruction. The complexity is effectively O(1) - it depends on the number of objects targeting this entity which should be small enough.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force construction manager to check."
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_registered_for_upgrade",
          "desc": "Is this entity registered for upgrade? If false, it means a construction robot has been dispatched to upgrade it, or it is not marked for upgrade. This is worst-case O(N) complexity where N is the current number of things in the upgrade queue.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_registered_for_repair",
          "desc": "Is this entity registered for repair? If false, it means a construction robot has been dispatched to upgrade it, or it is not damaged. This is worst-case O(N) complexity where N is the current number of things in the repair queue.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "add_autopilot_destination",
          "desc": "Adds the given position to this spidertron's autopilot's queue of destinations.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "The position the spidertron should move to."
            }
          ],
          "takes_table": false
        },
        {
          "name": "connect_linked_belts",
          "desc": "Connects current linked belt with another one.",
          "params": [
            {
              "name": "neighbour",
              "types": [
                "LuaEntity"
              ],
              "desc": "Another linked belt or entity ghost containing linked belt to connect or nil to disconnect"
            }
          ],
          "takes_table": false
        },
        {
          "name": "disconnect_linked_belts",
          "desc": "Disconnects linked belt from its neighbour.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_spider_legs",
          "desc": "Gets legs of given SpiderVehicle.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "stop_spider",
          "desc": "Sets the speed of the given SpiderVehicle to zero. Notably does not clear its autopilot_destination, which it will continue moving towards if set.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_beacons",
          "desc": "Returns a table with all beacons affecting this effect receiver. Can only be used when the entity has an effect receiver (AssemblingMachine, Furnace, Lab, MiningDrills)",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_beacon_effect_receivers",
          "desc": "Returns a table with all entities affected by this beacon",
          "params": [],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of the entity prototype. E.g. \"inserter\" or \"filter-inserter\"."
        },
        {
          "name": "ghost_name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of the entity or tile contained in this ghost"
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": "Localised name of the entity."
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "ghost_localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": "Localised name of the entity or tile contained in this ghost."
        },
        {
          "name": "ghost_localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "type",
          "_type": "string",
          "permissions": "Read",
          "description": "The entity prototype type of this entity."
        },
        {
          "name": "ghost_type",
          "_type": "string",
          "permissions": "Read",
          "description": "The prototype type of the entity or tile contained in this ghost."
        },
        {
          "name": "active",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Deactivating an entity will stop all its operations (car will stop moving, inserters will stop working, fish will stop moving etc)."
        },
        {
          "name": "destructible",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If set to false, this entity can't be damaged and won't be attacked automatically. It can however still be mined."
        },
        {
          "name": "minable",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Not minable entities can still be destroyed."
        },
        {
          "name": "rotatable",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "When entity is not to be rotatable (inserter, transport belt etc), it can't be rotated by player using the R key."
        },
        {
          "name": "operable",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Player can't open gui of this entity and he can't quick insert/input stuff in to the entity when it is not operable."
        },
        {
          "name": "health",
          "_type": "float|nil",
          "permissions": "Read/Write",
          "description": "The current health of the entity, if any. Health is automatically clamped to be between 0 and max health (inclusive). Entities with a health of 0 can not be attacked."
        },
        {
          "name": "direction",
          "_type": "defines.direction",
          "permissions": "Read/Write",
          "description": "The current direction this entity is facing."
        },
        {
          "name": "supports_direction",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether the entity has direction. When it is false for this entity, it will always return north direction when asked for."
        },
        {
          "name": "orientation",
          "_type": "RealOrientation",
          "permissions": "Read/Write",
          "description": "The smooth orientation of this entity."
        },
        {
          "name": "cliff_orientation",
          "_type": "CliffOrientation",
          "permissions": "Read",
          "description": "The orientation of this cliff."
        },
        {
          "name": "relative_turret_orientation",
          "_type": "RealOrientation|nil",
          "permissions": "Read/Write",
          "description": "The relative orientation of the vehicle turret, artillery turret, artillery wagon. nil if this entity isn't a vehicle with a vehicle turret or artillery turret/wagon."
        },
        {
          "name": "torso_orientation",
          "_type": "RealOrientation",
          "permissions": "Read/Write",
          "description": "The torso orientation of this spider vehicle."
        },
        {
          "name": "amount",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "Count of resource units contained."
        },
        {
          "name": "initial_amount",
          "_type": "uint|nil",
          "permissions": "Read/Write",
          "description": "Count of initial resource units contained. nil if this is not an infinite resource."
        },
        {
          "name": "effectivity_modifier",
          "_type": "float",
          "permissions": "Read/Write",
          "description": "Multiplies the acceleration the vehicle can create for one unit of energy. Defaults to 1."
        },
        {
          "name": "consumption_modifier",
          "_type": "float",
          "permissions": "Read/Write",
          "description": "Multiplies the energy consumption."
        },
        {
          "name": "friction_modifier",
          "_type": "float",
          "permissions": "Read/Write",
          "description": "Multiplies the car friction rate."
        },
        {
          "name": "driver_is_gunner",
          "_type": "boolean|nil",
          "permissions": "Read/Write",
          "description": "Whether the driver of this car or spidertron is the gunner. If false, the passenger is the gunner. nil if this is neither a car or a spidertron."
        },
        {
          "name": "vehicle_automatic_targeting_parameters",
          "_type": "VehicleAutomaticTargetingParameters",
          "permissions": "Read/Write",
          "description": "Read when this spidertron auto-targets enemies"
        },
        {
          "name": "speed",
          "_type": "float|nil",
          "permissions": "Read/Write",
          "description": "The current speed if this is a car, rolling stock, projectile or spidertron, or the maximum speed if this is a unit. The speed is in tiles per tick. nil if this is not a car, rolling stock, unit, projectile or spidertron."
        },
        {
          "name": "effective_speed",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "The current speed of this unit in tiles per tick, taking into account any walking speed modifier given by the tile the unit is standing on. nil if this is not a unit."
        },
        {
          "name": "stack",
          "_type": "LuaItemStack",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "prototype",
          "_type": "LuaEntityPrototype",
          "permissions": "Read",
          "description": "The entity prototype of this entity."
        },
        {
          "name": "ghost_prototype",
          "_type": "LuaEntityPrototype|LuaTilePrototype",
          "permissions": "Read",
          "description": "The prototype of the entity or tile contained in this ghost."
        },
        {
          "name": "drop_position",
          "_type": "MapPosition",
          "permissions": "Read/Write",
          "description": "Position where the entity puts its stuff."
        },
        {
          "name": "pickup_position",
          "_type": "MapPosition",
          "permissions": "Read/Write",
          "description": "Where the inserter will pick up items from."
        },
        {
          "name": "drop_target",
          "_type": "LuaEntity|nil",
          "permissions": "Read/Write",
          "description": "The entity this entity is putting its items to. If there are multiple possible entities at the drop-off point, writing to this attribute allows a mod to choose which one to drop off items to. The entity needs to collide with the tile box under the drop-off position. nil if there is no entity to put items to, or if this is not an entity that puts items somewhere."
        },
        {
          "name": "pickup_target",
          "_type": "LuaEntity|nil",
          "permissions": "Read/Write",
          "description": "The entity this inserter will attempt to pick up items from. If there are multiple possible entities at the pick-up point, writing to this attribute allows a mod to choose which one to pick up items from. The entity needs to collide with the tile box under the pick-up position. nil if there is no entity to pull items from."
        },
        {
          "name": "selected_gun_index",
          "_type": "uint|nil",
          "permissions": "Read/Write",
          "description": "Index of the currently selected weapon slot of this character, car, or spidertron. nil if this entity doesn't have guns."
        },
        {
          "name": "energy",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Energy stored in the entity (heat in furnace, energy stored in electrical devices etc.). always 0 for entities that don't have the concept of energy stored inside."
        },
        {
          "name": "temperature",
          "_type": "double|nil",
          "permissions": "Read/Write",
          "description": "The temperature of this entity's heat energy source. nil if this entity does not use a heat energy source."
        },
        {
          "name": "previous_recipe",
          "_type": "LuaRecipe|nil",
          "permissions": "Read",
          "description": "The previous recipe this furnace was using, if any."
        },
        {
          "name": "held_stack",
          "_type": "LuaItemStack",
          "permissions": "Read",
          "description": "The item stack currently held in an inserter's hand."
        },
        {
          "name": "held_stack_position",
          "_type": "MapPosition",
          "permissions": "Read",
          "description": "Current position of the inserter's \"hand\"."
        },
        {
          "name": "train",
          "_type": "LuaTrain|nil",
          "permissions": "Read",
          "description": "The train this rolling stock belongs to, if any. nil if this is not a rolling stock."
        },
        {
          "name": "neighbours",
          "_type": "dictionary[string \u2192 array[LuaEntity]]|array[array[LuaEntity]]|LuaEntity",
          "permissions": "Read",
          "description": "A list of neighbours for certain types of entities. Applies to electric poles, power switches, underground belts, walls, gates, reactors, cliffs, and pipe-connectable entities."
        },
        {
          "name": "belt_neighbours",
          "_type": "table",
          "permissions": "Read",
          "description": "The belt connectable neighbours of this belt connectable entity. Only entities that input to or are outputs of this entity. Does not contain the other end of an underground belt, see LuaEntity::neighbours for that."
        },
        {
          "name": "fluidbox",
          "_type": "LuaFluidBox",
          "permissions": "Read/Write",
          "description": "Fluidboxes of this entity."
        },
        {
          "name": "backer_name",
          "_type": "string|nil",
          "permissions": "Read/Write",
          "description": "The backer name assigned to this entity. Entities that support backer names are labs, locomotives, radars, roboports, and train stops. nil if this entity doesn't support backer names."
        },
        {
          "name": "entity_label",
          "_type": "string|nil",
          "permissions": "Read/Write",
          "description": "The label on this spider-vehicle entity, if any. nil if this is not a spider-vehicle."
        },
        {
          "name": "time_to_live",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The ticks left before a ghost, combat robot, highlight box or smoke with trigger is destroyed."
        },
        {
          "name": "color",
          "_type": "Color|nil",
          "permissions": "Read/Write",
          "description": "The color of this character, rolling stock, train stop, car, spider-vehicle, flying text, corpse or simple-entity-with-owner. nil if this entity doesn't use custom colors."
        },
        {
          "name": "text",
          "_type": "LocalisedString",
          "permissions": "Read/Write",
          "description": "The text of this flying-text entity."
        },
        {
          "name": "signal_state",
          "_type": "defines.signal_state",
          "permissions": "Read",
          "description": "The state of this rail signal."
        },
        {
          "name": "chain_signal_state",
          "_type": "defines.chain_signal_state",
          "permissions": "Read",
          "description": "The state of this chain signal."
        },
        {
          "name": "to_be_looted",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Will this entity be picked up automatically when the player walks over it?"
        },
        {
          "name": "crafting_speed",
          "_type": "double",
          "permissions": "Read",
          "description": "The current crafting speed, including speed bonuses from modules and beacons."
        },
        {
          "name": "crafting_progress",
          "_type": "float",
          "permissions": "Read/Write",
          "description": "The current crafting progress, as a number in range [0, 1]."
        },
        {
          "name": "bonus_progress",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The current productivity bonus progress, as a number in range [0, 1]."
        },
        {
          "name": "productivity_bonus",
          "_type": "double",
          "permissions": "Read",
          "description": "The productivity bonus of this entity."
        },
        {
          "name": "pollution_bonus",
          "_type": "double",
          "permissions": "Read",
          "description": "The pollution bonus of this entity."
        },
        {
          "name": "speed_bonus",
          "_type": "double",
          "permissions": "Read",
          "description": "The speed bonus of this entity."
        },
        {
          "name": "consumption_bonus",
          "_type": "double",
          "permissions": "Read",
          "description": "The consumption bonus of this entity."
        },
        {
          "name": "belt_to_ground_type",
          "_type": "\"input\"|\"output\"",
          "permissions": "Read",
          "description": "Whether this underground belt goes into or out of the ground."
        },
        {
          "name": "loader_type",
          "_type": "\"input\"|\"output\"",
          "permissions": "Read/Write",
          "description": "Whether this loader gets items from or puts item into a container."
        },
        {
          "name": "rocket_parts",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "Number of rocket parts in the silo."
        },
        {
          "name": "logistic_network",
          "_type": "LuaLogisticNetwork",
          "permissions": "Read/Write",
          "description": "The logistic network this entity is a part of, or nil if this entity is not a part of any logistic network."
        },
        {
          "name": "logistic_cell",
          "_type": "LuaLogisticCell",
          "permissions": "Read",
          "description": "The logistic cell this entity is a part of. Will be nil if this entity is not a part of any logistic cell."
        },
        {
          "name": "item_requests",
          "_type": "dictionary[string \u2192 uint]",
          "permissions": "Read/Write",
          "description": "Items this ghost will request when revived or items this item request proxy is requesting. Result is a dictionary mapping each item prototype name to the required count."
        },
        {
          "name": "player",
          "_type": "LuaPlayer|nil",
          "permissions": "Read",
          "description": "The player connected to this character, if any."
        },
        {
          "name": "unit_group",
          "_type": "LuaUnitGroup|nil",
          "permissions": "Read",
          "description": "The unit group this unit is a member of, if any."
        },
        {
          "name": "damage_dealt",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The damage dealt by this turret, artillery turret, or artillery wagon."
        },
        {
          "name": "kills",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The number of units killed by this turret, artillery turret, or artillery wagon."
        },
        {
          "name": "last_user",
          "_type": "LuaPlayer|PlayerIdentification|nil",
          "permissions": "Read/Write",
          "description": "The last player that changed any setting on this entity. This includes building the entity, changing its color, or configuring its circuit network. nil if the last user is not part of the save anymore."
        },
        {
          "name": "electric_buffer_size",
          "_type": "double|nil",
          "permissions": "Read/Write",
          "description": "The buffer size for the electric energy source. nil if the entity doesn't have an electric energy source."
        },
        {
          "name": "electric_input_flow_limit",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The input flow limit for the electric energy source. nil if the entity doesn't have an electric energy source."
        },
        {
          "name": "electric_output_flow_limit",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The output flow limit for the electric energy source. nil if the entity doesn't have an electric energy source."
        },
        {
          "name": "electric_drain",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The electric drain for the electric energy source. nil if the entity doesn't have an electric energy source."
        },
        {
          "name": "electric_emissions",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The emissions for the electric energy source. nil if the entity doesn't have an electric energy source."
        },
        {
          "name": "unit_number",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "A unique number identifying this entity for the lifetime of the save. These are allocated sequentially, and not re-used (until overflow)."
        },
        {
          "name": "ghost_unit_number",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The unit_number of the entity contained in this ghost. It is the same as the unit number of the EntityWithOwnerPrototype that was destroyed to create this ghost. If it was created by other means, or if the inner entity does not support unit numbers, this property is nil."
        },
        {
          "name": "mining_progress",
          "_type": "double|nil",
          "permissions": "Read/Write",
          "description": "The mining progress for this mining drill. Is a number in range [0, mining_target.prototype.mineable_properties.mining_time]. nil if this isn't a mining drill."
        },
        {
          "name": "bonus_mining_progress",
          "_type": "double|nil",
          "permissions": "Read/Write",
          "description": "The bonus mining progress for this mining drill. Read yields a number in range [0, mining_target.prototype.mineable_properties.mining_time]. nil if this isn't a mining drill."
        },
        {
          "name": "power_production",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The power production specific to the ElectricEnergyInterface entity type."
        },
        {
          "name": "power_usage",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The power usage specific to the ElectricEnergyInterface entity type."
        },
        {
          "name": "bounding_box",
          "_type": "BoundingBox",
          "permissions": "Read",
          "description": "LuaEntityPrototype::collision_box around entity's given position and respecting the current entity orientation."
        },
        {
          "name": "secondary_bounding_box",
          "_type": "BoundingBox|nil",
          "permissions": "Read",
          "description": "The secondary bounding box of this entity or nil if it doesn't have one. This only exists for curved rails, and is automatically determined by the game."
        },
        {
          "name": "selection_box",
          "_type": "BoundingBox",
          "permissions": "Read",
          "description": "LuaEntityPrototype::selection_box around entity's given position and respecting the current entity orientation."
        },
        {
          "name": "secondary_selection_box",
          "_type": "BoundingBox|nil",
          "permissions": "Read",
          "description": "The secondary selection box of this entity or nil if it doesn't have one. This only exists for curved rails, and is automatically determined by the game."
        },
        {
          "name": "mining_target",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The mining target, if any."
        },
        {
          "name": "circuit_connected_entities",
          "_type": "table|nil",
          "permissions": "Read",
          "description": "Entities that are directly connected to this entity via the circuit network. nil if this entity can't be connected to the circuit network."
        },
        {
          "name": "circuit_connection_definitions",
          "_type": "array[CircuitConnectionDefinition]|nil",
          "permissions": "Read",
          "description": "The connection definition for entities that are directly connected to this entity via the circuit network. nil if this entity can't be connected to the circuit network."
        },
        {
          "name": "copper_connection_definitions",
          "_type": "array[CopperConnectionDefinition]",
          "permissions": "Read",
          "description": "The connection definition for entities that are directly connected to this entity via copper cables."
        },
        {
          "name": "request_slot_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "The index of the configured request with the highest index for this entity. This means 0 if no requests are set and e.g. 20 if the 20th request slot is configured."
        },
        {
          "name": "filter_slot_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "The number of filter slots this inserter, loader, or logistic storage container has. 0 if not one of those entities."
        },
        {
          "name": "loader_container",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The container entity this loader is pointing at/pulling from depending on the LuaEntity::loader_type, if any."
        },
        {
          "name": "grid",
          "_type": "LuaEquipmentGrid|nil",
          "permissions": "Read",
          "description": "This entity's equipment grid, if any."
        },
        {
          "name": "graphics_variation",
          "_type": "uint8|nil",
          "permissions": "Read/Write",
          "description": "The graphics variation for this entity. nil if this entity doesn't use graphics variations."
        },
        {
          "name": "tree_color_index",
          "_type": "uint8",
          "permissions": "Read/Write",
          "description": "Index of the tree color."
        },
        {
          "name": "tree_color_index_max",
          "_type": "uint8",
          "permissions": "Read",
          "description": "Maximum index of the tree colors."
        },
        {
          "name": "tree_stage_index",
          "_type": "uint8",
          "permissions": "Read/Write",
          "description": "Index of the tree stage."
        },
        {
          "name": "tree_stage_index_max",
          "_type": "uint8",
          "permissions": "Read",
          "description": "Maximum index of the tree stages."
        },
        {
          "name": "tree_gray_stage_index",
          "_type": "uint8",
          "permissions": "Read/Write",
          "description": "Index of the tree gray stage"
        },
        {
          "name": "tree_gray_stage_index_max",
          "_type": "uint8",
          "permissions": "Read",
          "description": "Maximum index of the tree gray stages."
        },
        {
          "name": "burner",
          "_type": "LuaBurner|nil",
          "permissions": "Read",
          "description": "The burner energy source for this entity, if any."
        },
        {
          "name": "shooting_target",
          "_type": "LuaEntity|nil",
          "permissions": "Read/Write",
          "description": "The shooting target for this turret, if any. Can't be set to nil via script."
        },
        {
          "name": "proxy_target",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The target entity for this item-request-proxy, if any."
        },
        {
          "name": "stickers",
          "_type": "array[LuaEntity]|nil",
          "permissions": "Read",
          "description": "The sticker entities attached to this entity, if any."
        },
        {
          "name": "sticked_to",
          "_type": "LuaEntity",
          "permissions": "Read",
          "description": "The entity this sticker is sticked to."
        },
        {
          "name": "sticker_vehicle_modifiers",
          "_type": "table|nil",
          "permissions": "Read",
          "description": "The vehicle modifiers applied to this entity through the attached stickers."
        },
        {
          "name": "parameters",
          "_type": "ProgrammableSpeakerParameters",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "alert_parameters",
          "_type": "ProgrammableSpeakerAlertParameters",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "electric_network_statistics",
          "_type": "LuaFlowStatistics",
          "permissions": "Read",
          "description": "The electric network statistics for this electric pole."
        },
        {
          "name": "inserter_target_pickup_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "Returns the current target pickup count of the inserter."
        },
        {
          "name": "inserter_stack_size_override",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "Sets the stack size limit on this inserter. If the stack size is > than the force stack size limit the value is ignored."
        },
        {
          "name": "products_finished",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The number of products this machine finished crafting in its lifetime."
        },
        {
          "name": "spawner",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The spawner associated with this unit entity, if any."
        },
        {
          "name": "spawning_cooldown",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "absorbed_pollution",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "spawn_shift",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "units",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "The units associated with this spawner entity."
        },
        {
          "name": "power_switch_state",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "The state of this power switch."
        },
        {
          "name": "effects",
          "_type": "ModuleEffects|nil",
          "permissions": "Read",
          "description": "The effects being applied to this entity, if any. For beacons, this is the effect the beacon is broadcasting."
        },
        {
          "name": "beacons_count",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "Number of beacons affecting this effect receiver. Can only be used when the entity has an effect receiver (AssemblingMachine, Furnace, Lab, MiningDrills)"
        },
        {
          "name": "infinity_container_filters",
          "_type": "array[InfinityInventoryFilter]",
          "permissions": "Read/Write",
          "description": "The filters for this infinity container."
        },
        {
          "name": "remove_unfiltered_items",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether items not included in this infinity container filters should be removed from the container."
        },
        {
          "name": "character_corpse_player_index",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The player index associated with this character corpse."
        },
        {
          "name": "character_corpse_tick_of_death",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The tick this character corpse died at."
        },
        {
          "name": "character_corpse_death_cause",
          "_type": "LocalisedString",
          "permissions": "Read/Write",
          "description": "The reason this character corpse character died. \"\" if there is no reason."
        },
        {
          "name": "associated_player",
          "_type": "LuaPlayer|PlayerIdentification|nil",
          "permissions": "Read/Write",
          "description": "The player this character is associated with, if any. Set to nil to clear."
        },
        {
          "name": "tick_of_last_attack",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The last tick this character entity was attacked."
        },
        {
          "name": "tick_of_last_damage",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The last tick this character entity was damaged."
        },
        {
          "name": "splitter_filter",
          "_type": "LuaItemPrototype|nil",
          "permissions": "Read/Write",
          "description": "The filter for this splitter, if any is set."
        },
        {
          "name": "inserter_filter_mode",
          "_type": "\"whitelist\"|\"blacklist\"|nil",
          "permissions": "Read/Write",
          "description": "The filter mode for this filter inserter. nil if this inserter doesn't use filters."
        },
        {
          "name": "splitter_input_priority",
          "_type": "\"left\"|\"none\"|\"right\"",
          "permissions": "Read/Write",
          "description": "The input priority for this splitter."
        },
        {
          "name": "splitter_output_priority",
          "_type": "\"left\"|\"none\"|\"right\"",
          "permissions": "Read/Write",
          "description": "The output priority for this splitter."
        },
        {
          "name": "armed",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether this land mine is armed."
        },
        {
          "name": "recipe_locked",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "When locked; the recipe in this assembling machine can't be changed by the player."
        },
        {
          "name": "connected_rail",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The rail entity this train stop is connected to, if any."
        },
        {
          "name": "connected_rail_direction",
          "_type": "defines.rail_direction",
          "permissions": "Read",
          "description": "Rail direction to which this train stop is binding. This returns a value even when no rails are present."
        },
        {
          "name": "trains_in_block",
          "_type": "uint",
          "permissions": "Read",
          "description": "The number of trains in this rail block for this rail entity."
        },
        {
          "name": "timeout",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The timeout that's left on this landmine in ticks. It describes the time between the landmine being placed and it being armed."
        },
        {
          "name": "neighbour_bonus",
          "_type": "double",
          "permissions": "Read",
          "description": "The current total neighbour bonus of this reactor."
        },
        {
          "name": "ai_settings",
          "_type": "LuaAISettings",
          "permissions": "Read",
          "description": "The ai settings of this unit."
        },
        {
          "name": "highlight_box_type",
          "_type": "CursorBoxRenderType",
          "permissions": "Read/Write",
          "description": "The hightlight box type of this highlight box entity."
        },
        {
          "name": "highlight_box_blink_interval",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The blink interval of this highlight box entity. 0 indicates no blink."
        },
        {
          "name": "status",
          "_type": "defines.entity_status|nil",
          "permissions": "Read",
          "description": "The status of this entity, if any."
        },
        {
          "name": "enable_logistics_while_moving",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether equipment grid logistics are enabled while this vehicle is moving."
        },
        {
          "name": "render_player",
          "_type": "LuaPlayer|PlayerIdentification|nil",
          "permissions": "Read/Write",
          "description": "The player that this simple-entity-with-owner, simple-entity-with-force, flying-text, or highlight-box is visible to. nil when this entity is rendered for all players."
        },
        {
          "name": "render_to_forces",
          "_type": "array[ForceIdentification]|nil",
          "permissions": "Read/Write",
          "description": "The forces that this simple-entity-with-owner, simple-entity-with-force, or flying-text is visible to. nil or an empty array when this entity is rendered for all forces."
        },
        {
          "name": "pump_rail_target",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The rail target of this pump, if any."
        },
        {
          "name": "moving",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Returns true if this unit is moving."
        },
        {
          "name": "electric_network_id",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "Returns the id of the electric network that this entity is connected to, if any."
        },
        {
          "name": "allow_dispatching_robots",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this character's personal roboports are allowed to dispatch robots."
        },
        {
          "name": "auto_launch",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this rocket silo automatically launches the rocket when cargo is inserted."
        },
        {
          "name": "energy_generated_last_tick",
          "_type": "double",
          "permissions": "Read",
          "description": "How much energy this generator generated in the last tick."
        },
        {
          "name": "storage_filter",
          "_type": "LuaItemPrototype|nil",
          "permissions": "Read/Write",
          "description": "The storage filter for this logistic storage container."
        },
        {
          "name": "request_from_buffers",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this requester chest is set to also request from buffer chests."
        },
        {
          "name": "corpse_expires",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this corpse will ever fade away."
        },
        {
          "name": "corpse_immune_to_entity_placement",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If true, corpse won't be destroyed when entities are placed over it. If false, whether corpse will be removed or not depends on value of CorpsePrototype::remove_on_entity_placement."
        },
        {
          "name": "tags",
          "_type": "Tags|nil",
          "permissions": "Read/Write",
          "description": "The tags associated with this entity ghost. nil if this is not an entity ghost."
        },
        {
          "name": "command",
          "_type": "Command|nil",
          "permissions": "Read",
          "description": "The command given to this unit, if any."
        },
        {
          "name": "distraction_command",
          "_type": "Command|nil",
          "permissions": "Read",
          "description": "The distraction command given to this unit, if any."
        },
        {
          "name": "time_to_next_effect",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The ticks until the next trigger effect of this smoke-with-trigger."
        },
        {
          "name": "autopilot_destination",
          "_type": "MapPosition|nil",
          "permissions": "Read/Write",
          "description": "Destination of this spidertron's autopilot, if any. Writing nil clears all destinations."
        },
        {
          "name": "autopilot_destinations",
          "_type": "array[MapPosition]",
          "permissions": "Read",
          "description": "The queued destination positions of spidertron's autopilot."
        },
        {
          "name": "trains_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "Amount of trains related to this particular train stop. Includes train stopped at this train stop (until it finds a path to next target) and trains having this train stop as goal or waypoint."
        },
        {
          "name": "trains_limit",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "Amount of trains above which no new trains will be sent to this train stop. Writing nil will disable the limit (will set a maximum possible value)."
        },
        {
          "name": "is_entity_with_force",
          "_type": "boolean",
          "permissions": "Read",
          "description": "(deprecated by 1.1.51) If this entity is a MilitaryTarget. Returns same value as LuaEntity::is_military_target"
        },
        {
          "name": "is_military_target",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this entity is a MilitaryTarget. Can be written to if LuaEntityPrototype::allow_run_time_change_of_is_military_target returns true."
        },
        {
          "name": "is_entity_with_owner",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this entity is EntityWithOwner"
        },
        {
          "name": "is_entity_with_health",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this entity is EntityWithHealth"
        },
        {
          "name": "combat_robot_owner",
          "_type": "LuaEntity|nil",
          "permissions": "Read/Write",
          "description": "The owner of this combat robot, if any."
        },
        {
          "name": "link_id",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The link ID this linked container is using."
        },
        {
          "name": "follow_target",
          "_type": "LuaEntity|nil",
          "permissions": "Read/Write",
          "description": "The follow target of this spidertron, if any."
        },
        {
          "name": "follow_offset",
          "_type": "Vector|nil",
          "permissions": "Read/Write",
          "description": "The follow offset of this spidertron, if any entity is being followed. This is randomized each time the follow entity is set."
        },
        {
          "name": "linked_belt_type",
          "_type": "\"input\"|\"output\"",
          "permissions": "Read/Write",
          "description": "Type of linked belt. Changing type will also flip direction so the belt is out of the same side."
        },
        {
          "name": "linked_belt_neighbour",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "Neighbour to which this linked belt is connected to, if any."
        },
        {
          "name": "radar_scan_progress",
          "_type": "float",
          "permissions": "Read",
          "description": "The current radar scan progress, as a number in range [0, 1]."
        },
        {
          "name": "rocket_silo_status",
          "_type": "defines.rocket_silo_status",
          "permissions": "Read",
          "description": "The status of this rocket silo entity."
        },
        {
          "name": "tile_width",
          "_type": "uint",
          "permissions": "Read",
          "description": "Specifies the tiling size of the entity, is used to decide, if the center should be in the center of the tile (odd tile size dimension) or on the tile border (even tile size dimension). Uses the current direction of the entity."
        },
        {
          "name": "tile_height",
          "_type": "uint",
          "permissions": "Read",
          "description": "Specifies the tiling size of the entity, is used to decide, if the center should be in the center of the tile (odd tile size dimension) or on the tile border (even tile size dimension). Uses the current direction of the entity."
        },
        {
          "name": "is_headed_to_trains_front",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If the rolling stock is facing train's front."
        },
        {
          "name": "draw_data",
          "_type": "RollingStockDrawData",
          "permissions": "Read",
          "description": "Gives a draw data of the given entity if it supports such data."
        },
        {
          "name": "belt_shape",
          "_type": "\"straight\"|\"left\"|\"right\"",
          "permissions": "Read",
          "description": "Gives what is the current shape of a transport-belt."
        },
        {
          "name": "gps_tag",
          "_type": "string",
          "permissions": "Read",
          "description": "Returns a rich text string containing this entity's position and surface name as a gps tag. Printing it will ping the location of the entity."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaEntityPrototype",
      "extends": "",
      "desc": "Prototype of an entity.",
      "methods": [
        {
          "name": "has_flag",
          "desc": "Test whether this entity prototype has a certain flag set.",
          "params": [
            {
              "name": "flag",
              "types": [
                "EntityPrototypeFlag"
              ],
              "desc": "The flag to test."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_inventory_size",
          "desc": "Gets the base size of the given inventory on this entity or nil if the given inventory doesn't exist.",
          "params": [
            {
              "name": "index",
              "types": [
                "defines.inventory"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "type",
          "_type": "string",
          "permissions": "Read",
          "description": "Type of this prototype."
        },
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "max_health",
          "_type": "float",
          "permissions": "Read",
          "description": "Max health of this entity. Will be 0 if this is not an entity with health."
        },
        {
          "name": "infinite_resource",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this resource is infinite."
        },
        {
          "name": "minimum_resource_amount",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "Minimum amount of this resource."
        },
        {
          "name": "normal_resource_amount",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The normal amount for this resource."
        },
        {
          "name": "infinite_depletion_resource_amount",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "Every time this infinite resource 'ticks' down, it is reduced by this amount. Meaningless if this isn't an infinite resource."
        },
        {
          "name": "resource_category",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "Name of the category of this resource."
        },
        {
          "name": "mineable_properties",
          "_type": "table",
          "permissions": "Read",
          "description": "Whether this entity is minable and what can be obtained by mining it."
        },
        {
          "name": "items_to_place_this",
          "_type": "array[ItemStackDefinition]|nil",
          "permissions": "Read",
          "description": "Items that when placed will produce this entity, if any. Construction bots will choose the first item in the list to build this entity."
        },
        {
          "name": "collision_box",
          "_type": "BoundingBox",
          "permissions": "Read",
          "description": "The bounding box used for collision checking."
        },
        {
          "name": "secondary_collision_box",
          "_type": "BoundingBox|nil",
          "permissions": "Read",
          "description": "The secondary bounding box used for collision checking, if any. This is only used in rails and rail remnants."
        },
        {
          "name": "map_generator_bounding_box",
          "_type": "BoundingBox",
          "permissions": "Read",
          "description": "The bounding box used for map generator collision checking."
        },
        {
          "name": "selection_box",
          "_type": "BoundingBox",
          "permissions": "Read",
          "description": "The bounding box used for drawing selection."
        },
        {
          "name": "drawing_box",
          "_type": "BoundingBox",
          "permissions": "Read",
          "description": "The bounding box used for drawing the entity icon."
        },
        {
          "name": "sticker_box",
          "_type": "BoundingBox",
          "permissions": "Read",
          "description": "The bounding box used to attach sticker type entities."
        },
        {
          "name": "collision_mask",
          "_type": "CollisionMask",
          "permissions": "Read",
          "description": "The collision masks this entity uses"
        },
        {
          "name": "collision_mask_with_flags",
          "_type": "CollisionMaskWithFlags",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "default_collision_mask_with_flags",
          "_type": "CollisionMaskWithFlags",
          "permissions": "Read",
          "description": "The hardcoded default collision mask (with flags) for this entity prototype type."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "group",
          "_type": "LuaGroup",
          "permissions": "Read",
          "description": "Group of this entity."
        },
        {
          "name": "subgroup",
          "_type": "LuaGroup",
          "permissions": "Read",
          "description": "Subgroup of this entity."
        },
        {
          "name": "healing_per_tick",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "Amount this entity can heal per tick, if any."
        },
        {
          "name": "emissions_per_second",
          "_type": "double",
          "permissions": "Read",
          "description": "Amount of pollution emissions per second this entity will create."
        },
        {
          "name": "corpses",
          "_type": "dictionary[string \u2192 LuaEntityPrototype]|nil",
          "permissions": "Read",
          "description": "Corpses used when this entity is destroyed. It is a dictionary indexed by the corpse's prototype name."
        },
        {
          "name": "selectable_in_game",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this entity selectable?"
        },
        {
          "name": "selection_priority",
          "_type": "uint",
          "permissions": "Read",
          "description": "The selection priority of this entity - a value between 0 and 255"
        },
        {
          "name": "weight",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The weight of this vehicle prototype."
        },
        {
          "name": "resistances",
          "_type": "dictionary[string \u2192 Resistance]|nil",
          "permissions": "Read",
          "description": "List of resistances towards each damage type. It is a dictionary indexed by damage type names (see data/base/prototypes/damage-type.lua)."
        },
        {
          "name": "fast_replaceable_group",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The group of mutually fast-replaceable entities, if any."
        },
        {
          "name": "next_upgrade",
          "_type": "LuaEntityPrototype|nil",
          "permissions": "Read",
          "description": "The next upgrade for this entity, if any."
        },
        {
          "name": "loot",
          "_type": "array[Loot]|nil",
          "permissions": "Read",
          "description": "Loot that will be dropped when this entity is killed, if any."
        },
        {
          "name": "repair_speed_modifier",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "Repair-speed modifier for this entity, if any. Actual repair speed will be tool_repair_speed * entity_repair_speed_modifier."
        },
        {
          "name": "turret_range",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The range of this turret."
        },
        {
          "name": "autoplace_specification",
          "_type": "AutoplaceSpecification|nil",
          "permissions": "Read",
          "description": "Autoplace specification for this entity prototype, if any."
        },
        {
          "name": "belt_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The speed of this transport belt."
        },
        {
          "name": "result_units",
          "_type": "array[UnitSpawnDefinition]|nil",
          "permissions": "Read",
          "description": "The result units and spawn points with weight and evolution factor for a biter spawner entity."
        },
        {
          "name": "attack_result",
          "_type": "array[TriggerItem]|nil",
          "permissions": "Read",
          "description": "The attack result of this entity, if any."
        },
        {
          "name": "final_attack_result",
          "_type": "array[TriggerItem]|nil",
          "permissions": "Read",
          "description": "The final attack result for this projectile."
        },
        {
          "name": "attack_parameters",
          "_type": "AttackParameters|nil",
          "permissions": "Read",
          "description": "The attack parameters for this entity, if any."
        },
        {
          "name": "spawn_cooldown",
          "_type": "table|nil",
          "permissions": "Read",
          "description": "The spawning cooldown for this enemy spawner prototype."
        },
        {
          "name": "mining_drill_radius",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The mining radius of this mining drill prototype."
        },
        {
          "name": "mining_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The mining speed of this mining drill/character prototype."
        },
        {
          "name": "logistic_mode",
          "_type": "\"requester\"|\"active-provider\"|\"passive-provider\"|\"buffer\"|\"storage\"|\"none\"|nil",
          "permissions": "Read",
          "description": "The logistic mode of this logistic container."
        },
        {
          "name": "max_underground_distance",
          "_type": "uint8|nil",
          "permissions": "Read",
          "description": "The max underground distance for underground belts and underground pipes."
        },
        {
          "name": "flags",
          "_type": "EntityPrototypeFlags",
          "permissions": "Read",
          "description": "The flags for this entity prototype."
        },
        {
          "name": "remains_when_mined",
          "_type": "array[LuaEntityPrototype]",
          "permissions": "Read",
          "description": "The remains left behind when this entity is mined."
        },
        {
          "name": "additional_pastable_entities",
          "_type": "array[LuaEntityPrototype]",
          "permissions": "Read",
          "description": "Entities this entity can be pasted onto in addition to the normal allowed ones."
        },
        {
          "name": "allow_copy_paste",
          "_type": "boolean",
          "permissions": "Read",
          "description": "When false copy-paste is not allowed for this entity."
        },
        {
          "name": "shooting_cursor_size",
          "_type": "float",
          "permissions": "Read",
          "description": "The cursor size used when shooting at this entity."
        },
        {
          "name": "created_smoke",
          "_type": "table|nil",
          "permissions": "Read",
          "description": "The smoke trigger run when this entity is built, if any."
        },
        {
          "name": "created_effect",
          "_type": "array[TriggerItem]|nil",
          "permissions": "Read",
          "description": "The trigger to run when this entity is created, if any."
        },
        {
          "name": "map_color",
          "_type": "Color|nil",
          "permissions": "Read",
          "description": "The map color used when charting this entity if a friendly or enemy color isn't defined, if any."
        },
        {
          "name": "friendly_map_color",
          "_type": "Color",
          "permissions": "Read",
          "description": "The friendly map color used when charting this entity."
        },
        {
          "name": "enemy_map_color",
          "_type": "Color",
          "permissions": "Read",
          "description": "The enemy map color used when charting this entity."
        },
        {
          "name": "build_base_evolution_requirement",
          "_type": "double",
          "permissions": "Read",
          "description": "The evolution requirement to build this entity as a base when expanding enemy bases."
        },
        {
          "name": "instruments",
          "_type": "array[ProgrammableSpeakerInstrument]|nil",
          "permissions": "Read",
          "description": "The instruments for this programmable speaker."
        },
        {
          "name": "max_polyphony",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The maximum polyphony for this programmable speaker."
        },
        {
          "name": "module_inventory_size",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The module inventory size. nil if this entity doesn't support modules."
        },
        {
          "name": "ingredient_count",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The max number of ingredients this crafting machine prototype supports."
        },
        {
          "name": "crafting_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The crafting speed."
        },
        {
          "name": "crafting_categories",
          "_type": "dictionary[string \u2192 boolean]|nil",
          "permissions": "Read",
          "description": "The crafting categories this entity prototype supports."
        },
        {
          "name": "resource_categories",
          "_type": "dictionary[string \u2192 boolean]|nil",
          "permissions": "Read",
          "description": "The resource categories this character or mining drill supports."
        },
        {
          "name": "supply_area_distance",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The supply area of this electric pole or beacon prototype."
        },
        {
          "name": "max_wire_distance",
          "_type": "double",
          "permissions": "Read",
          "description": "The maximum wire distance for this entity. 0 if the entity doesn't support wires."
        },
        {
          "name": "max_circuit_wire_distance",
          "_type": "double",
          "permissions": "Read",
          "description": "The maximum circuit wire distance for this entity. 0 if the entity doesn't support circuit wires."
        },
        {
          "name": "energy_usage",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The direct energy usage of this entity, if any."
        },
        {
          "name": "max_energy_usage",
          "_type": "double",
          "permissions": "Read",
          "description": "The theoretical maximum energy usage for this entity."
        },
        {
          "name": "max_energy_production",
          "_type": "double",
          "permissions": "Read",
          "description": "The theoretical maximum energy production for this this entity."
        },
        {
          "name": "effectivity",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The effectivity of this car prototype, generator prototype."
        },
        {
          "name": "consumption",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The energy consumption of this car prototype."
        },
        {
          "name": "friction_force",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The friction of this vehicle prototype."
        },
        {
          "name": "braking_force",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The braking force of this vehicle prototype."
        },
        {
          "name": "air_resistance",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The air resistance of this rolling stock prototype."
        },
        {
          "name": "tank_driving",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "If this car prototype uses tank controls to drive."
        },
        {
          "name": "rotation_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The rotation speed of this car prototype."
        },
        {
          "name": "turret_rotation_speed",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "The turret rotation speed of this car prototype."
        },
        {
          "name": "guns",
          "_type": "dictionary[string \u2192 LuaItemPrototype]|nil",
          "permissions": "Read",
          "description": "A mapping of the gun name to the gun prototype this prototype uses. nil if this entity prototype doesn't use guns."
        },
        {
          "name": "indexed_guns",
          "_type": "array[LuaItemPrototype]|nil",
          "permissions": "Read",
          "description": "A vector of the gun prototypes of this car, spider vehicle, artillery wagon, or turret."
        },
        {
          "name": "speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The default speed of this flying robot, rolling stock or unit. For rolling stocks, this is their max_speed."
        },
        {
          "name": "speed_multiplier_when_out_of_energy",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "The speed multiplier when this flying robot is out of energy."
        },
        {
          "name": "max_payload_size",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The max payload size of this logistics or construction robot."
        },
        {
          "name": "draw_cargo",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this logistics or construction robot renders its cargo when flying."
        },
        {
          "name": "energy_per_move",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The energy consumed per tile moved for this flying robot."
        },
        {
          "name": "energy_per_tick",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The energy consumed per tick for this flying robot."
        },
        {
          "name": "max_energy",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The max energy for this flying robot."
        },
        {
          "name": "min_to_charge",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "The minimum energy for this flying robot before it tries to recharge."
        },
        {
          "name": "max_to_charge",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "The maximum energy for this flying robot above which it won't try to recharge when stationing."
        },
        {
          "name": "burner_prototype",
          "_type": "LuaBurnerPrototype|nil",
          "permissions": "Read",
          "description": "The burner energy source prototype this entity uses, if any."
        },
        {
          "name": "electric_energy_source_prototype",
          "_type": "LuaElectricEnergySourcePrototype|nil",
          "permissions": "Read",
          "description": "The electric energy source prototype this entity uses, if any."
        },
        {
          "name": "heat_energy_source_prototype",
          "_type": "LuaHeatEnergySourcePrototype|nil",
          "permissions": "Read",
          "description": "The heat energy source prototype this entity uses, if any."
        },
        {
          "name": "fluid_energy_source_prototype",
          "_type": "LuaFluidEnergySourcePrototype|nil",
          "permissions": "Read",
          "description": "The fluid energy source prototype this entity uses, if any."
        },
        {
          "name": "void_energy_source_prototype",
          "_type": "LuaVoidEnergySourcePrototype|nil",
          "permissions": "Read",
          "description": "The void energy source prototype this entity uses, if any."
        },
        {
          "name": "heat_buffer_prototype",
          "_type": "LuaHeatBufferPrototype|nil",
          "permissions": "Read",
          "description": "The heat buffer prototype this entity uses, if any."
        },
        {
          "name": "building_grid_bit_shift",
          "_type": "uint",
          "permissions": "Read",
          "description": "The log2 of grid size of the building"
        },
        {
          "name": "fluid_usage_per_tick",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The fluid usage of this generator prototype."
        },
        {
          "name": "maximum_temperature",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The maximum fluid temperature of this generator prototype."
        },
        {
          "name": "burns_fluid",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this generator prototype burns fluid."
        },
        {
          "name": "scale_fluid_usage",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this generator prototype scales fluid usage."
        },
        {
          "name": "destroy_non_fuel_fluid",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this generator prototype destroys non-fuel fluids."
        },
        {
          "name": "max_power_output",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The default maximum power output of this generator prototype."
        },
        {
          "name": "target_temperature",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The target temperature of this boiler prototype."
        },
        {
          "name": "boiler_mode",
          "_type": "\"heat-water-inside\"|\"output-to-separate-pipe\"|nil",
          "permissions": "Read",
          "description": "The boiler operation mode of this boiler prototype."
        },
        {
          "name": "fluid",
          "_type": "LuaFluidPrototype|nil",
          "permissions": "Read",
          "description": "The fluid this offshore pump produces."
        },
        {
          "name": "fluid_capacity",
          "_type": "double",
          "permissions": "Read",
          "description": "The fluid capacity of this entity or 0 if this entity doesn't support fluids."
        },
        {
          "name": "pumping_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The pumping speed of this offshore or normal pump."
        },
        {
          "name": "stack",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this inserter is a stack-type."
        },
        {
          "name": "allow_custom_vectors",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this inserter allows custom pickup and drop vectors."
        },
        {
          "name": "allow_burner_leech",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this inserter allows burner leeching."
        },
        {
          "name": "inserter_extension_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The extension speed of this inserter."
        },
        {
          "name": "inserter_rotation_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The rotation speed of this inserter."
        },
        {
          "name": "inserter_pickup_position",
          "_type": "Vector|nil",
          "permissions": "Read",
          "description": "The pickup position for this inserter."
        },
        {
          "name": "inserter_drop_position",
          "_type": "Vector|nil",
          "permissions": "Read",
          "description": "The drop position for this inserter."
        },
        {
          "name": "inserter_chases_belt_items",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "True if this inserter chases items on belts for pickup."
        },
        {
          "name": "count_as_rock_for_filtered_deconstruction",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "If this simple-entity is counted as a rock for the deconstruction planner \"trees and rocks only\" filter."
        },
        {
          "name": "filter_count",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The filter count of this inserter, loader, or logistic chest. For logistic containers, nil means no limit."
        },
        {
          "name": "time_to_live",
          "_type": "uint",
          "permissions": "Read",
          "description": "The time to live for this prototype or 0 if prototype doesn't have time_to_live or time_before_removed."
        },
        {
          "name": "distribution_effectivity",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The distribution effectivity for this beacon prototype."
        },
        {
          "name": "explosion_beam",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "Whether this explosion has a beam."
        },
        {
          "name": "explosion_rotate",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "Whether this explosion rotates."
        },
        {
          "name": "tree_color_count",
          "_type": "uint8|nil",
          "permissions": "Read",
          "description": "If it is a tree, return the number of colors it supports."
        },
        {
          "name": "alert_when_damaged",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this entity raises an alert when damaged."
        },
        {
          "name": "alert_when_attacking",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this turret raises an alert when attacking"
        },
        {
          "name": "color",
          "_type": "Color|nil",
          "permissions": "Read",
          "description": "The color of the prototype, if any."
        },
        {
          "name": "collision_mask_collides_with_self",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Does this prototype collision mask collide with itself?"
        },
        {
          "name": "collision_mask_collides_with_tiles_only",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Does this prototype collision mask collide with tiles only?"
        },
        {
          "name": "collision_mask_considers_tile_transitions",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Does this prototype collision mask consider tile transitions?"
        },
        {
          "name": "allowed_effects",
          "_type": "dictionary[string \u2192 boolean]|nil",
          "permissions": "Read",
          "description": "The allowed module effects for this entity, if any."
        },
        {
          "name": "rocket_parts_required",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The rocket parts required for this rocket silo prototype."
        },
        {
          "name": "rocket_rising_delay",
          "_type": "uint8|nil",
          "permissions": "Read",
          "description": "The rocket rising delay for this rocket silo prototype."
        },
        {
          "name": "launch_wait_time",
          "_type": "uint8|nil",
          "permissions": "Read",
          "description": "The rocket launch delay for this rocket silo prototype."
        },
        {
          "name": "light_blinking_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The light blinking speed for this rocket silo prototype."
        },
        {
          "name": "door_opening_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The door opening speed for this rocket silo prototype."
        },
        {
          "name": "rising_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The rising speed for this rocket silo rocket prototype."
        },
        {
          "name": "engine_starting_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The engine starting speed for this rocket silo rocket prototype."
        },
        {
          "name": "flying_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The flying speed for this rocket silo rocket prototype."
        },
        {
          "name": "flying_acceleration",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The flying acceleration for this rocket silo rocket prototype."
        },
        {
          "name": "fixed_recipe",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The fixed recipe name for this assembling machine prototype, if any."
        },
        {
          "name": "construction_radius",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The construction radius for this roboport prototype."
        },
        {
          "name": "logistic_radius",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The logistic radius for this roboport prototype."
        },
        {
          "name": "energy_per_hit_point",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The energy used per hitpoint taken for this vehicle during collisions."
        },
        {
          "name": "create_ghost_on_death",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this prototype will attempt to create a ghost of itself on death."
        },
        {
          "name": "ammo_category",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "Name of the ammo category of this land mine."
        },
        {
          "name": "timeout",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The time it takes this land mine to arm."
        },
        {
          "name": "trigger_collision_mask",
          "_type": "CollisionMaskWithFlags|nil",
          "permissions": "Read",
          "description": "The collision mask entities must collide with to make this landmine blow up."
        },
        {
          "name": "fluidbox_prototypes",
          "_type": "array[LuaFluidBoxPrototype]",
          "permissions": "Read",
          "description": "The fluidbox prototypes for this entity."
        },
        {
          "name": "neighbour_bonus",
          "_type": "double|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "container_distance",
          "_type": "double|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "belt_distance",
          "_type": "double|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "belt_length",
          "_type": "double|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "is_building",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Everything in the following list is considered a building."
        },
        {
          "name": "automated_ammo_count",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The amount of ammo that inserters automatically insert into this ammo-turret or artillery-turret."
        },
        {
          "name": "max_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The max speed of this projectile or flying robot prototype."
        },
        {
          "name": "darkness_for_all_lamps_on",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "Value between 0 and 1 darkness where all lamps of this lamp prototype are on."
        },
        {
          "name": "darkness_for_all_lamps_off",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "Value between 0 and 1 darkness where all lamps of this lamp prototype are off."
        },
        {
          "name": "always_on",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether the lamp is always on (except when out of power or turned off by the circuit network)."
        },
        {
          "name": "min_darkness_to_spawn",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "The minimum darkness at which this unit spawner can spawn entities."
        },
        {
          "name": "max_darkness_to_spawn",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "The maximum darkness at which this unit spawner can spawn entities."
        },
        {
          "name": "call_for_help_radius",
          "_type": "double|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "max_count_of_owned_units",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "Count of enemies this spawner can sustain."
        },
        {
          "name": "max_friends_around_to_spawn",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "How many friendly units are required within the spawning_radius of this spawner for it to stop producing more units."
        },
        {
          "name": "spawning_radius",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "How far from the spawner can the units be spawned."
        },
        {
          "name": "spawning_spacing",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "What spaces should be between the spawned units."
        },
        {
          "name": "radius",
          "_type": "double",
          "permissions": "Read",
          "description": "The radius of this entity prototype."
        },
        {
          "name": "cliff_explosive_prototype",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The item prototype name used to destroy this cliff."
        },
        {
          "name": "rocket_entity_prototype",
          "_type": "LuaEntityPrototype|nil",
          "permissions": "Read",
          "description": "The rocket entity prototype associated with this rocket silo prototype."
        },
        {
          "name": "has_belt_immunity",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this unit, car, or character prototype has belt immunity."
        },
        {
          "name": "vision_distance",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The vision distance of this unit prototype."
        },
        {
          "name": "pollution_to_join_attack",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "The amount of pollution that has to be absorbed by the unit's spawner before the unit will leave the spawner and attack the source of the pollution."
        },
        {
          "name": "min_pursue_time",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The minimum pursue time of this unit prototype."
        },
        {
          "name": "max_pursue_distance",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The maximum pursue distance of this unit prototype."
        },
        {
          "name": "radar_range",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The radar range of this unit prototype."
        },
        {
          "name": "move_while_shooting",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this unit prototype can move while shooting."
        },
        {
          "name": "can_open_gates",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this unit prototype can open gates."
        },
        {
          "name": "affected_by_tiles",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this unit prototype is affected by tile walking speed modifiers."
        },
        {
          "name": "distraction_cooldown",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The distraction cooldown of this unit prototype."
        },
        {
          "name": "spawning_time_modifier",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The spawning time modifier of this unit prototype."
        },
        {
          "name": "alert_icon_shift",
          "_type": "Vector",
          "permissions": "Read",
          "description": "The alert icon shift of this entity prototype."
        },
        {
          "name": "alert_icon_scale",
          "_type": "float",
          "permissions": "Read",
          "description": "The alert icon scale of this entity prototype."
        },
        {
          "name": "lab_inputs",
          "_type": "array[string]|nil",
          "permissions": "Read",
          "description": "The item prototype names that are the inputs of this lab prototype."
        },
        {
          "name": "researching_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The base researching speed of this lab prototype."
        },
        {
          "name": "item_slot_count",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The item slot count of this constant combinator prototype."
        },
        {
          "name": "base_productivity",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The base productivity of this crafting machine, lab, or mining drill."
        },
        {
          "name": "allow_access_to_all_forces",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this market allows access to all forces or just friendly ones."
        },
        {
          "name": "supports_direction",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether this entity prototype could possibly ever be rotated."
        },
        {
          "name": "terrain_friction_modifier",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "The terrain friction modifier for this vehicle."
        },
        {
          "name": "allow_passengers",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this vehicle allows passengers."
        },
        {
          "name": "max_distance_of_sector_revealed",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The radius of the area this radar can chart, in chunks."
        },
        {
          "name": "max_distance_of_nearby_sector_revealed",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The radius of the area constantly revealed by this radar, in chunks."
        },
        {
          "name": "adjacent_tile_collision_box",
          "_type": "BoundingBox|nil",
          "permissions": "Read",
          "description": "The bounding box that specifies which tiles adjacent to the offshore pump should be checked."
        },
        {
          "name": "adjacent_tile_collision_mask",
          "_type": "CollisionMask|nil",
          "permissions": "Read",
          "description": "Tiles adjacent to the offshore pump must not collide with this collision mask."
        },
        {
          "name": "adjacent_tile_collision_test",
          "_type": "CollisionMask|nil",
          "permissions": "Read",
          "description": "If this mask is not empty, tiles adjacent to the offshore pump must not collide with this collision mask."
        },
        {
          "name": "center_collision_mask",
          "_type": "CollisionMask|nil",
          "permissions": "Read",
          "description": "The collision mask used only for collision test with tile directly at offshore pump position."
        },
        {
          "name": "grid_prototype",
          "_type": "LuaEquipmentGridPrototype|nil",
          "permissions": "Read",
          "description": "The equipment grid prototype for this entity, if any."
        },
        {
          "name": "remove_decoratives",
          "_type": "string",
          "permissions": "Read",
          "description": "Whether this entity should remove decoratives that collide with it when this entity is built. Possible values are \"automatic\", \"true\" and \"false\"."
        },
        {
          "name": "related_underground_belt",
          "_type": "LuaEntityPrototype|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "inserter_stack_size_bonus",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The built-in stack size bonus of this inserter prototype."
        },
        {
          "name": "protected_from_tile_building",
          "_type": "boolean",
          "permissions": "Read",
          "description": "True if this entity prototype should be included during tile collision checks with LuaTilePrototype::check_collision_with_entities enabled."
        },
        {
          "name": "is_entity_with_owner",
          "_type": "boolean",
          "permissions": "Read",
          "description": "True if this is entity-with-owner"
        },
        {
          "name": "is_military_target",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "True if this entity-with-owner is military target"
        },
        {
          "name": "allow_run_time_change_of_is_military_target",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "True if this entity-with-owner's is_military_target can be changed run-time (on the entity, not on the prototype itself)"
        },
        {
          "name": "logistic_parameters",
          "_type": "table|nil",
          "permissions": "Read",
          "description": "The logistic parameters for this roboport."
        },
        {
          "name": "height",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The height of this spider vehicle prototype."
        },
        {
          "name": "torso_rotation_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The torso rotation speed of this spider vehicle prototype."
        },
        {
          "name": "torso_bob_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The torso bob speed of this spider vehicle prototype."
        },
        {
          "name": "automatic_weapon_cycling",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this spider vehicle prototype automatically cycles weapons."
        },
        {
          "name": "chain_shooting_cooldown_modifier",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The chain shooting cooldown modifier of this spider vehicle prototype."
        },
        {
          "name": "chunk_exploration_radius",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The chunk exploration radius of this spider vehicle prototype."
        },
        {
          "name": "animation_speed_coefficient",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The animation speed coefficient of this belt connectable prototype."
        },
        {
          "name": "manual_range_modifier",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The manual range modifier for this artillery turret or wagon prototype."
        },
        {
          "name": "dying_speed",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "The dying time of this corpse prototype."
        },
        {
          "name": "active_energy_usage",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The active energy usage of this rocket silo or combinator prototype."
        },
        {
          "name": "lamp_energy_usage",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The lamp energy usage of this rocket silo prototype."
        },
        {
          "name": "use_exact_mode",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this logistic container prototype uses exact mode"
        },
        {
          "name": "tile_width",
          "_type": "uint",
          "permissions": "Read",
          "description": "Specifies the tiling size of the entity, is used to decide, if the center should be in the center of the tile (odd tile size dimension) or on the tile border (even tile size dimension)"
        },
        {
          "name": "tile_height",
          "_type": "uint",
          "permissions": "Read",
          "description": "Specifies the tiling size of the entity, is used to decide, if the center should be in the center of the tile (odd tile size dimension) or on the tile border (even tile size dimension)"
        },
        {
          "name": "vertical_selection_shift",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "Vertical selection shift used by rolling stocks. It affects selection box vertical position but is also used to shift rolling stock graphics along the rails to fine tune train's look."
        },
        {
          "name": "spawn_decoration",
          "_type": "array[TriggerEffectItem]|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "spawn_decorations_on_expansion",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "connection_distance",
          "_type": "double|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "joint_distance",
          "_type": "double|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "radius_visualisation_specification",
          "_type": "RadiusVisualisationSpecification|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "running_speed",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The current movement speed of this character, including effects from exoskeletons, tiles, stickers and shooting."
        },
        {
          "name": "maximum_corner_sliding_distance",
          "_type": "double|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "build_distance",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "drop_item_distance",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "reach_distance",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "reach_resource_distance",
          "_type": "double|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "item_pickup_distance",
          "_type": "double|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "loot_pickup_distance",
          "_type": "double|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "enter_vehicle_distance",
          "_type": "double|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "ticks_to_keep_gun",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "ticks_to_keep_aiming_direction",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "ticks_to_stay_in_combat",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "respawn_time",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "damage_hit_tint",
          "_type": "Color|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "character_corpse",
          "_type": "LuaEntityPrototype|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaEquipment",
      "extends": "",
      "desc": "An item in a LuaEquipmentGrid, for example a fusion reactor placed in one's power armor.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this equipment."
        },
        {
          "name": "type",
          "_type": "string",
          "permissions": "Read",
          "description": "Type of this equipment."
        },
        {
          "name": "position",
          "_type": "EquipmentPosition",
          "permissions": "Read",
          "description": "Position of this equipment in the equipment grid."
        },
        {
          "name": "shape",
          "_type": "table",
          "permissions": "Read",
          "description": "Shape of this equipment."
        },
        {
          "name": "shield",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Current shield value of the equipment."
        },
        {
          "name": "max_shield",
          "_type": "double",
          "permissions": "Read",
          "description": "Maximum shield value."
        },
        {
          "name": "max_solar_power",
          "_type": "double",
          "permissions": "Read",
          "description": "Maximum solar power generated."
        },
        {
          "name": "movement_bonus",
          "_type": "double",
          "permissions": "Read",
          "description": "Movement speed bonus."
        },
        {
          "name": "generator_power",
          "_type": "double",
          "permissions": "Read",
          "description": "Energy generated per tick."
        },
        {
          "name": "energy",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Current available energy."
        },
        {
          "name": "max_energy",
          "_type": "double",
          "permissions": "Read",
          "description": "Maximum amount of energy that can be stored in this equipment."
        },
        {
          "name": "prototype",
          "_type": "LuaEquipmentPrototype",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "burner",
          "_type": "LuaBurner|nil",
          "permissions": "Read",
          "description": "The burner energy source for this equipment, if any."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaEquipmentCategoryPrototype",
      "extends": "",
      "desc": "Prototype of an equipment category.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaEquipmentGrid",
      "extends": "",
      "desc": "An equipment grid is for example the inside of a power armor.",
      "methods": [
        {
          "name": "take",
          "desc": "Remove an equipment from the grid.",
          "params": [
            {
              "name": "position",
              "types": [
                "EquipmentPosition?"
              ],
              "desc": "Take the equipment that contains this position in the grid."
            },
            {
              "name": "equipment",
              "types": [
                "LuaEquipment?"
              ],
              "desc": "Take this exact equipment."
            },
            {
              "name": "by_player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "If provided the action is done 'as' this player and on_player_removed_equipment is triggered."
            }
          ],
          "takes_table": true
        },
        {
          "name": "take_all",
          "desc": "Remove all equipment from the grid.",
          "params": [
            {
              "name": "by_player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "If provided, the action is done 'as' this player and on_player_removed_equipment is triggered."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear",
          "desc": "Clear all equipment from the grid, removing it without actually returning it.",
          "params": [
            {
              "name": "by_player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "If provided, the action is done 'as' this player and on_player_removed_equipment is triggered."
            }
          ],
          "takes_table": false
        },
        {
          "name": "put",
          "desc": "Insert an equipment into the grid.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "Equipment prototype name"
            },
            {
              "name": "position",
              "types": [
                "EquipmentPosition?"
              ],
              "desc": "Grid position to put the equipment in."
            },
            {
              "name": "by_player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "If provided the action is done 'as' this player and on_player_placed_equipment is triggered."
            }
          ],
          "takes_table": true
        },
        {
          "name": "can_move",
          "desc": "Check whether moving an equipment would succeed.",
          "params": [
            {
              "name": "equipment",
              "types": [
                "LuaEquipment"
              ],
              "desc": "The equipment to move"
            },
            {
              "name": "position",
              "types": [
                "EquipmentPosition"
              ],
              "desc": "Where to put it"
            }
          ],
          "takes_table": true
        },
        {
          "name": "move",
          "desc": "Move an equipment within this grid.",
          "params": [
            {
              "name": "equipment",
              "types": [
                "LuaEquipment"
              ],
              "desc": "The equipment to move"
            },
            {
              "name": "position",
              "types": [
                "EquipmentPosition"
              ],
              "desc": "Where to put it"
            }
          ],
          "takes_table": true
        },
        {
          "name": "get",
          "desc": "Find equipment in the Equipment Grid based off a position.",
          "params": [
            {
              "name": "position",
              "types": [
                "EquipmentPosition"
              ],
              "desc": "The position"
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_contents",
          "desc": "Get counts of all equipment in this grid.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "find",
          "desc": "Find equipment by name.",
          "params": [
            {
              "name": "equipment",
              "types": [
                "string"
              ],
              "desc": "Prototype name of the equipment to find."
            }
          ],
          "takes_table": false
        },
        {
          "name": "count",
          "desc": "Get the number of all or some equipment in this grid.",
          "params": [
            {
              "name": "equipment",
              "types": [
                "string?"
              ],
              "desc": "Prototype name of the equipment to count. If not specified, count all equipment."
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "prototype",
          "_type": "LuaEquipmentGridPrototype",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "width",
          "_type": "uint",
          "permissions": "Read",
          "description": "Width of the equipment grid."
        },
        {
          "name": "height",
          "_type": "uint",
          "permissions": "Read",
          "description": "Height of the equipment grid."
        },
        {
          "name": "equipment",
          "_type": "array[LuaEquipment]",
          "permissions": "Read",
          "description": "All the equipment in this grid."
        },
        {
          "name": "generator_energy",
          "_type": "double",
          "permissions": "Read",
          "description": "Total energy per tick generated by the equipment inside this grid."
        },
        {
          "name": "max_solar_energy",
          "_type": "double",
          "permissions": "Read",
          "description": "Maximum energy per tick that can be created by any solar panels in the equipment grid. Actual generated energy varies depending on the daylight levels."
        },
        {
          "name": "available_in_batteries",
          "_type": "double",
          "permissions": "Read",
          "description": "The total energy stored in all batteries in the equipment grid."
        },
        {
          "name": "battery_capacity",
          "_type": "double",
          "permissions": "Read",
          "description": "Total energy storage capacity of all batteries in the equipment grid."
        },
        {
          "name": "shield",
          "_type": "float",
          "permissions": "Read",
          "description": "The amount of shields this equipment grid has."
        },
        {
          "name": "max_shield",
          "_type": "float",
          "permissions": "Read",
          "description": "The maximum amount of shields this equipment grid has."
        },
        {
          "name": "inhibit_movement_bonus",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this grid's equipment movement bonus is active."
        },
        {
          "name": "unique_id",
          "_type": "uint",
          "permissions": "Read",
          "description": "Unique identifier of this equipment grid."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaEquipmentGridPrototype",
      "extends": "",
      "desc": "Prototype of an equipment grid.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "equipment_categories",
          "_type": "array[string]",
          "permissions": "Read",
          "description": "Equipment category names for the categories that may be inserted into this equipment grid. The grid will accept any equipment that has at least one category in this list."
        },
        {
          "name": "width",
          "_type": "uint",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "height",
          "_type": "uint",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "locked",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If the player can move equipment into or out of this grid."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaEquipmentPrototype",
      "extends": "",
      "desc": "Prototype of a modular equipment.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "type",
          "_type": "string",
          "permissions": "Read",
          "description": "Type of this equipment prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "shape",
          "_type": "table",
          "permissions": "Read",
          "description": "Shape of this equipment prototype."
        },
        {
          "name": "take_result",
          "_type": "LuaItemPrototype|nil",
          "permissions": "Read",
          "description": "The result item when taking this equipment out of an equipment grid, if any."
        },
        {
          "name": "energy_production",
          "_type": "double",
          "permissions": "Read",
          "description": "The max power generated by this equipment."
        },
        {
          "name": "shield",
          "_type": "float",
          "permissions": "Read",
          "description": "The shield value of this equipment. 0 for non-shield equipment."
        },
        {
          "name": "energy_per_shield",
          "_type": "double",
          "permissions": "Read",
          "description": "The energy per shield point restored. 0 for non-shield equipment."
        },
        {
          "name": "logistic_parameters",
          "_type": "table|nil",
          "permissions": "Read",
          "description": "The logistic parameters for this roboport equipment."
        },
        {
          "name": "energy_consumption",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "movement_bonus",
          "_type": "float|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "energy_source",
          "_type": "LuaElectricEnergySourcePrototype",
          "permissions": "Read",
          "description": "The energy source prototype for the equipment."
        },
        {
          "name": "equipment_categories",
          "_type": "array[string]",
          "permissions": "Read",
          "description": "Category names for this equipment. These categories will be used to determine whether this equipment is allowed in a particular equipment grid."
        },
        {
          "name": "burner_prototype",
          "_type": "LuaBurnerPrototype|nil",
          "permissions": "Read",
          "description": "The burner energy source prototype this equipment uses, if any."
        },
        {
          "name": "electric_energy_source_prototype",
          "_type": "LuaElectricEnergySourcePrototype|nil",
          "permissions": "Read",
          "description": "The electric energy source prototype this equipment uses, if any."
        },
        {
          "name": "background_color",
          "_type": "Color",
          "permissions": "Read",
          "description": "The background color of this equipment prototype."
        },
        {
          "name": "attack_parameters",
          "_type": "AttackParameters|nil",
          "permissions": "Read",
          "description": "The equipment attack parameters."
        },
        {
          "name": "automatic",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether this active defense equipment is automatic. Returns false if not active defense equipment."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaFlowStatistics",
      "extends": "",
      "desc": "Encapsulates statistic data for different parts of the game. In the context of flow statistics, input and output describe on which side of the associated GUI the values are shown. Input values are shown on the left side, output values on the right side.",
      "methods": [
        {
          "name": "get_input_count",
          "desc": "Gets the total input count for a given prototype.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "The prototype name."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_input_count",
          "desc": "Sets the total input count for a given prototype.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "The prototype name."
            },
            {
              "name": "count",
              "types": [
                "uint64",
                "double"
              ],
              "desc": "The new count. The type depends on the instance of the statistics."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_output_count",
          "desc": "Gets the total output count for a given prototype.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "The prototype name."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_output_count",
          "desc": "Sets the total output count for a given prototype.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "The prototype name."
            },
            {
              "name": "count",
              "types": [
                "uint64",
                "double"
              ],
              "desc": "The new count. The type depends on the instance of the statistics."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_flow_count",
          "desc": "Gets the flow count value for the given time frame. If sample_index is not provided, then the value returned is the average across the provided precision time period. These are the values shown in the bottom section of the statistics GUIs.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "The prototype name."
            },
            {
              "name": "input",
              "types": [
                "boolean"
              ],
              "desc": "Read the input values or the output values"
            },
            {
              "name": "precision_index",
              "types": [
                "defines.flow_precision_index"
              ],
              "desc": "The precision range to read."
            },
            {
              "name": "sample_index",
              "types": [
                "uint16?"
              ],
              "desc": "The sample index to read from within the precision range. If not provided, the entire precision range is read. Must be between 1 and 300 where 1 is the most recent sample and 300 is the oldest."
            },
            {
              "name": "count",
              "types": [
                "boolean?"
              ],
              "desc": "If true, the count of items/fluids/entities is returned instead of the per-time-frame value."
            }
          ],
          "takes_table": true
        },
        {
          "name": "on_flow",
          "desc": "Adds a value to this flow statistics.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "The prototype name."
            },
            {
              "name": "count",
              "types": [
                "float"
              ],
              "desc": "The count: positive or negative determines if the value goes in the input or output statistics."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear",
          "desc": "Reset all the statistics data to 0.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "input_counts",
          "_type": "dictionary[string \u2192 uint64|double]",
          "permissions": "Read",
          "description": "List of input counts indexed by prototype name. Represents the data that is shown on the left side of the GUI for the given statistics."
        },
        {
          "name": "output_counts",
          "_type": "dictionary[string \u2192 uint64|double]",
          "permissions": "Read",
          "description": "List of output counts indexed by prototype name. Represents the data that is shown on the right side of the GUI for the given statistics."
        },
        {
          "name": "force",
          "_type": "LuaForce|nil",
          "permissions": "Read",
          "description": "The force these statistics belong to. nil for pollution statistics."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaFluidBox",
      "extends": "",
      "desc": "An array of fluid boxes of an entity. Entities may contain more than one fluid box, and some can change the number of fluid boxes -- for instance, an assembling machine will change its number of fluid boxes depending on its active recipe. See Fluid.",
      "methods": [
        {
          "name": "get_prototype",
          "desc": "The prototype of this fluidbox index. If this is used on a fluidbox of a crafting machine which due to recipe was created by merging multiple prototypes, a table of prototypes that were merged will be returned instead",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_capacity",
          "desc": "The capacity of the given fluidbox index.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_connections",
          "desc": "The fluidboxes to which the fluidbox at the given index is connected.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_pipe_connections",
          "desc": "Get the fluid box's connections and associated data.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_filter",
          "desc": "Get a fluid box filter",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The index of the filter to get."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_filter",
          "desc": "Set a fluid box filter.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The index of the filter to set."
            },
            {
              "name": "filter",
              "types": [
                "FluidBoxFilterSpec",
                "nil"
              ],
              "desc": "The filter to set. Setting nil clears the filter."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_flow",
          "desc": "Flow through the fluidbox in the last tick. It is the larger of in-flow and out-flow.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_locked_fluid",
          "desc": "Returns the fluid the fluidbox is locked onto",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_fluid_system_id",
          "desc": "Gets unique fluid system identifier of selected fluid box. May return nil for fluid wagon, fluid turret's internal buffer or a fluidbox which does not belong to a fluid system",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_fluid_system_contents",
          "desc": "Gets counts of all fluids in the fluid system. May return nil for fluid wagon, fluid turret's internal buffer, or a fluidbox which does not belong to a fluid system.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "flush",
          "desc": "Flushes all fluid from this fluidbox and its fluid system.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            },
            {
              "name": "fluid",
              "types": [
                "FluidIdentification?"
              ],
              "desc": "If provided, only this fluid is flushed."
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "owner",
          "_type": "LuaEntity",
          "permissions": "Read",
          "description": "The entity that owns this fluidbox."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaFluidBoxPrototype",
      "extends": "",
      "desc": "A prototype of a fluidbox owned by some LuaEntityPrototype.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "entity",
          "_type": "LuaEntityPrototype",
          "permissions": "Read",
          "description": "The entity that this belongs to."
        },
        {
          "name": "index",
          "_type": "uint",
          "permissions": "Read",
          "description": "The index of this fluidbox prototype in the owning entity."
        },
        {
          "name": "pipe_connections",
          "_type": "array[FluidBoxConnection]",
          "permissions": "Read",
          "description": "The pipe connection points."
        },
        {
          "name": "production_type",
          "_type": "\"input\"|\"input-output\"|\"output\"|\"none\"",
          "permissions": "Read",
          "description": "The production type."
        },
        {
          "name": "base_area",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "base_level",
          "_type": "float",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "height",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "volume",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "filter",
          "_type": "LuaFluidPrototype|nil",
          "permissions": "Read",
          "description": "The filter, if any is set."
        },
        {
          "name": "minimum_temperature",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The minimum temperature, if any is set."
        },
        {
          "name": "maximum_temperature",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The maximum temperature, if any is set."
        },
        {
          "name": "secondary_draw_orders",
          "_type": "array[int]",
          "permissions": "Read",
          "description": "The secondary draw orders for the 4 possible connection directions."
        },
        {
          "name": "render_layer",
          "_type": "string",
          "permissions": "Read",
          "description": "The render layer."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaFluidEnergySourcePrototype",
      "extends": "",
      "desc": "Prototype of a fluid energy source.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "emissions",
          "_type": "double",
          "permissions": "Read",
          "description": "The emissions of this energy source in pollution/Joule. Multiplying it by energy consumption in Watt gives pollution/second."
        },
        {
          "name": "render_no_network_icon",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "render_no_power_icon",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "effectivity",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "burns_fluid",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "scale_fluid_usage",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "destroy_non_fuel_fluid",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "fluid_usage_per_tick",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "smoke",
          "_type": "array[SmokeSource]",
          "permissions": "Read",
          "description": "The smoke sources for this prototype, if any."
        },
        {
          "name": "maximum_temperature",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "fluid_box",
          "_type": "LuaFluidBoxPrototype",
          "permissions": "Read",
          "description": "The fluid box for this energy source."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaFluidPrototype",
      "extends": "",
      "desc": "Prototype of a fluid.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "default_temperature",
          "_type": "double",
          "permissions": "Read",
          "description": "Default temperature of this fluid."
        },
        {
          "name": "max_temperature",
          "_type": "double",
          "permissions": "Read",
          "description": "Maximum temperature this fluid can reach."
        },
        {
          "name": "heat_capacity",
          "_type": "double",
          "permissions": "Read",
          "description": "The amount of energy in Joules required to heat one unit of this fluid by 1\u00b0C."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "group",
          "_type": "LuaGroup",
          "permissions": "Read",
          "description": "Group of this prototype."
        },
        {
          "name": "subgroup",
          "_type": "LuaGroup",
          "permissions": "Read",
          "description": "Subgroup of this prototype."
        },
        {
          "name": "base_color",
          "_type": "Color",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "flow_color",
          "_type": "Color",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "gas_temperature",
          "_type": "double",
          "permissions": "Read",
          "description": "The temperature above which this fluid will be shown as gaseous inside tanks and pipes."
        },
        {
          "name": "emissions_multiplier",
          "_type": "double",
          "permissions": "Read",
          "description": "A multiplier on the amount of emissions produced when this fluid is burnt in a generator. A value above 1.0 increases emissions and vice versa. The multiplier can't be negative."
        },
        {
          "name": "fuel_value",
          "_type": "double",
          "permissions": "Read",
          "description": "The amount of energy in Joules one unit of this fluid will produce when burnt in a generator. A value of 0 means this fluid can't be used for energy generation. The value can't be negative."
        },
        {
          "name": "hidden",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether this fluid is hidden from the fluid and signal selectors."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaFontPrototype",
      "extends": "",
      "desc": "Prototype of a font.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "from",
          "_type": "string",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "size",
          "_type": "int",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "spacing",
          "_type": "float",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "border",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "filtered",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "border_color",
          "_type": "Color|nil",
          "permissions": "Read",
          "description": "The border color, if any."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaForce",
      "extends": "",
      "desc": "LuaForce encapsulates data local to each \"force\" or \"faction\" of the game. Default forces are player, enemy and neutral. Players and mods can create additional forces (up to 64 total).",
      "methods": [
        {
          "name": "get_entity_count",
          "desc": "Count entities of given type.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "Prototype name of the entity."
            }
          ],
          "takes_table": false
        },
        {
          "name": "disable_research",
          "desc": "Disable research for this force.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "enable_research",
          "desc": "Enable research for this force.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "disable_all_prototypes",
          "desc": "Disable all recipes and technologies. Only recipes and technologies enabled explicitly will be useable from this point.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "enable_all_prototypes",
          "desc": "Enables all recipes and technologies. The opposite of LuaForce::disable_all_prototypes",
          "params": [],
          "takes_table": false
        },
        {
          "name": "reset_recipes",
          "desc": "Load the original version of all recipes from the prototypes.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "enable_all_recipes",
          "desc": "Unlock all recipes.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "enable_all_technologies",
          "desc": "Unlock all technologies.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "research_all_technologies",
          "desc": "Research all technologies.",
          "params": [
            {
              "name": "include_disabled_prototypes",
              "types": [
                "boolean?"
              ],
              "desc": "Whether technologies that are explicitly disabled in the prototype should also be researched. Defaults to false."
            }
          ],
          "takes_table": false
        },
        {
          "name": "reset_technologies",
          "desc": "Load the original versions of technologies from prototypes. Preserves research state of technologies.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "reset",
          "desc": "Reset everything. All technologies are set to not researched, all modifiers are set to default values.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "reset_technology_effects",
          "desc": "Reapplies all possible research effects, including unlocked recipes. Any custom changes are lost. Preserves research state of technologies.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "chart",
          "desc": "Chart a portion of the map. The chart for the given area is refreshed; it creates chart for any parts of the given area that haven't been charted yet.",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "area",
              "types": [
                "BoundingBox"
              ],
              "desc": "The area on the given surface to chart."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_chart",
          "desc": "Erases chart data for this force.",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": "Which surface to erase chart data for or if not provided all surfaces charts are erased."
            }
          ],
          "takes_table": false
        },
        {
          "name": "rechart",
          "desc": "Force a rechart of the whole chart.",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": "Which surface to rechart or all if not given."
            }
          ],
          "takes_table": false
        },
        {
          "name": "chart_all",
          "desc": "Chart all generated chunks.",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": "Which surface to chart or all if not given."
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_chunk_charted",
          "desc": "Has a chunk been charted?",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "position",
              "types": [
                "ChunkPosition"
              ],
              "desc": "Position of the chunk."
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_chunk_visible",
          "desc": "Is the given chunk currently charted and visible (not covered by fog of war) on the map.",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "position",
              "types": [
                "ChunkPosition"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_chunk_requested_for_charting",
          "desc": "Has a chunk been requested for charting?",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "position",
              "types": [
                "ChunkPosition"
              ],
              "desc": "Position of the chunk."
            }
          ],
          "takes_table": false
        },
        {
          "name": "cancel_charting",
          "desc": "Cancels pending chart requests for the given surface or all surfaces.",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_ammo_damage_modifier",
          "desc": "Ammo category",
          "params": [
            {
              "name": "ammo",
              "types": [
                "string"
              ],
              "desc": "Ammo category"
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_ammo_damage_modifier",
          "desc": "Ammo category",
          "params": [
            {
              "name": "ammo",
              "types": [
                "string"
              ],
              "desc": "Ammo category"
            },
            {
              "name": "modifier",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_gun_speed_modifier",
          "desc": "Ammo category",
          "params": [
            {
              "name": "ammo",
              "types": [
                "string"
              ],
              "desc": "Ammo category"
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_gun_speed_modifier",
          "desc": "Ammo category",
          "params": [
            {
              "name": "ammo",
              "types": [
                "string"
              ],
              "desc": "Ammo category"
            },
            {
              "name": "modifier",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_turret_attack_modifier",
          "desc": "Turret prototype name",
          "params": [
            {
              "name": "turret",
              "types": [
                "string"
              ],
              "desc": "Turret prototype name"
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_turret_attack_modifier",
          "desc": "Turret prototype name",
          "params": [
            {
              "name": "turret",
              "types": [
                "string"
              ],
              "desc": "Turret prototype name"
            },
            {
              "name": "modifier",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_cease_fire",
          "desc": "Add other force to this force's cease fire list. Forces on the cease fire list won't be targeted for attack.",
          "params": [
            {
              "name": "other",
              "types": [
                "ForceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "cease_fire",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_cease_fire",
          "desc": "Is other force in this force's cease fire list?",
          "params": [
            {
              "name": "other",
              "types": [
                "ForceIdentification"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_friend",
          "desc": "Add other force to this force's friends list. Friends have unrestricted access to buildings and turrets won't fire at them.",
          "params": [
            {
              "name": "other",
              "types": [
                "ForceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "friend",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_friend",
          "desc": "Is other force in this force's friends list.",
          "params": [
            {
              "name": "other",
              "types": [
                "ForceIdentification"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_pathfinder_busy",
          "desc": "Is pathfinder busy? When the pathfinder is busy, it won't accept any more pathfinding requests.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "kill_all_units",
          "desc": "Kill all units and flush the pathfinder.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "find_logistic_network_by_position",
          "desc": "Position to find a network for",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Position to find a network for"
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": "Surface to search on"
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_spawn_position",
          "desc": "The new position on the given surface.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "The new position on the given surface."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": "Surface to set the spawn position for."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_spawn_position",
          "desc": "",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "unchart_chunk",
          "desc": "The chunk position to unchart.",
          "params": [
            {
              "name": "position",
              "types": [
                "ChunkPosition"
              ],
              "desc": "The chunk position to unchart."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": "Surface to unchart on."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_item_launched",
          "desc": "Gets the count of a given item launched in rockets.",
          "params": [
            {
              "name": "item",
              "types": [
                "string"
              ],
              "desc": "The item to get"
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_item_launched",
          "desc": "Sets the count of a given item launched in rockets.",
          "params": [
            {
              "name": "item",
              "types": [
                "string"
              ],
              "desc": "The item to set"
            },
            {
              "name": "count",
              "types": [
                "uint"
              ],
              "desc": "The count to set"
            }
          ],
          "takes_table": false
        },
        {
          "name": "print",
          "desc": "Print text to the chat console of all players on this force.",
          "params": [
            {
              "name": "message",
              "types": [
                "LocalisedString"
              ],
              "desc": ""
            },
            {
              "name": "print_settings",
              "types": [
                "Color",
                "PrintSettings?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_trains",
          "desc": "The surface to search. Not providing a surface will match trains on any surface.",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": "The surface to search. Not providing a surface will match trains on any surface."
            }
          ],
          "takes_table": false
        },
        {
          "name": "add_chart_tag",
          "desc": "Adds a custom chart tag to the given surface and returns the new tag or nil if the given position isn't valid for a chart tag.",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": "Which surface to add the tag to."
            },
            {
              "name": "tag",
              "types": [
                "ChartTagSpec"
              ],
              "desc": "The tag to add."
            }
          ],
          "takes_table": false
        },
        {
          "name": "find_chart_tags",
          "desc": "Finds all custom chart tags within the given bounding box on the given surface.",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "area",
              "types": [
                "BoundingBox?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_saved_technology_progress",
          "desc": "Gets the saved progress for the given technology or nil if there is no saved progress.",
          "params": [
            {
              "name": "technology",
              "types": [
                "TechnologyIdentification"
              ],
              "desc": "The technology"
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_saved_technology_progress",
          "desc": "Sets the saved progress for the given technology. The technology must not be in progress, must not be completed, and the new progress must be < 100%.",
          "params": [
            {
              "name": "technology",
              "types": [
                "TechnologyIdentification"
              ],
              "desc": "The technology"
            },
            {
              "name": "progress",
              "types": [
                "double"
              ],
              "desc": "Progress as a percent. Set to nil to remove the saved progress."
            }
          ],
          "takes_table": false
        },
        {
          "name": "reset_evolution",
          "desc": "Resets evolution for this force to zero.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "play_sound",
          "desc": "Play a sound for every player in this force.",
          "params": [
            {
              "name": "path",
              "types": [
                "SoundPath"
              ],
              "desc": "The sound to play."
            },
            {
              "name": "position",
              "types": [
                "MapPosition?"
              ],
              "desc": "Where the sound should be played. If not given, it's played at the current position of each player."
            },
            {
              "name": "volume_modifier",
              "types": [
                "double?"
              ],
              "desc": "The volume of the sound to play. Must be between 0 and 1 inclusive."
            },
            {
              "name": "override_sound_type",
              "types": [
                "SoundType?"
              ],
              "desc": "The volume mixer to play the sound through. Defaults to the default mixer for the given sound type."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_train_stops",
          "desc": "Gets train stops matching the given filters.",
          "params": [
            {
              "name": "name",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": "The name(s) of the train stops. Not providing names will match any stop."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": "The surface to search. Not providing a surface will match stops on any surface."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_hand_crafting_disabled_for_recipe",
          "desc": "Gets if the given recipe is explicitly disabled from being hand crafted.",
          "params": [
            {
              "name": "recipe",
              "types": [
                "string",
                "LuaRecipe"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_hand_crafting_disabled_for_recipe",
          "desc": "Sets if the given recipe can be hand-crafted. This is used to explicitly disable hand crafting a recipe - it won't allow hand-crafting otherwise not hand-craftable recipes.",
          "params": [
            {
              "name": "recipe",
              "types": [
                "string",
                "LuaRecipe"
              ],
              "desc": ""
            },
            {
              "name": "hand_crafting_disabled",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "add_research",
          "desc": "Add this technology to the back of the research queue if the queue is enabled. Otherwise, set this technology to be researched now.",
          "params": [
            {
              "name": "technology",
              "types": [
                "TechnologyIdentification"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "cancel_current_research",
          "desc": "Stop the research currently in progress. This will remove any dependent technologies from the research queue.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_linked_inventory",
          "desc": "Gets the linked inventory for the given prototype and link ID if it exists or nil.",
          "params": [
            {
              "name": "prototype",
              "types": [
                "EntityPrototypeIdentification"
              ],
              "desc": ""
            },
            {
              "name": "link_id",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_friend",
          "desc": "Is this force a friend? This differs from get_friend in that it is always true for neutral force. This is equivalent to checking the friend ForceCondition.",
          "params": [
            {
              "name": "other",
              "types": [
                "ForceIdentification"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_enemy",
          "desc": "Is this force an enemy? This differs from get_cease_fire in that it is always false for neutral force. This is equivalent to checking the enemy ForceCondition.",
          "params": [
            {
              "name": "other",
              "types": [
                "ForceIdentification"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of the force."
        },
        {
          "name": "technologies",
          "_type": "LuaCustomTable[string \u2192 LuaTechnology]",
          "permissions": "Read",
          "description": "Technologies owned by this force, indexed by name."
        },
        {
          "name": "recipes",
          "_type": "LuaCustomTable[string \u2192 LuaRecipe]",
          "permissions": "Read",
          "description": "Recipes available to this force, indexed by name."
        },
        {
          "name": "manual_mining_speed_modifier",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Multiplier of the manual mining speed. Default value is 0. The actual mining speed will be multiplied by 1 + manual_mining_speed_modifier."
        },
        {
          "name": "manual_crafting_speed_modifier",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Multiplier of the manual crafting speed. Default value is 0. The actual crafting speed will be multiplied by 1 + manual_crafting_speed_modifier."
        },
        {
          "name": "laboratory_speed_modifier",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "laboratory_productivity_bonus",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "worker_robots_speed_modifier",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "worker_robots_battery_modifier",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "worker_robots_storage_bonus",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "current_research",
          "_type": "LuaTechnology|nil",
          "permissions": "Read",
          "description": "The currently ongoing technology research, if any."
        },
        {
          "name": "research_progress",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Progress of current research, as a number in range [0, 1]."
        },
        {
          "name": "previous_research",
          "_type": "LuaTechnology|nil",
          "permissions": "Read/Write",
          "description": "The previous research, if any."
        },
        {
          "name": "inserter_stack_size_bonus",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The inserter stack size bonus for non stack inserters"
        },
        {
          "name": "stack_inserter_capacity_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "Number of items that can be transferred by stack inserters. When writing to this value, it must be >= 0 and <= 254."
        },
        {
          "name": "character_trash_slot_count",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Number of character trash slots."
        },
        {
          "name": "maximum_following_robot_count",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "Maximum number of follower robots."
        },
        {
          "name": "following_robots_lifetime_modifier",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Additional lifetime for following robots."
        },
        {
          "name": "ghost_time_to_live",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The time, in ticks, before a placed ghost disappears."
        },
        {
          "name": "players",
          "_type": "array[LuaPlayer]",
          "permissions": "Read",
          "description": "Players belonging to this force."
        },
        {
          "name": "ai_controllable",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Enables some higher-level AI behaviour for this force. When set to true, biters belonging to this force will automatically expand into new territories, build new spawners, and form unit groups. By default, this value is true for the enemy force and false for all others."
        },
        {
          "name": "logistic_networks",
          "_type": "dictionary[string \u2192 array[LuaLogisticNetwork]]",
          "permissions": "Read",
          "description": "List of logistic networks, grouped by surface."
        },
        {
          "name": "item_production_statistics",
          "_type": "LuaFlowStatistics",
          "permissions": "Read",
          "description": "The item production statistics for this force."
        },
        {
          "name": "fluid_production_statistics",
          "_type": "LuaFlowStatistics",
          "permissions": "Read",
          "description": "The fluid production statistics for this force."
        },
        {
          "name": "kill_count_statistics",
          "_type": "LuaFlowStatistics",
          "permissions": "Read",
          "description": "The kill counter statistics for this force."
        },
        {
          "name": "entity_build_count_statistics",
          "_type": "LuaFlowStatistics",
          "permissions": "Read",
          "description": "The entity build statistics for this force (built and mined)"
        },
        {
          "name": "character_running_speed_modifier",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Modifies the running speed of all characters in this force by the given value as a percentage. Setting the running modifier to 0.5 makes the character run 50% faster. The minimum value of -1 reduces the movement speed by 100%, resulting in a speed of 0."
        },
        {
          "name": "artillery_range_modifier",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "character_build_distance_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "character_item_drop_distance_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "character_reach_distance_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "character_resource_reach_distance_bonus",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "character_item_pickup_distance_bonus",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "character_loot_pickup_distance_bonus",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "character_inventory_slots_bonus",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "the number of additional inventory slots the character main inventory has."
        },
        {
          "name": "deconstruction_time_to_live",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The time, in ticks, before a deconstruction order is removed."
        },
        {
          "name": "character_health_bonus",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "max_successful_attempts_per_tick_per_construction_queue",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "max_failed_attempts_per_tick_per_construction_queue",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "zoom_to_world_enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Ability to use zoom-to-world on map."
        },
        {
          "name": "zoom_to_world_ghost_building_enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Ability to build ghosts through blueprint or direct ghost placement, or \"mine\" ghosts when using zoom-to-world."
        },
        {
          "name": "zoom_to_world_blueprint_enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Ability to create new blueprints using empty blueprint item when using zoom-to-world."
        },
        {
          "name": "zoom_to_world_deconstruction_planner_enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Ability to use deconstruction planner when using zoom-to-world."
        },
        {
          "name": "zoom_to_world_selection_tool_enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Ability to use custom selection tools when using zoom-to-world."
        },
        {
          "name": "character_logistic_requests",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if character requester logistics is enabled."
        },
        {
          "name": "rockets_launched",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The number of rockets launched."
        },
        {
          "name": "items_launched",
          "_type": "dictionary[string \u2192 uint]",
          "permissions": "Read",
          "description": "All of the items that have been launched in rockets. The attribute is a dictionary mapping the item prototype names to the launched amounts."
        },
        {
          "name": "connected_players",
          "_type": "array[LuaPlayer]",
          "permissions": "Read",
          "description": "The connected players belonging to this force."
        },
        {
          "name": "mining_drill_productivity_bonus",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "train_braking_force_bonus",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "evolution_factor",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Evolution factor of this force."
        },
        {
          "name": "evolution_factor_by_pollution",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "evolution_factor_by_time",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "evolution_factor_by_killing_spawners",
          "_type": "double",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "friendly_fire",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If friendly fire is enabled for this force."
        },
        {
          "name": "share_chart",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If sharing chart data is enabled for this force."
        },
        {
          "name": "research_queue_enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether the research queue is available for this force."
        },
        {
          "name": "index",
          "_type": "uint",
          "permissions": "Read",
          "description": "This force's index in LuaGameScript::forces (unique ID). It is assigned when a force is created, and remains so until it is merged (ie. deleted). Indexes of merged forces can be reused."
        },
        {
          "name": "research_queue",
          "_type": "array[TechnologyIdentification]",
          "permissions": "Read/Write",
          "description": "The research queue of this force. The first technology in the array is the currently active one. Reading this attribute gives an array of LuaTechnology."
        },
        {
          "name": "research_enabled",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether research is enabled for this force, see LuaForce::enable_research and LuaForce::disable_research"
        },
        {
          "name": "custom_color",
          "_type": "Color|nil",
          "permissions": "Read/Write",
          "description": "Custom color for this force. If specified, will take priority over other sources of the force color. Writing nil clears custom color. Will return nil if it was not specified or if was set to {0,0,0,0}"
        },
        {
          "name": "color",
          "_type": "Color",
          "permissions": "Read",
          "description": "Effective color of this force."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaFuelCategoryPrototype",
      "extends": "",
      "desc": "Prototype of a fuel category.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaGameScript",
      "extends": "",
      "desc": "Main toplevel type, provides access to most of the API though its members. An instance of LuaGameScript is available as the global object named game.",
      "methods": [
        {
          "name": "set_game_state",
          "desc": "Set scenario state. Any parameters not provided do not change the current state.",
          "params": [
            {
              "name": "game_finished",
              "types": [
                "boolean?"
              ],
              "desc": ""
            },
            {
              "name": "player_won",
              "types": [
                "boolean?"
              ],
              "desc": ""
            },
            {
              "name": "next_level",
              "types": [
                "string?"
              ],
              "desc": ""
            },
            {
              "name": "can_continue",
              "types": [
                "boolean?"
              ],
              "desc": ""
            },
            {
              "name": "victorious_force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": ""
            }
          ],
          "takes_table": true
        },
        {
          "name": "reset_game_state",
          "desc": "Reset scenario state (game_finished, player_won, etc.).",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_entity_by_tag",
          "desc": "Gets an entity by its name tag. Entity name tags can be set in the entity \"extra settings\" GUI in the map editor.",
          "params": [
            {
              "name": "tag",
              "types": [
                "string"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "show_message_dialog",
          "desc": "Show an in-game message dialog.",
          "params": [
            {
              "name": "text",
              "types": [
                "LocalisedString"
              ],
              "desc": "What the dialog should say"
            },
            {
              "name": "image",
              "types": [
                "string?"
              ],
              "desc": "Path to an image to show on the dialog"
            },
            {
              "name": "point_to",
              "types": [
                "GuiArrowSpecification?"
              ],
              "desc": "If specified, dialog will show an arrow pointing to this place. When not specified, the arrow will point to the player's position. (Use point_to={type=\"nowhere\"} to remove the arrow entirely.) The dialog itself will be placed near the arrow's target."
            },
            {
              "name": "style",
              "types": [
                "string?"
              ],
              "desc": "The gui style to use for this speech bubble. Must be of type speech_bubble."
            },
            {
              "name": "wrapper_frame_style",
              "types": [
                "string?"
              ],
              "desc": "Must be of type flow_style."
            }
          ],
          "takes_table": true
        },
        {
          "name": "is_demo",
          "desc": "Is this the demo version of Factorio?",
          "params": [],
          "takes_table": false
        },
        {
          "name": "reload_script",
          "desc": "Forces a reload of the scenario script from the original scenario location.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "reload_mods",
          "desc": "Forces a reload of all mods.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "save_atlas",
          "desc": "Saves the current configuration of Atlas to a file. This will result in huge file containing all of the game graphics moved to as small space as possible.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "check_consistency",
          "desc": "Run internal consistency checks. Allegedly prints any errors it finds.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "regenerate_entity",
          "desc": "Regenerate autoplacement of some entities on all surfaces. This can be used to autoplace newly-added entities.",
          "params": [
            {
              "name": "entities",
              "types": [
                "string",
                "array[string]"
              ],
              "desc": "Prototype names of entity or entities to autoplace."
            }
          ],
          "takes_table": false
        },
        {
          "name": "take_screenshot",
          "desc": "Take a screenshot of the game and save it to the script-output folder, located in the game's user data directory. The name of the image file can be specified via the path parameter.",
          "params": [
            {
              "name": "player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "The player to focus on. Defaults to the local player."
            },
            {
              "name": "by_player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "If defined, the screenshot will only be taken for this player."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": "If defined, the screenshot will be taken on this surface."
            },
            {
              "name": "position",
              "types": [
                "MapPosition?"
              ],
              "desc": "If defined, the screenshot will be centered on this position. Otherwise, the screenshot will center on player."
            },
            {
              "name": "resolution",
              "types": [
                "TilePosition?"
              ],
              "desc": "The maximum allowed resolution is 16384x16384 (8192x8192 when anti_alias is true), but the maximum recommended resolution is 4096x4096 (resp. 2048x2048)."
            },
            {
              "name": "zoom",
              "types": [
                "double?"
              ],
              "desc": "The map zoom to take the screenshot at. Defaults to 1."
            },
            {
              "name": "path",
              "types": [
                "string?"
              ],
              "desc": "The name of the image file. It should include a file extension indicating the desired format. Supports .png, .jpg /.jpeg, .tga and .bmp. Providing a directory path (ex. \"save/here/screenshot.png\") will create the necessary folder structure in script-output. Defaults to \"screenshot.png\"."
            },
            {
              "name": "show_gui",
              "types": [
                "boolean?"
              ],
              "desc": "Whether to include GUIs in the screenshot or not. Defaults to false."
            },
            {
              "name": "show_entity_info",
              "types": [
                "boolean?"
              ],
              "desc": "Whether to include entity info (\"Alt mode\") or not. Defaults to false."
            },
            {
              "name": "show_cursor_building_preview",
              "types": [
                "boolean?"
              ],
              "desc": "When true and when player is specified, the building preview for the item in the player's cursor will also be rendered. Defaults to false."
            },
            {
              "name": "anti_alias",
              "types": [
                "boolean?"
              ],
              "desc": "Whether to render in double resolution and downscale the result (including GUI). Defaults to false."
            },
            {
              "name": "quality",
              "types": [
                "int?"
              ],
              "desc": "The .jpg render quality as a percentage (from 0% to 100% inclusive), if used. A lower value means a more compressed image. Defaults to 80."
            },
            {
              "name": "allow_in_replay",
              "types": [
                "boolean?"
              ],
              "desc": "Whether to save the screenshot even during replay playback. Defaults to false."
            },
            {
              "name": "daytime",
              "types": [
                "double?"
              ],
              "desc": "Overrides the current surface daytime for the duration of screenshot rendering."
            },
            {
              "name": "water_tick",
              "types": [
                "uint?"
              ],
              "desc": "Overrides the tick of water animation, if animated water is enabled."
            },
            {
              "name": "force_render",
              "types": [
                "boolean?"
              ],
              "desc": "Screenshot requests are processed in between game update and render. The game may skip rendering (ie. drop frames) if the previous frame has not finished rendering or the game simulation starts to fall below 60 updates per second. If force_render is set to true, the game won't drop frames and process the screenshot request at the end of the update in which the request was created. This is not honored on multiplayer clients that are catching up to server. Defaults to false."
            }
          ],
          "takes_table": true
        },
        {
          "name": "set_wait_for_screenshots_to_finish",
          "desc": "Forces the screenshot saving system to wait until all queued screenshots have been written to disk.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "take_technology_screenshot",
          "desc": "Take a screenshot of the technology screen and save it to the script-output folder, located in the game's user data directory. The name of the image file can be specified via the path parameter.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "The force whose technology to screenshot. If not given, the \"player\" force is used."
            },
            {
              "name": "path",
              "types": [
                "string?"
              ],
              "desc": "The name of the image file. It should include a file extension indicating the desired format. Supports .png, .jpg /.jpeg, .tga and .bmp. Providing a directory path (ex. \"save/here/screenshot.png\") will create the necessary folder structure in script-output. Defaults to \"technology-screenshot.png\"."
            },
            {
              "name": "by_player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "If given, the screenshot will only be taken for this player."
            },
            {
              "name": "selected_technology",
              "types": [
                "TechnologyIdentification?"
              ],
              "desc": "The technology to highlight."
            },
            {
              "name": "skip_disabled",
              "types": [
                "boolean?"
              ],
              "desc": "If true, disabled technologies will be skipped. Their successors will be attached to the disabled technology's parents. Defaults to false."
            },
            {
              "name": "quality",
              "types": [
                "int?"
              ],
              "desc": "The .jpg render quality as a percentage (from 0% to 100% inclusive), if used. A lower value means a more compressed image. Defaults to 80."
            }
          ],
          "takes_table": true
        },
        {
          "name": "table_to_json",
          "desc": "Convert a table to a JSON string",
          "params": [
            {
              "name": "data",
              "types": [
                "table"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "json_to_table",
          "desc": "Convert a JSON string to a table.",
          "params": [
            {
              "name": "json",
              "types": [
                "string"
              ],
              "desc": "The string to convert."
            }
          ],
          "takes_table": false
        },
        {
          "name": "write_file",
          "desc": "Write a file to the script-output folder, located in the game's user data directory. The name and file extension of the file can be specified via the filename parameter.",
          "params": [
            {
              "name": "filename",
              "types": [
                "string"
              ],
              "desc": "The name of the file. Providing a directory path (ex. \"save/here/example.txt\") will create the necessary folder structure in script-output."
            },
            {
              "name": "data",
              "types": [
                "LocalisedString"
              ],
              "desc": "The content to write to the file."
            },
            {
              "name": "append",
              "types": [
                "boolean?"
              ],
              "desc": "If true, data will be appended to the end of the file. Defaults to false, which will overwrite any pre-existing file with the new data."
            },
            {
              "name": "for_player",
              "types": [
                "uint?"
              ],
              "desc": "If given, the file will only be written for this player_index. Providing 0 will only write to the server's output if present."
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove_path",
          "desc": "Remove a file or directory in the script-output folder, located in the game's user data directory. Can be used to remove files created by LuaGameScript::write_file.",
          "params": [
            {
              "name": "path",
              "types": [
                "string"
              ],
              "desc": "The path to the file or directory to remove, relative to script-output."
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove_offline_players",
          "desc": "Remove players who are currently not connected from the map.",
          "params": [
            {
              "name": "players",
              "types": [
                "array[PlayerIdentification]?"
              ],
              "desc": "List of players to remove. If not specified, remove all offline players."
            }
          ],
          "takes_table": false
        },
        {
          "name": "force_crc",
          "desc": "Force a CRC check. Tells all peers to calculate their current CRC, which are then compared to each other. If a mismatch is detected, the game desyncs and some peers are forced to reconnect.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "create_force",
          "desc": "Create a new force.",
          "params": [
            {
              "name": "force",
              "types": [
                "string"
              ],
              "desc": "Name of the new force"
            }
          ],
          "takes_table": false
        },
        {
          "name": "merge_forces",
          "desc": "Marks two forces to be merged together. All players and entities in the source force will be reassigned to the target force. The source force will then be destroyed. Importantly, this does not merge technologies or bonuses, which are instead retained from the target force.",
          "params": [
            {
              "name": "source",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force to remove."
            },
            {
              "name": "destination",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force to reassign all entities to."
            }
          ],
          "takes_table": false
        },
        {
          "name": "create_surface",
          "desc": "Create a new surface.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "Name of the new surface."
            },
            {
              "name": "settings",
              "types": [
                "MapGenSettings?"
              ],
              "desc": "Map generation settings."
            }
          ],
          "takes_table": false
        },
        {
          "name": "server_save",
          "desc": "Instruct the server to save the map. Only actually saves when in multiplayer.",
          "params": [
            {
              "name": "name",
              "types": [
                "string?"
              ],
              "desc": "Save file name. If not specified, the currently running save is overwritten."
            }
          ],
          "takes_table": false
        },
        {
          "name": "auto_save",
          "desc": "Instruct the game to perform an auto-save.",
          "params": [
            {
              "name": "name",
              "types": [
                "string?"
              ],
              "desc": "The autosave name if any. Saves will be named _autosave-name when provided."
            }
          ],
          "takes_table": false
        },
        {
          "name": "delete_surface",
          "desc": "Deletes the given surface and all entities on it.",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": "The surface to be deleted. Currently the primary surface (1, 'nauvis') cannot be deleted."
            }
          ],
          "takes_table": false
        },
        {
          "name": "disable_replay",
          "desc": "Disables replay saving for the current save file. Once done there's no way to re-enable replay saving for the save file without loading an old save.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "disable_tutorial_triggers",
          "desc": "Disables tutorial triggers, that unlock new tutorials and show notices about unlocked tutorials.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "direction_to_string",
          "desc": "Converts the given direction into the string version of the direction.",
          "params": [
            {
              "name": "direction",
              "types": [
                "defines.direction"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "print",
          "desc": "Print text to the chat console all players.",
          "params": [
            {
              "name": "message",
              "types": [
                "LocalisedString"
              ],
              "desc": ""
            },
            {
              "name": "print_settings",
              "types": [
                "Color",
                "PrintSettings?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "create_random_generator",
          "desc": "Creates a deterministic standalone random generator with the given seed or if a seed is not provided the initial map seed is used.",
          "params": [
            {
              "name": "seed",
              "types": [
                "uint?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "check_prototype_translations",
          "desc": "Goes over all items, entities, tiles, recipes, technologies among other things and logs if the locale is incorrect.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "play_sound",
          "desc": "Play a sound for every player in the game.",
          "params": [
            {
              "name": "path",
              "types": [
                "SoundPath"
              ],
              "desc": "The sound to play."
            },
            {
              "name": "position",
              "types": [
                "MapPosition?"
              ],
              "desc": "Where the sound should be played. If not given, it's played at the current position of each player."
            },
            {
              "name": "volume_modifier",
              "types": [
                "double?"
              ],
              "desc": "The volume of the sound to play. Must be between 0 and 1 inclusive."
            },
            {
              "name": "override_sound_type",
              "types": [
                "SoundType?"
              ],
              "desc": "The volume mixer to play the sound through. Defaults to the default mixer for the given sound type."
            }
          ],
          "takes_table": true
        },
        {
          "name": "is_valid_sound_path",
          "desc": "Checks if the given SoundPath is valid.",
          "params": [
            {
              "name": "sound_path",
              "types": [
                "SoundPath"
              ],
              "desc": "Path to the sound."
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_valid_sprite_path",
          "desc": "Checks if the given SpritePath is valid and contains a loaded sprite. The existence of the image is not checked for paths of type file.",
          "params": [
            {
              "name": "sprite_path",
              "types": [
                "SpritePath"
              ],
              "desc": "Path to the image."
            }
          ],
          "takes_table": false
        },
        {
          "name": "kick_player",
          "desc": "Kicks the given player from this multiplayer game. Does nothing if this is a single player game or if the player running this isn't an admin.",
          "params": [
            {
              "name": "player",
              "types": [
                "PlayerIdentification"
              ],
              "desc": "The player to kick."
            },
            {
              "name": "reason",
              "types": [
                "string?"
              ],
              "desc": "The reason given if any."
            }
          ],
          "takes_table": false
        },
        {
          "name": "ban_player",
          "desc": "Bans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admin.",
          "params": [
            {
              "name": "player",
              "types": [
                "PlayerIdentification"
              ],
              "desc": "The player to ban."
            },
            {
              "name": "reason",
              "types": [
                "string?"
              ],
              "desc": "The reason given if any."
            }
          ],
          "takes_table": false
        },
        {
          "name": "unban_player",
          "desc": "Unbans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admin.",
          "params": [
            {
              "name": "player",
              "types": [
                "PlayerIdentification"
              ],
              "desc": "The player to unban."
            }
          ],
          "takes_table": false
        },
        {
          "name": "purge_player",
          "desc": "Purges the given players messages from the game. Does nothing if the player running this isn't an admin.",
          "params": [
            {
              "name": "player",
              "types": [
                "PlayerIdentification"
              ],
              "desc": "The player to purge."
            }
          ],
          "takes_table": false
        },
        {
          "name": "mute_player",
          "desc": "Mutes the given player. Does nothing if the player running this isn't an admin.",
          "params": [
            {
              "name": "player",
              "types": [
                "PlayerIdentification"
              ],
              "desc": "The player to mute."
            }
          ],
          "takes_table": false
        },
        {
          "name": "unmute_player",
          "desc": "Unmutes the given player. Does nothing if the player running this isn't an admin.",
          "params": [
            {
              "name": "player",
              "types": [
                "PlayerIdentification"
              ],
              "desc": "The player to unmute."
            }
          ],
          "takes_table": false
        },
        {
          "name": "count_pipe_groups",
          "desc": "Counts how many distinct groups of pipes exist in the world.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_multiplayer",
          "desc": "Whether the save is loaded as a multiplayer map.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_active_entities_count",
          "desc": "Gets the number of entities that are active (updated each tick).",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": "If given, only the entities active on this surface are counted."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_map_exchange_string",
          "desc": "Gets the map exchange string for the map generation settings that were used to create this map.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "parse_map_exchange_string",
          "desc": "Convert a map exchange string to map gen settings and map settings.",
          "params": [
            {
              "name": "map_exchange_string",
              "types": [
                "string"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_train_stops",
          "desc": "Gets train stops matching the given filters.",
          "params": [
            {
              "name": "name",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": "The name(s) of the train stops. Not providing names will match any stop."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": "The surface to search. Not providing a surface will match stops on any surface."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "The force to search. Not providing a force will match stops in any force."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_player",
          "desc": "Gets the given player or returns nil if no player is found.",
          "params": [
            {
              "name": "player",
              "types": [
                "uint",
                "string"
              ],
              "desc": "The player index or name."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_surface",
          "desc": "Gets the given surface or returns nil if no surface is found.",
          "params": [
            {
              "name": "surface",
              "types": [
                "uint",
                "string"
              ],
              "desc": "The surface index or name."
            }
          ],
          "takes_table": false
        },
        {
          "name": "create_profiler",
          "desc": "Creates a LuaProfiler, which is used for measuring script performance.",
          "params": [
            {
              "name": "stopped",
              "types": [
                "boolean?"
              ],
              "desc": "Create the timer stopped"
            }
          ],
          "takes_table": false
        },
        {
          "name": "evaluate_expression",
          "desc": "Evaluate an expression, substituting variables as provided. For details on the formula, see TechnologyPrototype::unit.",
          "params": [
            {
              "name": "expression",
              "types": [
                "string"
              ],
              "desc": "The expression to evaluate."
            },
            {
              "name": "variables",
              "types": [
                "dictionary[string\u00a0\u2192 double]?"
              ],
              "desc": "Variables to be substituted."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_filtered_entity_prototypes",
          "desc": "Returns a dictionary of all LuaEntityPrototypes that fit the given filters. The prototypes are indexed by name.",
          "params": [
            {
              "name": "filters",
              "types": [
                "array[EntityPrototypeFilter]"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_filtered_item_prototypes",
          "desc": "Returns a dictionary of all LuaItemPrototypes that fit the given filters. The prototypes are indexed by name.",
          "params": [
            {
              "name": "filters",
              "types": [
                "array[ItemPrototypeFilter]"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_filtered_equipment_prototypes",
          "desc": "Returns a dictionary of all LuaEquipmentPrototypes that fit the given filters. The prototypes are indexed by name.",
          "params": [
            {
              "name": "filters",
              "types": [
                "array[EquipmentPrototypeFilter]"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_filtered_mod_setting_prototypes",
          "desc": "Returns a dictionary of all LuaModSettingPrototypes that fit the given filters. The prototypes are indexed by name.",
          "params": [
            {
              "name": "filters",
              "types": [
                "array[ModSettingPrototypeFilter]"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_filtered_achievement_prototypes",
          "desc": "Returns a dictionary of all LuaAchievementPrototypes that fit the given filters. The prototypes are indexed by name.",
          "params": [
            {
              "name": "filters",
              "types": [
                "array[AchievementPrototypeFilter]"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_filtered_tile_prototypes",
          "desc": "Returns a dictionary of all LuaTilePrototypes that fit the given filters. The prototypes are indexed by name.",
          "params": [
            {
              "name": "filters",
              "types": [
                "array[TilePrototypeFilter]"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_filtered_decorative_prototypes",
          "desc": "Returns a dictionary of all LuaDecorativePrototypes that fit the given filters. The prototypes are indexed by name.",
          "params": [
            {
              "name": "filters",
              "types": [
                "array[DecorativePrototypeFilter]"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_filtered_fluid_prototypes",
          "desc": "Returns a dictionary of all LuaFluidPrototypes that fit the given filters. The prototypes are indexed by name.",
          "params": [
            {
              "name": "filters",
              "types": [
                "array[FluidPrototypeFilter]"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_filtered_recipe_prototypes",
          "desc": "Returns a dictionary of all LuaRecipePrototypes that fit the given filters. The prototypes are indexed by name.",
          "params": [
            {
              "name": "filters",
              "types": [
                "array[RecipePrototypeFilter]"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_filtered_technology_prototypes",
          "desc": "Returns a dictionary of all LuaTechnologyPrototypes that fit the given filters. The prototypes are indexed by name.",
          "params": [
            {
              "name": "filters",
              "types": [
                "array[TechnologyPrototypeFilter]"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "create_inventory",
          "desc": "Creates an inventory that is not owned by any game object. It can be resized later with LuaInventory::resize.",
          "params": [
            {
              "name": "size",
              "types": [
                "uint16"
              ],
              "desc": "The number of slots the inventory initially has."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_script_inventories",
          "desc": "Gets the inventories created through LuaGameScript::create_inventory",
          "params": [
            {
              "name": "mod",
              "types": [
                "string?"
              ],
              "desc": "The mod who's inventories to get. If not provided all inventories are returned."
            }
          ],
          "takes_table": false
        },
        {
          "name": "reset_time_played",
          "desc": "Resets the amount of time played for this map.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "encode_string",
          "desc": "Deflates and base64 encodes the given string.",
          "params": [
            {
              "name": "string",
              "types": [
                "string"
              ],
              "desc": "The string to encode."
            }
          ],
          "takes_table": false
        },
        {
          "name": "decode_string",
          "desc": "Base64 decodes and inflates the given string.",
          "params": [
            {
              "name": "string",
              "types": [
                "string"
              ],
              "desc": "The string to decode."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_train_by_id",
          "desc": "Searches for a train with given ID.",
          "params": [
            {
              "name": "train_id",
              "types": [
                "uint"
              ],
              "desc": "Train ID to search"
            }
          ],
          "takes_table": false
        },
        {
          "name": "request_train_path",
          "desc": "Direct access to Trains Pathfinder. Allows to search rail paths or querying which stops are accessible",
          "params": [
            {
              "name": "goals",
              "types": [
                "array[TrainStopGoal",
                "RailEnd]"
              ],
              "desc": ""
            },
            {
              "name": "in_chain_signal_section",
              "types": [
                "boolean?"
              ],
              "desc": "Defaults to false. If set to true, pathfinder will not return a path that cannot have its beginning immediately reserved. A path that cannot have its beginning immediately reserved could cause a train to stop inside of an intersection."
            },
            {
              "name": "train",
              "types": [
                "LuaTrain?"
              ],
              "desc": "Mandatory if from_front and from_back are not provided, optional otherwise. Selects a context for the pathfinder to decide which train to exclude from penalties and which signals are considered possible to reacquire. If from_front and from_back are not provided, then it is also used to collect front and back ends for the search"
            },
            {
              "name": "type",
              "types": [
                "TrainPathRequestType?"
              ],
              "desc": "Request type. Determines the return type of the method. Defaults to \"path\"."
            },
            {
              "name": "return_path",
              "types": [
                "boolean?"
              ],
              "desc": "Only relevant if request type is \"path\". Returning a full path is expensive due to multiple LuaEntity created. In order for path to be returned, true must be provided here. Defaults to false in which case a path will not be provided."
            },
            {
              "name": "from_front",
              "types": [
                "RailEnd?"
              ],
              "desc": "Manually provided starting front of the train."
            },
            {
              "name": "allow_path_within_segment_front",
              "types": [
                "boolean?"
              ],
              "desc": "Only relevant if from_front is given. Defaults to true. Providing false will cause the pathfinder to reject a path that starts on front and ends within the same segment as the path would be too short to provide correct alignment with a goal."
            },
            {
              "name": "from_back",
              "types": [
                "RailEnd?"
              ],
              "desc": "Manually provided starting back of the train."
            },
            {
              "name": "allow_path_within_segment_back",
              "types": [
                "boolean?"
              ],
              "desc": "Only relevant if from_back is given. Defaults to true. Providing false will cause the pathfinder to reject a path that starts on back and ends within the same segment as the path would be too short to provide correct alignment with a goal."
            },
            {
              "name": "search_direction",
              "types": [
                "\"respect-movement-direction\"",
                "\"any-direction-with-locomotives\"?"
              ],
              "desc": "Only relevant if none of from_front/from_back was provided in which case from_front and from_back are deduced from the train. Selects which train ends should be considered as starts. Defaults to \"any-direction-with-locomotives\"."
            },
            {
              "name": "steps_limit",
              "types": [
                "uint?"
              ],
              "desc": "Maximum amount of steps pathfinder is allowed to perform."
            }
          ],
          "takes_table": true
        }
      ],
      "attributes": [
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "This object's name."
        },
        {
          "name": "player",
          "_type": "LuaPlayer|nil",
          "permissions": "Read",
          "description": "This property is only populated inside custom command handlers and when writing Lua console commands. Returns the player that is typing the command, nil in all other instances."
        },
        {
          "name": "players",
          "_type": "LuaCustomTable[uint|string \u2192 LuaPlayer]",
          "permissions": "Read",
          "description": "Get a table of all the players that currently exist. This sparse table allows you to find players by indexing it with either their name or index. Iterating this table with pairs() will only iterate the array part of the table. Iterating with ipairs() will not work at all."
        },
        {
          "name": "map_settings",
          "_type": "MapSettings",
          "permissions": "Read",
          "description": "The currently active set of map settings. Even though this property is marked as read-only, the members of the dictionary that is returned can be modified mid-game."
        },
        {
          "name": "difficulty_settings",
          "_type": "DifficultySettings",
          "permissions": "Read",
          "description": "The currently active set of difficulty settings. Even though this property is marked as read-only, the members of the dictionary that is returned can be modified mid-game. This is however not recommended as different difficulties can have differing technology and recipe trees, which can cause problems for players."
        },
        {
          "name": "difficulty",
          "_type": "defines.difficulty",
          "permissions": "Read",
          "description": "Current scenario difficulty."
        },
        {
          "name": "forces",
          "_type": "LuaCustomTable[uint|string \u2192 LuaForce]",
          "permissions": "Read",
          "description": "Get a table of all the forces that currently exist. This sparse table allows you to find forces by indexing it with either their name or index. Iterating this table with pairs() will only iterate the hash part of the table. Iterating with ipairs() will not work at all."
        },
        {
          "name": "entity_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaEntityPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaEntityPrototype indexed by name."
        },
        {
          "name": "item_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaItemPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaItemPrototype indexed by name."
        },
        {
          "name": "fluid_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaFluidPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaFluidPrototype indexed by name."
        },
        {
          "name": "tile_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaTilePrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaTilePrototype indexed by name."
        },
        {
          "name": "equipment_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaEquipmentPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaEquipmentPrototype indexed by name."
        },
        {
          "name": "damage_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaDamagePrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaDamagePrototype indexed by name."
        },
        {
          "name": "virtual_signal_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaVirtualSignalPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaVirtualSignalPrototype indexed by name."
        },
        {
          "name": "equipment_grid_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaEquipmentGridPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaEquipmentGridPrototype indexed by name."
        },
        {
          "name": "recipe_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaRecipePrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaRecipePrototype indexed by name."
        },
        {
          "name": "technology_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaTechnologyPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaTechnologyPrototype indexed by name."
        },
        {
          "name": "decorative_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaDecorativePrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaDecorativePrototype indexed by name."
        },
        {
          "name": "particle_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaParticlePrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaParticlePrototype indexed by name."
        },
        {
          "name": "autoplace_control_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaAutoplaceControlPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaAutoplaceControlPrototype indexed by name."
        },
        {
          "name": "noise_layer_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaNoiseLayerPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaNoiseLayerPrototype indexed by name."
        },
        {
          "name": "mod_setting_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaModSettingPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaModSettingPrototype indexed by name."
        },
        {
          "name": "custom_input_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaCustomInputPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaCustomInputPrototype indexed by name."
        },
        {
          "name": "ammo_category_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaAmmoCategoryPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaAmmoCategoryPrototype indexed by name."
        },
        {
          "name": "named_noise_expressions",
          "_type": "LuaCustomTable[string \u2192 LuaNamedNoiseExpression]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaNamedNoiseExpression indexed by name."
        },
        {
          "name": "item_subgroup_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaGroup]",
          "permissions": "Read",
          "description": "A dictionary containing every ItemSubgroup indexed by name."
        },
        {
          "name": "item_group_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaGroup]",
          "permissions": "Read",
          "description": "A dictionary containing every ItemGroup indexed by name."
        },
        {
          "name": "fuel_category_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaFuelCategoryPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaFuelCategoryPrototype indexed by name."
        },
        {
          "name": "resource_category_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaResourceCategoryPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaResourceCategoryPrototype indexed by name."
        },
        {
          "name": "achievement_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaAchievementPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaAchievementPrototype indexed by name."
        },
        {
          "name": "module_category_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaModuleCategoryPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaModuleCategoryPrototype indexed by name."
        },
        {
          "name": "equipment_category_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaEquipmentCategoryPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaEquipmentCategoryPrototype indexed by name."
        },
        {
          "name": "trivial_smoke_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaTrivialSmokePrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaTrivialSmokePrototype indexed by name."
        },
        {
          "name": "shortcut_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaShortcutPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaShortcutPrototype indexed by name."
        },
        {
          "name": "recipe_category_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaRecipeCategoryPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaRecipeCategoryPrototype indexed by name."
        },
        {
          "name": "font_prototypes",
          "_type": "LuaCustomTable[string \u2192 LuaFontPrototype]",
          "permissions": "Read",
          "description": "A dictionary containing every LuaFontPrototype indexed by name."
        },
        {
          "name": "map_gen_presets",
          "_type": "LuaCustomTable[string \u2192 MapGenPreset]",
          "permissions": "Read",
          "description": "A dictionary containing every MapGenPreset indexed by name."
        },
        {
          "name": "console_command_used",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether a console command has been used."
        },
        {
          "name": "styles",
          "_type": "LuaCustomTable[string \u2192 string]",
          "permissions": "Read",
          "description": "The styles that LuaGuiElement can use, indexed by name."
        },
        {
          "name": "tick",
          "_type": "uint",
          "permissions": "Read",
          "description": "Current map tick."
        },
        {
          "name": "ticks_played",
          "_type": "uint",
          "permissions": "Read",
          "description": "The number of ticks since this game was created using either \"new game\" or \"new game from scenario\". Notably, this number progresses even when the game is tick_paused."
        },
        {
          "name": "tick_paused",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If the tick has been paused. This means that entity update has been paused."
        },
        {
          "name": "ticks_to_run",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The number of ticks to be run while the tick is paused. When LuaGameScript::tick_paused is true, ticks_to_run behaves the following way: While this is > 0, the entity update is running normally and this value is decremented every tick. When this reaches 0, the game will pause again."
        },
        {
          "name": "finished",
          "_type": "boolean",
          "permissions": "Read",
          "description": "True while the victory screen is shown."
        },
        {
          "name": "finished_but_continuing",
          "_type": "boolean",
          "permissions": "Read",
          "description": "True after players finished the game and clicked \"continue\"."
        },
        {
          "name": "speed",
          "_type": "float",
          "permissions": "Read/Write",
          "description": "Speed to update the map at. 1.0 is normal speed -- 60 UPS."
        },
        {
          "name": "surfaces",
          "_type": "LuaCustomTable[uint|string \u2192 LuaSurface]",
          "permissions": "Read",
          "description": "Get a table of all the surfaces that currently exist. This sparse table allows you to find surfaces by indexing it with either their name or index. Iterating this table with pairs() will only iterate the hash part of the table. Iterating with ipairs() will not work at all."
        },
        {
          "name": "active_mods",
          "_type": "dictionary[string \u2192 string]",
          "permissions": "Read",
          "description": "The active mods versions. The keys are mod names, the values are the versions."
        },
        {
          "name": "connected_players",
          "_type": "array[LuaPlayer]",
          "permissions": "Read",
          "description": "The players that are currently online."
        },
        {
          "name": "permissions",
          "_type": "LuaPermissionGroups",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "backer_names",
          "_type": "LuaCustomTable[uint \u2192 string]",
          "permissions": "Read",
          "description": "Array of the names of all the backers that supported the game development early on. These are used as names for labs, locomotives, radars, roboports, and train stops."
        },
        {
          "name": "default_map_gen_settings",
          "_type": "MapGenSettings",
          "permissions": "Read",
          "description": "The default map gen settings for this save."
        },
        {
          "name": "enemy_has_vision_on_land_mines",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Determines if enemy land mines are completely invisible or not."
        },
        {
          "name": "autosave_enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "True by default. Can be used to disable autosaving. Make sure to turn it back on soon after."
        },
        {
          "name": "draw_resource_selection",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "True by default. Can be used to disable the highlighting of resource patches when they are hovered on the map."
        },
        {
          "name": "pollution_statistics",
          "_type": "LuaFlowStatistics",
          "permissions": "Read",
          "description": "The pollution statistics for this map."
        },
        {
          "name": "max_force_distraction_distance",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "max_force_distraction_chunk_distance",
          "_type": "uint",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "max_electric_pole_supply_area_distance",
          "_type": "float",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "max_electric_pole_connection_distance",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "max_beacon_supply_area_distance",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "max_gate_activation_distance",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "max_inserter_reach_distance",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "max_pipe_to_ground_distance",
          "_type": "uint8",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "max_underground_belt_distance",
          "_type": "uint8",
          "permissions": "Read",
          "description": ""
        }
      ]
    },
    {
      "name": "LuaGenericOnOffControlBehavior",
      "extends": "",
      "desc": "An abstract base class for behaviors that support switching the entity on or off based on some condition.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "disabled",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If the entity is currently disabled because of the control behavior."
        },
        {
          "name": "circuit_condition",
          "_type": "CircuitConditionDefinition",
          "permissions": "Read/Write",
          "description": "The circuit condition. Writing nil clears the circuit condition."
        },
        {
          "name": "logistic_condition",
          "_type": "CircuitConditionDefinition",
          "permissions": "Read/Write",
          "description": "The logistic condition. Writing nil clears the logistic condition."
        },
        {
          "name": "connect_to_logistic_network",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if this should connect to the logistic network."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaGroup",
      "extends": "",
      "desc": "Item group or subgroup.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": "Localised name of the group."
        },
        {
          "name": "type",
          "_type": "string",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "group",
          "_type": "LuaGroup",
          "permissions": "Read",
          "description": "The parent group."
        },
        {
          "name": "subgroups",
          "_type": "array[LuaGroup]",
          "permissions": "Read",
          "description": "Subgroups of this group."
        },
        {
          "name": "order_in_recipe",
          "_type": "string",
          "permissions": "Read",
          "description": "The additional order value used in recipe ordering."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaGui",
      "extends": "",
      "desc": "The root of the GUI. This type houses the root elements, top, left, center, goal, and screen, to which other elements can be added to be displayed on screen.",
      "methods": [
        {
          "name": "is_valid_sprite_path",
          "desc": "Returns true if sprite_path is valid and contains loaded sprite, otherwise false. Sprite path of type file doesn't validate if file exists.",
          "params": [
            {
              "name": "sprite_path",
              "types": [
                "SpritePath"
              ],
              "desc": "Path to a image."
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "player",
          "_type": "LuaPlayer",
          "permissions": "Read",
          "description": "The player who owns this gui."
        },
        {
          "name": "children",
          "_type": "dictionary[string \u2192 LuaGuiElement]",
          "permissions": "Read",
          "description": "The children GUI elements mapped by name <> element."
        },
        {
          "name": "top",
          "_type": "LuaGuiElement",
          "permissions": "Read",
          "description": "The top part of the GUI. It is a flow element inside a scroll pane element."
        },
        {
          "name": "left",
          "_type": "LuaGuiElement",
          "permissions": "Read",
          "description": "The left part of the GUI. It is a flow element inside a scroll pane element."
        },
        {
          "name": "center",
          "_type": "LuaGuiElement",
          "permissions": "Read",
          "description": "The center part of the GUI. It is a flow element."
        },
        {
          "name": "goal",
          "_type": "LuaGuiElement",
          "permissions": "Read",
          "description": "The flow used in the objectives window. It is a flow element. The objectives window is only visible when the flow is not empty or the objective text is set."
        },
        {
          "name": "screen",
          "_type": "LuaGuiElement",
          "permissions": "Read",
          "description": "For showing a GUI somewhere on the entire screen. It is an empty-widget element."
        },
        {
          "name": "relative",
          "_type": "LuaGuiElement",
          "permissions": "Read",
          "description": "For showing a GUI somewhere relative to one of the game GUIs. It is an empty-widget element."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaGuiElement",
      "extends": "",
      "desc": "An element of a custom GUI. This type is used to represent any kind of a GUI element - labels, buttons and frames are all instances of this type. Just like LuaEntity, different kinds of elements support different attributes; attempting to access an attribute on an element that doesn't support it (for instance, trying to access the column_count of a textfield) will result in a runtime error.",
      "methods": [
        {
          "name": "add",
          "desc": "Add a new child element to this GuiElement.",
          "params": [
            {
              "name": "type",
              "types": [
                "GuiElementType"
              ],
              "desc": "The kind of element to add, which potentially has its own attributes as listed below."
            },
            {
              "name": "name",
              "types": [
                "string?"
              ],
              "desc": "Name of the child element. It must be unique within the parent element."
            },
            {
              "name": "caption",
              "types": [
                "LocalisedString?"
              ],
              "desc": "Text displayed on the child element. For frames, this is their title. For other elements, like buttons or labels, this is the content. Whilst this attribute may be used on all elements, it doesn't make sense for tables and flows as they won't display it."
            },
            {
              "name": "tooltip",
              "types": [
                "LocalisedString?"
              ],
              "desc": "Tooltip of the child element."
            },
            {
              "name": "elem_tooltip",
              "types": [
                "ElemID?"
              ],
              "desc": "Elem tooltip of the child element. Will be displayed above tooltip."
            },
            {
              "name": "enabled",
              "types": [
                "boolean?"
              ],
              "desc": "Whether the child element is enabled. Defaults to true."
            },
            {
              "name": "visible",
              "types": [
                "boolean?"
              ],
              "desc": "Whether the child element is visible. Defaults to true."
            },
            {
              "name": "ignored_by_interaction",
              "types": [
                "boolean?"
              ],
              "desc": "Whether the child element is ignored by interaction. Defaults to false."
            },
            {
              "name": "style",
              "types": [
                "string?"
              ],
              "desc": "The name of the style prototype to apply to the new element."
            },
            {
              "name": "tags",
              "types": [
                "Tags?"
              ],
              "desc": "Tags associated with the child element."
            },
            {
              "name": "index",
              "types": [
                "uint?"
              ],
              "desc": "Location in its parent that the child element should slot into. By default, the child will be appended onto the end."
            },
            {
              "name": "anchor",
              "types": [
                "GuiAnchor?"
              ],
              "desc": "Where to position the child element when in the relative element."
            },
            {
              "name": "game_controller_interaction",
              "types": [
                "defines.game_controller_interaction?"
              ],
              "desc": "How the element should interact with game controllers. Defaults to defines.game_controller_interaction.normal."
            },
            {
              "name": "raise_hover_events",
              "types": [
                "boolean?"
              ],
              "desc": "Whether this element will raise on_gui_hover and on_gui_leave. Defaults to false."
            }
          ],
          "takes_table": true
        },
        {
          "name": "clear",
          "desc": "Remove children of this element. Any LuaGuiElement objects referring to the destroyed elements become invalid after this operation.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "destroy",
          "desc": "Remove this element, along with its children. Any LuaGuiElement objects referring to the destroyed elements become invalid after this operation.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_mod",
          "desc": "The mod that owns this Gui element or nil if it's owned by the scenario script.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_index_in_parent",
          "desc": "Gets the index that this element has in its parent element.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "swap_children",
          "desc": "Swaps the children at the given indices in this element.",
          "params": [
            {
              "name": "index_1",
              "types": [
                "uint"
              ],
              "desc": "The index of the first child."
            },
            {
              "name": "index_2",
              "types": [
                "uint"
              ],
              "desc": "The index of the second child."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_items",
          "desc": "Removes the items in this dropdown or listbox.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_item",
          "desc": "Gets the item at the given index from this dropdown or listbox.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The index to get"
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_item",
          "desc": "Sets the given string at the given index in this dropdown or listbox.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The index whose text to replace."
            },
            {
              "name": "string",
              "types": [
                "LocalisedString"
              ],
              "desc": "The text to set at the given index."
            }
          ],
          "takes_table": false
        },
        {
          "name": "add_item",
          "desc": "Inserts a string at the end or at the given index of this dropdown or listbox.",
          "params": [
            {
              "name": "string",
              "types": [
                "LocalisedString"
              ],
              "desc": "The text to insert."
            },
            {
              "name": "index",
              "types": [
                "uint?"
              ],
              "desc": "The index at which to insert the item."
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove_item",
          "desc": "Removes the item at the given index from this dropdown or listbox.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The index"
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_slider_minimum",
          "desc": "Gets this sliders minimum value.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_slider_maximum",
          "desc": "Gets this sliders maximum value.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_slider_minimum_maximum",
          "desc": "Sets this sliders minimum and maximum values.",
          "params": [
            {
              "name": "minimum",
              "types": [
                "double"
              ],
              "desc": ""
            },
            {
              "name": "maximum",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_slider_value_step",
          "desc": "Gets the minimum distance this slider can move.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_slider_discrete_slider",
          "desc": "Returns whether this slider only allows being moved to discrete positions.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_slider_discrete_values",
          "desc": "Returns whether this slider only allows discrete values.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_slider_value_step",
          "desc": "Sets the minimum distance this slider can move.",
          "params": [
            {
              "name": "value",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_slider_discrete_slider",
          "desc": "Sets whether this slider only allows being moved to discrete positions.",
          "params": [
            {
              "name": "value",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_slider_discrete_values",
          "desc": "Sets whether this slider only allows discrete values.",
          "params": [
            {
              "name": "value",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "focus",
          "desc": "Focuses this GUI element if possible.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "scroll_to_top",
          "desc": "Scrolls this scroll bar to the top.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "scroll_to_bottom",
          "desc": "Scrolls this scroll bar to the bottom.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "scroll_to_left",
          "desc": "Scrolls this scroll bar to the left.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "scroll_to_right",
          "desc": "Scrolls this scroll bar to the right.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "scroll_to_element",
          "desc": "Scrolls this scroll bar such that the specified GUI element is visible to the player.",
          "params": [
            {
              "name": "element",
              "types": [
                "LuaGuiElement"
              ],
              "desc": "The element to scroll to."
            },
            {
              "name": "scroll_mode",
              "types": [
                "\"in-view\"",
                "\"top-third\"?"
              ],
              "desc": "Where the element should be positioned in the scroll-pane. Defaults to \"in-view\"."
            }
          ],
          "takes_table": false
        },
        {
          "name": "select_all",
          "desc": "Selects all the text in this textbox.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "select",
          "desc": "Selects a range of text in this textbox.",
          "params": [
            {
              "name": "start_index",
              "types": [
                "int"
              ],
              "desc": "The index of the first character to select"
            },
            {
              "name": "end_index",
              "types": [
                "int"
              ],
              "desc": "The index of the last character to select"
            }
          ],
          "takes_table": false
        },
        {
          "name": "add_tab",
          "desc": "Adds the given tab and content widgets to this tabbed pane as a new tab.",
          "params": [
            {
              "name": "tab",
              "types": [
                "LuaGuiElement"
              ],
              "desc": "The tab to add, must be a GUI element of type \"tab\"."
            },
            {
              "name": "content",
              "types": [
                "LuaGuiElement"
              ],
              "desc": "The content to show when this tab is selected. Can be any type of GUI element."
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove_tab",
          "desc": "Removes the given tab and its associated content from this tabbed pane.",
          "params": [
            {
              "name": "tab",
              "types": [
                "LuaGuiElement"
              ],
              "desc": "The tab to remove. If not given, it removes all tabs."
            }
          ],
          "takes_table": false
        },
        {
          "name": "force_auto_center",
          "desc": "Forces this frame to re-auto-center. Only works on frames stored directly in LuaGui::screen.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "scroll_to_item",
          "desc": "Scrolls the scroll bar such that the specified listbox item is visible to the player.",
          "params": [
            {
              "name": "index",
              "types": [
                "int"
              ],
              "desc": "The item index to scroll to."
            },
            {
              "name": "scroll_mode",
              "types": [
                "\"in-view\"",
                "\"top-third\"?"
              ],
              "desc": "Where the item should be positioned in the list-box. Defaults to \"in-view\"."
            }
          ],
          "takes_table": false
        },
        {
          "name": "bring_to_front",
          "desc": "Moves this GUI element to the \"front\" so it will draw over other elements.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "close_dropdown",
          "desc": "Closes the dropdown list if this is a dropdown and it is open.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "index",
          "_type": "uint",
          "permissions": "Read",
          "description": "The index of this GUI element (unique amongst the GUI elements of a LuaPlayer)."
        },
        {
          "name": "gui",
          "_type": "LuaGui",
          "permissions": "Read",
          "description": "The GUI this element is a child of."
        },
        {
          "name": "parent",
          "_type": "LuaGuiElement|nil",
          "permissions": "Read",
          "description": "The direct parent of this element. nil if this is a top-level element."
        },
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read/Write",
          "description": "The name of this element. \"\" if no name was set."
        },
        {
          "name": "caption",
          "_type": "LocalisedString",
          "permissions": "Read/Write",
          "description": "The text displayed on this element. For frames, this is the \"heading\". For other elements, like buttons or labels, this is the content."
        },
        {
          "name": "value",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "How much this progress bar is filled. It is a value in the range [0, 1]."
        },
        {
          "name": "direction",
          "_type": "GuiDirection",
          "permissions": "Read",
          "description": "Direction of this element's layout."
        },
        {
          "name": "style",
          "_type": "LuaStyle|string",
          "permissions": "Read/Write",
          "description": "The style of this element. When read, this evaluates to a LuaStyle. For writing, it only accepts a string that specifies the textual identifier (prototype name) of the desired style."
        },
        {
          "name": "visible",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Sets whether this GUI element is visible or completely hidden, taking no space in the layout."
        },
        {
          "name": "text",
          "_type": "string",
          "permissions": "Read/Write",
          "description": "The text contained in this textfield or text-box."
        },
        {
          "name": "children_names",
          "_type": "array[string]",
          "permissions": "Read",
          "description": "Names of all the children of this element. These are the identifiers that can be used to access the child as an attribute of this element."
        },
        {
          "name": "state",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Is this checkbox or radiobutton checked?"
        },
        {
          "name": "player_index",
          "_type": "uint",
          "permissions": "Read",
          "description": "Index into LuaGameScript::players specifying the player who owns this element."
        },
        {
          "name": "sprite",
          "_type": "SpritePath",
          "permissions": "Read/Write",
          "description": "The sprite to display on this sprite-button or sprite in the default state."
        },
        {
          "name": "resize_to_sprite",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether the sprite widget should resize according to the sprite in it. Defaults to true."
        },
        {
          "name": "hovered_sprite",
          "_type": "SpritePath",
          "permissions": "Read/Write",
          "description": "The sprite to display on this sprite-button when it is hovered."
        },
        {
          "name": "clicked_sprite",
          "_type": "SpritePath",
          "permissions": "Read/Write",
          "description": "The sprite to display on this sprite-button when it is clicked."
        },
        {
          "name": "tooltip",
          "_type": "LocalisedString",
          "permissions": "Read/Write",
          "description": "The text to display when hovering over this element. Writing \"\" will disable the tooltip, while writing nil will set it to \"nil\"."
        },
        {
          "name": "elem_tooltip",
          "_type": "ElemID|nil",
          "permissions": "Read/Write",
          "description": "The element tooltip to display when hovering over this element, or nil."
        },
        {
          "name": "horizontal_scroll_policy",
          "_type": "ScrollPolicy",
          "permissions": "Read/Write",
          "description": "Policy of the horizontal scroll bar."
        },
        {
          "name": "vertical_scroll_policy",
          "_type": "ScrollPolicy",
          "permissions": "Read/Write",
          "description": "Policy of the vertical scroll bar."
        },
        {
          "name": "type",
          "_type": "string",
          "permissions": "Read",
          "description": "The type of this GUI element."
        },
        {
          "name": "children",
          "_type": "array[LuaGuiElement]",
          "permissions": "Read",
          "description": "The child-elements of this GUI element."
        },
        {
          "name": "items",
          "_type": "array[LocalisedString]",
          "permissions": "Read/Write",
          "description": "The items in this dropdown or listbox."
        },
        {
          "name": "selected_index",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The selected index for this dropdown or listbox. Returns 0 if none is selected."
        },
        {
          "name": "number",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The number to be shown in the bottom right corner of this sprite-button. Set this to nil to show nothing."
        },
        {
          "name": "show_percent_for_small_numbers",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Related to the number to be shown in the bottom right corner of this sprite-button. When set to true, numbers that are non-zero and smaller than one are shown as a percentage rather than the value. For example, 0.5 will be shown as 50% instead."
        },
        {
          "name": "location",
          "_type": "GuiLocation|nil",
          "permissions": "Read/Write",
          "description": "The location of this widget when stored in LuaGui::screen. nil if not set or not in LuaGui::screen."
        },
        {
          "name": "auto_center",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this frame auto-centers on window resize when stored in LuaGui::screen."
        },
        {
          "name": "badge_text",
          "_type": "LocalisedString",
          "permissions": "Read/Write",
          "description": "The text to display after the normal tab text (designed to work with numbers)"
        },
        {
          "name": "auto_toggle",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this button will automatically toggle when clicked."
        },
        {
          "name": "toggled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this button is currently toggled. When a button is toggled, it will use the selected_graphical_set and selected_font_color defined in its style."
        },
        {
          "name": "game_controller_interaction",
          "_type": "defines.game_controller_interaction",
          "permissions": "Read/Write",
          "description": "How this element should interact with game controllers."
        },
        {
          "name": "position",
          "_type": "MapPosition",
          "permissions": "Read/Write",
          "description": "The position this camera or minimap is focused on, if any."
        },
        {
          "name": "surface_index",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The surface index this camera or minimap is using."
        },
        {
          "name": "zoom",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The zoom this camera or minimap is using. This value must be positive."
        },
        {
          "name": "minimap_player_index",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The player index this minimap is using."
        },
        {
          "name": "force",
          "_type": "string|nil",
          "permissions": "Read/Write",
          "description": "The force this minimap is using, if any."
        },
        {
          "name": "elem_type",
          "_type": "ElemType",
          "permissions": "Read",
          "description": "The elem type of this choose-elem-button."
        },
        {
          "name": "elem_value",
          "_type": "string|SignalID|nil",
          "permissions": "Read/Write",
          "description": "The elem value of this choose-elem-button, if any."
        },
        {
          "name": "elem_filters",
          "_type": "PrototypeFilter|nil",
          "permissions": "Read/Write",
          "description": "The elem filters of this choose-elem-button, if any. The compatible type of filter is determined by elem_type."
        },
        {
          "name": "selectable",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether the contents of this text-box are selectable. Defaults to true."
        },
        {
          "name": "word_wrap",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this text-box will word-wrap automatically. Defaults to false."
        },
        {
          "name": "read_only",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this text-box is read-only. Defaults to false."
        },
        {
          "name": "enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this GUI element is enabled. Disabled GUI elements don't trigger events when clicked."
        },
        {
          "name": "ignored_by_interaction",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this GUI element is ignored by interaction. This makes clicks on this element 'go through' to the GUI element or even the game surface below it."
        },
        {
          "name": "locked",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this choose-elem-button can be changed by the player."
        },
        {
          "name": "draw_vertical_lines",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this table should draw vertical grid lines."
        },
        {
          "name": "draw_horizontal_lines",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this table should draw horizontal grid lines."
        },
        {
          "name": "draw_horizontal_line_after_headers",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this table should draw a horizontal grid line below the first table row."
        },
        {
          "name": "column_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "The number of columns in this table."
        },
        {
          "name": "vertical_centering",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether the content of this table should be vertically centered. Overrides LuaStyle::column_alignments. Defaults to true."
        },
        {
          "name": "slider_value",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The value of this slider element."
        },
        {
          "name": "mouse_button_filter",
          "_type": "MouseButtonFlags",
          "permissions": "Read/Write",
          "description": "The mouse button filters for this button or sprite-button."
        },
        {
          "name": "numeric",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this textfield is limited to only numberic characters."
        },
        {
          "name": "allow_decimal",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this textfield (when in numeric mode) allows decimal numbers."
        },
        {
          "name": "allow_negative",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this textfield (when in numeric mode) allows negative numbers."
        },
        {
          "name": "is_password",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this textfield displays as a password field, which renders all characters as *."
        },
        {
          "name": "lose_focus_on_confirm",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this textfield loses focus after defines.events.on_gui_confirmed is fired."
        },
        {
          "name": "clear_and_focus_on_right_click",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Makes it so right-clicking on this textfield clears and focuses it."
        },
        {
          "name": "drag_target",
          "_type": "LuaGuiElement|nil",
          "permissions": "Read/Write",
          "description": "The frame that is being moved when dragging this GUI element, if any. This element needs to be a child of the drag_target at some level."
        },
        {
          "name": "selected_tab_index",
          "_type": "uint|nil",
          "permissions": "Read/Write",
          "description": "The selected tab index for this tabbed pane, if any."
        },
        {
          "name": "tabs",
          "_type": "array[TabAndContent]",
          "permissions": "Read",
          "description": "The tabs and contents being shown in this tabbed-pane."
        },
        {
          "name": "entity",
          "_type": "LuaEntity|nil",
          "permissions": "Read/Write",
          "description": "The entity associated with this entity-preview, camera, minimap, if any."
        },
        {
          "name": "anchor",
          "_type": "GuiAnchor|nil",
          "permissions": "Read/Write",
          "description": "The anchor for this relative widget, if any. Setting nil clears the anchor."
        },
        {
          "name": "tags",
          "_type": "Tags",
          "permissions": "Read/Write",
          "description": "The tags associated with this LuaGuiElement."
        },
        {
          "name": "raise_hover_events",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether this element will raise on_gui_hover and on_gui_leave."
        },
        {
          "name": "switch_state",
          "_type": "SwitchState",
          "permissions": "Read/Write",
          "description": "The switch state for this switch."
        },
        {
          "name": "allow_none_state",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether the \"none\" state is allowed for this switch."
        },
        {
          "name": "left_label_caption",
          "_type": "LocalisedString",
          "permissions": "Read/Write",
          "description": "The text shown for the left switch label."
        },
        {
          "name": "left_label_tooltip",
          "_type": "LocalisedString",
          "permissions": "Read/Write",
          "description": "The tooltip shown on the left switch label."
        },
        {
          "name": "right_label_caption",
          "_type": "LocalisedString",
          "permissions": "Read/Write",
          "description": "The text shown for the right switch label."
        },
        {
          "name": "right_label_tooltip",
          "_type": "LocalisedString",
          "permissions": "Read/Write",
          "description": "The tooltip shown on the right switch label."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaHeatBufferPrototype",
      "extends": "",
      "desc": "Prototype of a heat buffer.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "max_temperature",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "default_temperature",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "specific_heat",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "max_transfer",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "min_temperature_gradient",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "min_working_temperature",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "minimum_glow_temperature",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "connections",
          "_type": "array[HeatConnection]",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaHeatEnergySourcePrototype",
      "extends": "",
      "desc": "Prototype of a heat energy source.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "emissions",
          "_type": "double",
          "permissions": "Read",
          "description": "The emissions of this energy source in pollution/Joule. Multiplying it by energy consumption in Watt gives pollution/second."
        },
        {
          "name": "render_no_network_icon",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "render_no_power_icon",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "max_temperature",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "default_temperature",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "specific_heat",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "max_transfer",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "min_temperature_gradient",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "min_working_temperature",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "minimum_glow_temperature",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "connections",
          "_type": "array[HeatConnection]",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "heat_buffer_prototype",
          "_type": "LuaHeatBufferPrototype",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaInserterControlBehavior",
      "extends": "",
      "desc": "Control behavior for inserters.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "circuit_read_hand_contents",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if the contents of the inserter hand should be sent to the circuit network"
        },
        {
          "name": "circuit_mode_of_operation",
          "_type": "defines.control_behavior.inserter.circuit_mode_of_operation",
          "permissions": "Read/Write",
          "description": "The circuit mode of operations for the inserter."
        },
        {
          "name": "circuit_hand_read_mode",
          "_type": "defines.control_behavior.inserter.hand_read_mode",
          "permissions": "Read/Write",
          "description": "The hand read mode for the inserter."
        },
        {
          "name": "circuit_set_stack_size",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If the stack size of the inserter is set through the circuit network or not."
        },
        {
          "name": "circuit_stack_control_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": "The signal used to set the stack size of the inserter."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaInventory",
      "extends": "",
      "desc": "A storage of item stacks.",
      "methods": [
        {
          "name": "clear",
          "desc": "Make this inventory empty.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "can_insert",
          "desc": "Can at least some items be inserted?",
          "params": [
            {
              "name": "items",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "Items that would be inserted."
            }
          ],
          "takes_table": false
        },
        {
          "name": "insert",
          "desc": "Insert items into this inventory.",
          "params": [
            {
              "name": "items",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "Items to insert."
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove",
          "desc": "Remove items from this inventory.",
          "params": [
            {
              "name": "items",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "Items to remove."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_item_count",
          "desc": "Get the number of all or some items in this inventory.",
          "params": [
            {
              "name": "item",
              "types": [
                "string?"
              ],
              "desc": "Prototype name of the item to count. If not specified, count all items."
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_empty",
          "desc": "Does this inventory contain nothing?",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_full",
          "desc": "Is every stack in this inventory full? Ignores stacks blocked by the current bar.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_contents",
          "desc": "Get counts of all items in this inventory.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "supports_bar",
          "desc": "Does this inventory support a bar? Bar is the draggable red thing, found for example on chests, that limits the portion of the inventory that may be manipulated by machines.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_bar",
          "desc": "Get the current bar. This is the index at which the red area starts.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_bar",
          "desc": "Set the current bar.",
          "params": [
            {
              "name": "bar",
              "types": [
                "uint?"
              ],
              "desc": "The new limit. Omitting this parameter will clear the limit."
            }
          ],
          "takes_table": false
        },
        {
          "name": "supports_filters",
          "desc": "If this inventory supports filters.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_filtered",
          "desc": "If this inventory supports filters and has at least 1 filter set.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "can_set_filter",
          "desc": "If the given inventory slot filter can be set to the given filter.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The item stack index"
            },
            {
              "name": "filter",
              "types": [
                "string"
              ],
              "desc": "The item name of the filter"
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_filter",
          "desc": "Gets the filter for the given item stack index.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The item stack index"
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_filter",
          "desc": "Sets the filter for the given item stack index.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The item stack index."
            },
            {
              "name": "filter",
              "types": [
                "string",
                "nil"
              ],
              "desc": "The new filter. nil erases any existing filter."
            }
          ],
          "takes_table": false
        },
        {
          "name": "find_item_stack",
          "desc": "Finds the first LuaItemStack in the inventory that matches the given item name.",
          "params": [
            {
              "name": "item",
              "types": [
                "string"
              ],
              "desc": "The item name to find"
            }
          ],
          "takes_table": false
        },
        {
          "name": "find_empty_stack",
          "desc": "Finds the first empty stack. Filtered slots are excluded unless a filter item is given.",
          "params": [
            {
              "name": "item",
              "types": [
                "string?"
              ],
              "desc": "If given, empty stacks that are filtered for this item will be included."
            }
          ],
          "takes_table": false
        },
        {
          "name": "count_empty_stacks",
          "desc": "Counts the number of empty stacks.",
          "params": [
            {
              "name": "include_filtered",
              "types": [
                "boolean?"
              ],
              "desc": "If true, filtered slots will be included. Defaults to false."
            },
            {
              "name": "include_bar",
              "types": [
                "boolean?"
              ],
              "desc": "If true, slots blocked by the current bar will be included. Defaults to true."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_insertable_count",
          "desc": "Gets the number of the given item that can be inserted into this inventory.",
          "params": [
            {
              "name": "item",
              "types": [
                "string"
              ],
              "desc": "The item to check."
            }
          ],
          "takes_table": false
        },
        {
          "name": "sort_and_merge",
          "desc": "Sorts and merges the items in this inventory.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "resize",
          "desc": "Resizes the inventory.",
          "params": [
            {
              "name": "size",
              "types": [
                "uint16"
              ],
              "desc": "New size of a inventory"
            }
          ],
          "takes_table": false
        },
        {
          "name": "destroy",
          "desc": "Destroys this inventory.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "index",
          "_type": "defines.inventory|nil",
          "permissions": "Read",
          "description": "The inventory index this inventory uses, if any."
        },
        {
          "name": "entity_owner",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The entity that owns this inventory, if any."
        },
        {
          "name": "player_owner",
          "_type": "LuaPlayer|nil",
          "permissions": "Read",
          "description": "The player that owns this inventory, if any."
        },
        {
          "name": "equipment_owner",
          "_type": "LuaEquipment|nil",
          "permissions": "Read",
          "description": "The equipment that owns this inventory, if any."
        },
        {
          "name": "mod_owner",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The mod that owns this inventory, if any."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaItemPrototype",
      "extends": "",
      "desc": "Prototype of an item.",
      "methods": [
        {
          "name": "has_flag",
          "desc": "Does this prototype have a flag enabled?",
          "params": [
            {
              "name": "flag",
              "types": [
                "ItemPrototypeFlag"
              ],
              "desc": "The flag to check."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_ammo_type",
          "desc": "The type of this ammo prototype.",
          "params": [
            {
              "name": "ammo_source_type",
              "types": [
                "\"default\"",
                "\"player\"",
                "\"turret\"",
                "\"vehicle\"?"
              ],
              "desc": "Defaults to \"default\"."
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "type",
          "_type": "string",
          "permissions": "Read",
          "description": "Type of this prototype. E.g. \"gun\" or \"mining-tool\"."
        },
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "place_result",
          "_type": "LuaEntityPrototype|nil",
          "permissions": "Read",
          "description": "Prototype of the entity that will be created by placing this item, if any."
        },
        {
          "name": "place_as_equipment_result",
          "_type": "LuaEquipmentPrototype|nil",
          "permissions": "Read",
          "description": "Prototype of the equipment that will be created by placing this item in an equipment grid, if any."
        },
        {
          "name": "place_as_tile_result",
          "_type": "PlaceAsTileResult|nil",
          "permissions": "Read",
          "description": "The place-as-tile result if one is defined, if any."
        },
        {
          "name": "stackable",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this item allowed to stack at all?"
        },
        {
          "name": "default_request_amount",
          "_type": "uint",
          "permissions": "Read",
          "description": "The default request value."
        },
        {
          "name": "stack_size",
          "_type": "uint",
          "permissions": "Read",
          "description": "Maximum stack size of the item specified by this prototype."
        },
        {
          "name": "wire_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "The number of items needed to connect two entities with this as wire."
        },
        {
          "name": "fuel_category",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The fuel category of this item prototype, if any."
        },
        {
          "name": "burnt_result",
          "_type": "LuaItemPrototype|nil",
          "permissions": "Read",
          "description": "The result of burning this item as fuel, if any."
        },
        {
          "name": "fuel_value",
          "_type": "float",
          "permissions": "Read",
          "description": "Fuel value when burned."
        },
        {
          "name": "fuel_acceleration_multiplier",
          "_type": "double",
          "permissions": "Read",
          "description": "The acceleration multiplier when this item is used as fuel in a vehicle."
        },
        {
          "name": "fuel_top_speed_multiplier",
          "_type": "double",
          "permissions": "Read",
          "description": "The fuel top speed multiplier when this item is used as fuel in a vehicle."
        },
        {
          "name": "fuel_emissions_multiplier",
          "_type": "double",
          "permissions": "Read",
          "description": "The emissions multiplier if this is used as fuel."
        },
        {
          "name": "subgroup",
          "_type": "LuaGroup",
          "permissions": "Read",
          "description": "The subgroup this prototype belongs to."
        },
        {
          "name": "group",
          "_type": "LuaGroup",
          "permissions": "Read",
          "description": "The group this prototype belongs to."
        },
        {
          "name": "flags",
          "_type": "ItemPrototypeFlags",
          "permissions": "Read",
          "description": "The flags for this item prototype."
        },
        {
          "name": "rocket_launch_products",
          "_type": "array[Product]",
          "permissions": "Read",
          "description": "The results of launching this item in a rocket."
        },
        {
          "name": "can_be_mod_opened",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this item can be mod-opened."
        },
        {
          "name": "magazine_size",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "Size of full magazine."
        },
        {
          "name": "reload_time",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "Amount of extra time (in ticks) it takes to reload the weapon after depleting the magazine."
        },
        {
          "name": "equipment_grid",
          "_type": "LuaEquipmentGridPrototype|nil",
          "permissions": "Read",
          "description": "The prototype of this armor's equipment grid, if any."
        },
        {
          "name": "resistances",
          "_type": "dictionary[string \u2192 Resistance]|nil",
          "permissions": "Read",
          "description": "Resistances of this armor item, if any, indexed by damage type name."
        },
        {
          "name": "inventory_size_bonus",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The inventory size bonus for this armor prototype."
        },
        {
          "name": "capsule_action",
          "_type": "CapsuleAction|nil",
          "permissions": "Read",
          "description": "The capsule action for this capsule item prototype."
        },
        {
          "name": "attack_parameters",
          "_type": "AttackParameters|nil",
          "permissions": "Read",
          "description": "The gun attack parameters."
        },
        {
          "name": "inventory_size",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The main inventory size for item-with-inventory-prototype."
        },
        {
          "name": "item_filters",
          "_type": "dictionary[string \u2192 LuaItemPrototype]|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "item_group_filters",
          "_type": "dictionary[string \u2192 LuaGroup]|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "item_subgroup_filters",
          "_type": "dictionary[string \u2192 LuaGroup]|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "filter_mode",
          "_type": "\"none\"|\"whitelist\"|\"blacklist\"|nil",
          "permissions": "Read",
          "description": "The filter mode used by this item with inventory."
        },
        {
          "name": "insertion_priority_mode",
          "_type": "\"default\"|\"never\"|\"always\"|\"when-manually-filtered\"|nil",
          "permissions": "Read",
          "description": "The insertion priority mode used by this item with inventory."
        },
        {
          "name": "localised_filter_message",
          "_type": "LocalisedString|nil",
          "permissions": "Read",
          "description": "The localised string used when the player attempts to put items into this item with inventory that aren't allowed."
        },
        {
          "name": "extend_inventory_by_default",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "If this item with inventory extends the inventory it resides in by default."
        },
        {
          "name": "default_label_color",
          "_type": "Color|nil",
          "permissions": "Read",
          "description": "The default label color used for this item with label, if any."
        },
        {
          "name": "draw_label_for_cursor_render",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "If true, and this item with label has a label it is drawn in place of the normal number when held in the cursor."
        },
        {
          "name": "speed",
          "_type": "float|nil",
          "permissions": "Read",
          "description": "The repairing speed if this is a repairing tool."
        },
        {
          "name": "module_effects",
          "_type": "ModuleEffects|nil",
          "permissions": "Read",
          "description": "Effects of this module."
        },
        {
          "name": "category",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The name of a LuaModuleCategoryPrototype. Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules of the same category with higher tier modules."
        },
        {
          "name": "tier",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "Tier of the module inside its category. Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules with higher tier modules if they have the same category."
        },
        {
          "name": "limitations",
          "_type": "array[string]|nil",
          "permissions": "Read",
          "description": "An array of recipe names this module is allowed to work with. Empty when all recipes are allowed."
        },
        {
          "name": "limitation_message_key",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The limitation message key used when the player attempts to use this modules in some place it's not allowed."
        },
        {
          "name": "straight_rail",
          "_type": "LuaEntityPrototype|nil",
          "permissions": "Read",
          "description": "The straight rail prototype used for this rail planner prototype."
        },
        {
          "name": "curved_rail",
          "_type": "LuaEntityPrototype|nil",
          "permissions": "Read",
          "description": "The curved rail prototype used for this rail planner prototype."
        },
        {
          "name": "repair_result",
          "_type": "array[TriggerItem]|nil",
          "permissions": "Read",
          "description": "The repair result of this repair tool prototype."
        },
        {
          "name": "selection_border_color",
          "_type": "Color|nil",
          "permissions": "Read",
          "description": "The color used when doing normal selection with this selection tool prototype."
        },
        {
          "name": "alt_selection_border_color",
          "_type": "Color|nil",
          "permissions": "Read",
          "description": "The color used when doing alt selection with this selection tool prototype."
        },
        {
          "name": "reverse_selection_border_color",
          "_type": "Color|nil",
          "permissions": "Read",
          "description": "The color used when doing reverse selection with this selection tool prototype."
        },
        {
          "name": "alt_reverse_selection_border_color",
          "_type": "Color|nil",
          "permissions": "Read",
          "description": "The color used when doing alt reverse selection with this selection tool prototype."
        },
        {
          "name": "selection_mode_flags",
          "_type": "SelectionModeFlags|nil",
          "permissions": "Read",
          "description": "Flags that affect which entities will be selected."
        },
        {
          "name": "alt_selection_mode_flags",
          "_type": "SelectionModeFlags|nil",
          "permissions": "Read",
          "description": "Flags that affect which entities will be selected during alternate selection."
        },
        {
          "name": "reverse_selection_mode_flags",
          "_type": "SelectionModeFlags|nil",
          "permissions": "Read",
          "description": "Flags that affect which entities will be selected during reverse selection."
        },
        {
          "name": "alt_reverse_selection_mode_flags",
          "_type": "SelectionModeFlags|nil",
          "permissions": "Read",
          "description": "Flags that affect which entities will be selected during alt reverse selection."
        },
        {
          "name": "selection_cursor_box_type",
          "_type": "CursorBoxRenderType|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "alt_selection_cursor_box_type",
          "_type": "CursorBoxRenderType|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "reverse_selection_cursor_box_type",
          "_type": "CursorBoxRenderType|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "alt_reverse_selection_cursor_box_type",
          "_type": "CursorBoxRenderType|nil",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "always_include_tiles",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "If tiles area always included when doing selection with this selection tool prototype."
        },
        {
          "name": "entity_filter_mode",
          "_type": "PrototypeFilterMode|nil",
          "permissions": "Read",
          "description": "The entity filter mode used by this selection tool."
        },
        {
          "name": "alt_entity_filter_mode",
          "_type": "PrototypeFilterMode|nil",
          "permissions": "Read",
          "description": "The alt entity filter mode used by this selection tool."
        },
        {
          "name": "reverse_alt_entity_filter_mode",
          "_type": "PrototypeFilterMode|nil",
          "permissions": "Read",
          "description": "The reverse entity filter mode used by this selection tool."
        },
        {
          "name": "alt_reverse_alt_entity_filter_mode",
          "_type": "PrototypeFilterMode|nil",
          "permissions": "Read",
          "description": "The alt reverse entity filter mode used by this selection tool."
        },
        {
          "name": "tile_filter_mode",
          "_type": "PrototypeFilterMode|nil",
          "permissions": "Read",
          "description": "The tile filter mode used by this selection tool."
        },
        {
          "name": "alt_tile_filter_mode",
          "_type": "PrototypeFilterMode|nil",
          "permissions": "Read",
          "description": "The alt tile filter mode used by this selection tool."
        },
        {
          "name": "reverse_tile_filter_mode",
          "_type": "PrototypeFilterMode|nil",
          "permissions": "Read",
          "description": "The reverse tile filter mode used by this selection tool."
        },
        {
          "name": "alt_reverse_tile_filter_mode",
          "_type": "PrototypeFilterMode|nil",
          "permissions": "Read",
          "description": "The alt reverse tile filter mode used by this selection tool."
        },
        {
          "name": "entity_filters",
          "_type": "dictionary[string \u2192 LuaEntityPrototype]|nil",
          "permissions": "Read",
          "description": "The entity filters used by this selection tool indexed by entity name."
        },
        {
          "name": "alt_entity_filters",
          "_type": "dictionary[string \u2192 LuaEntityPrototype]|nil",
          "permissions": "Read",
          "description": "The alt entity filters used by this selection tool indexed by entity name."
        },
        {
          "name": "reverse_entity_filters",
          "_type": "dictionary[string \u2192 LuaEntityPrototype]|nil",
          "permissions": "Read",
          "description": "The reverse entity filters used by this selection tool indexed by entity name."
        },
        {
          "name": "alt_reverse_entity_filters",
          "_type": "dictionary[string \u2192 LuaEntityPrototype]|nil",
          "permissions": "Read",
          "description": "The alt reverse entity filters used by this selection tool indexed by entity name."
        },
        {
          "name": "entity_type_filters",
          "_type": "dictionary[string \u2192 boolean]|nil",
          "permissions": "Read",
          "description": "The entity type filters used by this selection tool indexed by entity type."
        },
        {
          "name": "alt_entity_type_filters",
          "_type": "dictionary[string \u2192 boolean]|nil",
          "permissions": "Read",
          "description": "The alt entity type filters used by this selection tool indexed by entity type."
        },
        {
          "name": "reverse_entity_type_filters",
          "_type": "dictionary[string \u2192 boolean]|nil",
          "permissions": "Read",
          "description": "The reverse entity type filters used by this selection tool indexed by entity type."
        },
        {
          "name": "alt_reverse_entity_type_filters",
          "_type": "dictionary[string \u2192 boolean]|nil",
          "permissions": "Read",
          "description": "The alt reverse entity type filters used by this selection tool indexed by entity type."
        },
        {
          "name": "tile_filters",
          "_type": "dictionary[string \u2192 LuaTilePrototype]|nil",
          "permissions": "Read",
          "description": "The tile filters used by this selection tool indexed by tile name."
        },
        {
          "name": "alt_tile_filters",
          "_type": "dictionary[string \u2192 LuaTilePrototype]|nil",
          "permissions": "Read",
          "description": "The alt tile filters used by this selection tool indexed by tile name."
        },
        {
          "name": "reverse_tile_filters",
          "_type": "dictionary[string \u2192 LuaTilePrototype]|nil",
          "permissions": "Read",
          "description": "The reverse tile filters used by this selection tool indexed by tile name."
        },
        {
          "name": "alt_reverse_tile_filters",
          "_type": "dictionary[string \u2192 LuaTilePrototype]|nil",
          "permissions": "Read",
          "description": "The alt reverse tile filters used by this selection tool indexed by tile name."
        },
        {
          "name": "entity_filter_slots",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The number of entity filters this deconstruction item has."
        },
        {
          "name": "tile_filter_slots",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The number of tile filters this deconstruction item has."
        },
        {
          "name": "durability_description_key",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The durability message key used when displaying the durability of this tool."
        },
        {
          "name": "durability",
          "_type": "double|nil",
          "permissions": "Read",
          "description": "The durability of this tool item."
        },
        {
          "name": "infinite",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "If this tool item has infinite durability."
        },
        {
          "name": "mapper_count",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "How many filters an upgrade item has."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaItemStack",
      "extends": "",
      "desc": "A reference to an item and count owned by some external entity.",
      "methods": [
        {
          "name": "is_blueprint_setup",
          "desc": "Is this blueprint item setup? I.e. is it a non-empty blueprint?",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_blueprint_entities",
          "desc": "The entities in this blueprint.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_blueprint_entities",
          "desc": "Set new entities to be a part of this blueprint.",
          "params": [
            {
              "name": "entities",
              "types": [
                "array[BlueprintEntity]"
              ],
              "desc": "The new blueprint entities."
            }
          ],
          "takes_table": false
        },
        {
          "name": "add_ammo",
          "desc": "Add ammo to this ammo item.",
          "params": [
            {
              "name": "amount",
              "types": [
                "float"
              ],
              "desc": "Amount of ammo to add."
            }
          ],
          "takes_table": false
        },
        {
          "name": "drain_ammo",
          "desc": "Remove ammo from this ammo item.",
          "params": [
            {
              "name": "amount",
              "types": [
                "float"
              ],
              "desc": "Amount of ammo to remove."
            }
          ],
          "takes_table": false
        },
        {
          "name": "add_durability",
          "desc": "Add durability to this tool item.",
          "params": [
            {
              "name": "amount",
              "types": [
                "double"
              ],
              "desc": "Amount of durability to add."
            }
          ],
          "takes_table": false
        },
        {
          "name": "drain_durability",
          "desc": "Remove durability from this tool item.",
          "params": [
            {
              "name": "amount",
              "types": [
                "double"
              ],
              "desc": "Amount of durability to remove."
            }
          ],
          "takes_table": false
        },
        {
          "name": "use_capsule",
          "desc": "Use the capsule item with the entity as the source, targeting the given position.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": "The entity to use the capsule item with."
            },
            {
              "name": "target_position",
              "types": [
                "MapPosition"
              ],
              "desc": "The position to use the capsule item with."
            }
          ],
          "takes_table": false
        },
        {
          "name": "can_set_stack",
          "desc": "Would a call to LuaItemStack::set_stack succeed?",
          "params": [
            {
              "name": "stack",
              "types": [
                "ItemStackIdentification?"
              ],
              "desc": "Stack that would be set, possibly nil."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_stack",
          "desc": "Set this item stack to another item stack.",
          "params": [
            {
              "name": "stack",
              "types": [
                "ItemStackIdentification?"
              ],
              "desc": "Item stack to set it to. Omitting this parameter or passing nil will clear this item stack, as if LuaItemStack::clear was called."
            }
          ],
          "takes_table": false
        },
        {
          "name": "transfer_stack",
          "desc": "Transfers the given item stack into this item stack.",
          "params": [
            {
              "name": "stack",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "export_stack",
          "desc": "Export a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) to a string.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "import_stack",
          "desc": "Import a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) from a string.",
          "params": [
            {
              "name": "data",
              "types": [
                "string"
              ],
              "desc": "The string to import"
            }
          ],
          "takes_table": false
        },
        {
          "name": "swap_stack",
          "desc": "Swaps this item stack with the given item stack if allowed.",
          "params": [
            {
              "name": "stack",
              "types": [
                "LuaItemStack"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear",
          "desc": "Clear this item stack.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_blueprint_tiles",
          "desc": "A list of the tiles in this blueprint.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_blueprint_tiles",
          "desc": "Set specific tiles in this blueprint.",
          "params": [
            {
              "name": "tiles",
              "types": [
                "array[Tile]"
              ],
              "desc": "Tiles to be a part of the blueprint."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_inventory",
          "desc": "Access the inner inventory of an item.",
          "params": [
            {
              "name": "inventory",
              "types": [
                "defines.inventory"
              ],
              "desc": "Index of the inventory to access, which can only be defines.inventory.item_main."
            }
          ],
          "takes_table": false
        },
        {
          "name": "build_blueprint",
          "desc": "Surface to build on",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": "Surface to build on"
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "Force to use for the building"
            },
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "The position to build at"
            },
            {
              "name": "force_build",
              "types": [
                "boolean?"
              ],
              "desc": "When true, anything that can be built is else nothing is built if any one thing can't be built"
            },
            {
              "name": "direction",
              "types": [
                "defines.direction?"
              ],
              "desc": "The direction to use when building"
            },
            {
              "name": "skip_fog_of_war",
              "types": [
                "boolean?"
              ],
              "desc": "If chunks covered by fog-of-war are skipped."
            },
            {
              "name": "by_player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "The player to use if any. If provided defines.events.on_built_entity will also be fired on successful entity creation."
            },
            {
              "name": "raise_built",
              "types": [
                "boolean?"
              ],
              "desc": "If true; defines.events.script_raised_built will be fired on successful entity creation. Note: this is ignored if by_player is provided."
            }
          ],
          "takes_table": true
        },
        {
          "name": "deconstruct_area",
          "desc": "Deconstruct the given area with this deconstruction item.",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": "Surface to deconstruct on"
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "Force to use for the deconstruction"
            },
            {
              "name": "area",
              "types": [
                "BoundingBox"
              ],
              "desc": "The area to deconstruct"
            },
            {
              "name": "skip_fog_of_war",
              "types": [
                "boolean?"
              ],
              "desc": "If chunks covered by fog-of-war are skipped."
            },
            {
              "name": "by_player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "The player to use if any."
            }
          ],
          "takes_table": true
        },
        {
          "name": "cancel_deconstruct_area",
          "desc": "Cancel deconstruct the given area with this deconstruction item.",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": "Surface to cancel deconstruct on"
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "Force to use for canceling deconstruction"
            },
            {
              "name": "area",
              "types": [
                "BoundingBox"
              ],
              "desc": "The area to deconstruct"
            },
            {
              "name": "skip_fog_of_war",
              "types": [
                "boolean?"
              ],
              "desc": "If chunks covered by fog-of-war are skipped."
            },
            {
              "name": "by_player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "The player to use if any."
            }
          ],
          "takes_table": true
        },
        {
          "name": "create_blueprint",
          "desc": "Sets up this blueprint using the found blueprintable entities/tiles on the surface.",
          "params": [
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": "Surface to create from"
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "Force to use for the creation"
            },
            {
              "name": "area",
              "types": [
                "BoundingBox"
              ],
              "desc": "The bounding box"
            },
            {
              "name": "always_include_tiles",
              "types": [
                "boolean?"
              ],
              "desc": "When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area."
            },
            {
              "name": "include_entities",
              "types": [
                "boolean?"
              ],
              "desc": "When true, entities are included in the blueprint. Defaults to true."
            },
            {
              "name": "include_modules",
              "types": [
                "boolean?"
              ],
              "desc": "When true, modules are included in the blueprint. Defaults to true."
            },
            {
              "name": "include_station_names",
              "types": [
                "boolean?"
              ],
              "desc": "When true, station names are included in the blueprint. Defaults to false."
            },
            {
              "name": "include_trains",
              "types": [
                "boolean?"
              ],
              "desc": "When true, trains are included in the blueprint. Defaults to false."
            },
            {
              "name": "include_fuel",
              "types": [
                "boolean?"
              ],
              "desc": "When true, train fuel is included in the blueprint, Defaults to true."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_tag",
          "desc": "Gets the tag with the given name or returns nil if it doesn't exist.",
          "params": [
            {
              "name": "tag_name",
              "types": [
                "string"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_tag",
          "desc": "Sets the tag with the given name and value.",
          "params": [
            {
              "name": "tag_name",
              "types": [
                "string"
              ],
              "desc": ""
            },
            {
              "name": "tag",
              "types": [
                "AnyBasic"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove_tag",
          "desc": "Removes a tag with the given name.",
          "params": [
            {
              "name": "tag",
              "types": [
                "string"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_blueprint",
          "desc": "Clears this blueprint item.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_entity_filter",
          "desc": "Gets the entity filter at the given index for this deconstruction item.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_entity_filter",
          "desc": "Sets the entity filter at the given index for this deconstruction item.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            },
            {
              "name": "filter",
              "types": [
                "string",
                "LuaEntityPrototype",
                "LuaEntity",
                "nil"
              ],
              "desc": "Writing nil removes the filter."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_tile_filter",
          "desc": "Gets the tile filter at the given index for this deconstruction item.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_tile_filter",
          "desc": "Sets the tile filter at the given index for this deconstruction item.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            },
            {
              "name": "filter",
              "types": [
                "string",
                "LuaTilePrototype",
                "LuaTile",
                "nil"
              ],
              "desc": "Writing nil removes the filter."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_deconstruction_item",
          "desc": "Clears all settings/filters on this deconstruction item resetting it to default values.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "clear_upgrade_item",
          "desc": "Clears all settings/filters on this upgrade item resetting it to default values.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_mapper",
          "desc": "Gets the filter at the given index for this upgrade item.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The index of the mapper to read."
            },
            {
              "name": "type",
              "types": [
                "\"from\"",
                "\"to\""
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_mapper",
          "desc": "Sets the module filter at the given index for this upgrade item.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The index of the mapper to set."
            },
            {
              "name": "type",
              "types": [
                "\"from\"",
                "\"to\""
              ],
              "desc": ""
            },
            {
              "name": "filter",
              "types": [
                "UpgradeFilter",
                "nil"
              ],
              "desc": "The filter to set or nil"
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_blueprint_entity_count",
          "desc": "Gets the number of entities in this blueprint item.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_blueprint_entity_tags",
          "desc": "Gets the tags for the given blueprint entity index in this blueprint item.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_blueprint_entity_tags",
          "desc": "Sets the tags on the given blueprint entity index in this blueprint item.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The entity index"
            },
            {
              "name": "tags",
              "types": [
                "Tags"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_blueprint_entity_tag",
          "desc": "Gets the given tag on the given blueprint entity index in this blueprint item.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The entity index."
            },
            {
              "name": "tag",
              "types": [
                "string"
              ],
              "desc": "The tag to get."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_blueprint_entity_tag",
          "desc": "Sets the given tag on the given blueprint entity index in this blueprint item.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The entity index."
            },
            {
              "name": "tag",
              "types": [
                "string"
              ],
              "desc": "The tag to set."
            },
            {
              "name": "value",
              "types": [
                "AnyBasic"
              ],
              "desc": "The tag value to set or nil to clear the tag."
            }
          ],
          "takes_table": false
        },
        {
          "name": "create_grid",
          "desc": "Creates the equipment grid for this item if it doesn't exist and this is an item-with-entity-data that supports equipment grids.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "valid_for_read",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this valid for reading? Differs from the usual valid in that valid will be true even if the item stack is blank but the entity that holds it is still valid."
        },
        {
          "name": "prototype",
          "_type": "LuaItemPrototype",
          "permissions": "Read",
          "description": "Prototype of the item held in this stack."
        },
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Prototype name of the item held in this stack."
        },
        {
          "name": "type",
          "_type": "string",
          "permissions": "Read",
          "description": "Type of the item prototype."
        },
        {
          "name": "count",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "Number of items in this stack."
        },
        {
          "name": "grid",
          "_type": "LuaEquipmentGrid|nil",
          "permissions": "Read",
          "description": "The equipment grid of this item, if any."
        },
        {
          "name": "health",
          "_type": "float",
          "permissions": "Read/Write",
          "description": "How much health the item has, as a number in range [0, 1]."
        },
        {
          "name": "durability",
          "_type": "double|nil",
          "permissions": "Read/Write",
          "description": "Durability of the contained item. Automatically capped at the item's maximum durability."
        },
        {
          "name": "ammo",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "Number of bullets left in the magazine."
        },
        {
          "name": "blueprint_icons",
          "_type": "array[BlueprintSignalIcon]|nil",
          "permissions": "Read/Write",
          "description": "Icons of this blueprint item, blueprint book, deconstruction item or upgrade planner. An item that doesn't have icons returns nil on read and throws error on write."
        },
        {
          "name": "blueprint_snap_to_grid",
          "_type": "TilePosition|nil",
          "permissions": "Read/Write",
          "description": "The snapping grid size in this blueprint item. nil if snapping is not enabled."
        },
        {
          "name": "blueprint_position_relative_to_grid",
          "_type": "TilePosition|nil",
          "permissions": "Read/Write",
          "description": "The offset from the absolute grid. nil if absolute snapping is not enabled."
        },
        {
          "name": "blueprint_absolute_snapping",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If absolute snapping is enabled on this blueprint item."
        },
        {
          "name": "label",
          "_type": "string|nil",
          "permissions": "Read/Write",
          "description": "The current label for this item, if any."
        },
        {
          "name": "label_color",
          "_type": "Color|nil",
          "permissions": "Read/Write",
          "description": "The current label color for this item, if any."
        },
        {
          "name": "allow_manual_label_change",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Whether the label for this item can be manually changed. When false the label can only be changed through the API."
        },
        {
          "name": "cost_to_build",
          "_type": "dictionary[string \u2192 uint]",
          "permissions": "Read",
          "description": "Raw materials required to build this blueprint. Result is a dictionary mapping each item prototype name to the required count."
        },
        {
          "name": "extends_inventory",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If this item extends the inventory it resides in (provides its contents for counts, crafting, insertion). Only callable on items with inventories."
        },
        {
          "name": "prioritize_insertion_mode",
          "_type": "\"default\"|\"never\"|\"always\"|\"when-manually-filtered\"",
          "permissions": "Read/Write",
          "description": "The insertion mode priority this ItemWithInventory uses when items are inserted into an inventory it resides in. Only callable on items with inventories."
        },
        {
          "name": "default_icons",
          "_type": "array[BlueprintSignalIcon]",
          "permissions": "Read",
          "description": "The default icons for a blueprint item."
        },
        {
          "name": "tags",
          "_type": "Tags",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "custom_description",
          "_type": "LocalisedString",
          "permissions": "Read/Write",
          "description": "The custom description this item-with-tags. This is shown over the normal item description if this is set to a non-empty value."
        },
        {
          "name": "entity_filters",
          "_type": "array[string]",
          "permissions": "Read/Write",
          "description": "The entity filters for this deconstruction item. The attribute is a sparse array with the keys representing the index of the filter. All strings in this array must be entity prototype names that don't have the \"not-deconstructable\" flag set and are either a cliff or marked as minable."
        },
        {
          "name": "tile_filters",
          "_type": "array[string]",
          "permissions": "Read/Write",
          "description": "The tile filters for this deconstruction item. The attribute is a sparse array with the keys representing the index of the filter. All strings in this array must be tile prototype names."
        },
        {
          "name": "entity_filter_mode",
          "_type": "defines.deconstruction_item.entity_filter_mode",
          "permissions": "Read/Write",
          "description": "The blacklist/whitelist entity filter mode for this deconstruction item."
        },
        {
          "name": "tile_filter_mode",
          "_type": "defines.deconstruction_item.tile_filter_mode",
          "permissions": "Read/Write",
          "description": "The blacklist/whitelist tile filter mode for this deconstruction item."
        },
        {
          "name": "tile_selection_mode",
          "_type": "defines.deconstruction_item.tile_selection_mode",
          "permissions": "Read/Write",
          "description": "The tile selection mode for this deconstruction item."
        },
        {
          "name": "trees_and_rocks_only",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If this deconstruction item is set to allow trees and rocks only."
        },
        {
          "name": "entity_filter_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "The number of entity filters this deconstruction item supports."
        },
        {
          "name": "tile_filter_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "The number of tile filters this deconstruction item supports."
        },
        {
          "name": "active_index",
          "_type": "uint|nil",
          "permissions": "Read/Write",
          "description": "The active blueprint index for this blueprint book. nil if this blueprint book is empty."
        },
        {
          "name": "item_number",
          "_type": "uint|nil",
          "permissions": "Read",
          "description": "The unique identifier for this item , if any. Note that this ID stays the same no matter where the item is moved to."
        },
        {
          "name": "connected_entity",
          "_type": "LuaEntity|nil",
          "permissions": "Read/Write",
          "description": "If this item is a spidertron remote that has a spidertron bound to it, it returns the connected spider-vehicle entity."
        },
        {
          "name": "entity_label",
          "_type": "string|nil",
          "permissions": "Read/Write",
          "description": "If this is an item with entity data, get the stored entity label."
        },
        {
          "name": "entity_color",
          "_type": "Color|nil",
          "permissions": "Read/Write",
          "description": "If this is an item with entity data, get the stored entity color."
        },
        {
          "name": "is_blueprint",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is a blueprint item."
        },
        {
          "name": "is_blueprint_book",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is a blueprint book item."
        },
        {
          "name": "is_module",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is a module item."
        },
        {
          "name": "is_tool",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is a tool item."
        },
        {
          "name": "is_mining_tool",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is a mining tool item."
        },
        {
          "name": "is_armor",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is an armor item."
        },
        {
          "name": "is_repair_tool",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is a repair tool item."
        },
        {
          "name": "is_item_with_label",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is an item with label item."
        },
        {
          "name": "is_item_with_inventory",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is an item with inventory item."
        },
        {
          "name": "is_item_with_entity_data",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is an item with entity data item."
        },
        {
          "name": "is_selection_tool",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is a selection tool item."
        },
        {
          "name": "is_item_with_tags",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is an item with tags item."
        },
        {
          "name": "is_deconstruction_item",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is a deconstruction tool item."
        },
        {
          "name": "is_upgrade_item",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this is a upgrade item."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaLampControlBehavior",
      "extends": "",
      "desc": "Control behavior for lamps.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "use_colors",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if the lamp should set the color from the circuit network signals."
        },
        {
          "name": "color",
          "_type": "Color|nil",
          "permissions": "Read",
          "description": "The color the lamp is showing, if any."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaLazyLoadedValue",
      "extends": "",
      "desc": "A lazily loaded value. For performance reasons, we sometimes return a custom lazily-loaded value type instead of the native Lua value. This custom type lazily constructs the necessary value when LuaLazyLoadedValue::get is called, therefore preventing its unnecessary construction in some cases.",
      "methods": [
        {
          "name": "get",
          "desc": "Gets the value of this lazy loaded value.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaLogisticCell",
      "extends": "",
      "desc": "Logistic cell of a particular LuaEntity. A \"Logistic Cell\" is the given name for settings and properties used by what would normally be seen as a \"Roboport\". A logistic cell however doesn't have to be attached to the roboport entity (the character has one for the personal roboport).",
      "methods": [
        {
          "name": "is_in_logistic_range",
          "desc": "Is a given position within the logistic range of this cell?",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_in_construction_range",
          "desc": "Is a given position within the construction range of this cell?",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_neighbour_with",
          "desc": "Are two cells neighbours?",
          "params": [
            {
              "name": "other",
              "types": [
                "LuaLogisticCell"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "logistic_radius",
          "_type": "float",
          "permissions": "Read",
          "description": "Logistic radius of this cell."
        },
        {
          "name": "logistics_connection_distance",
          "_type": "float",
          "permissions": "Read",
          "description": "Logistic connection distance of this cell."
        },
        {
          "name": "construction_radius",
          "_type": "float",
          "permissions": "Read",
          "description": "Construction radius of this cell."
        },
        {
          "name": "stationed_logistic_robot_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "Number of stationed logistic robots in this cell."
        },
        {
          "name": "stationed_construction_robot_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "Number of stationed construction robots in this cell."
        },
        {
          "name": "mobile",
          "_type": "boolean",
          "permissions": "Read",
          "description": "true if this is a mobile cell. In vanilla, only the logistic cell created by a character's personal roboport is mobile."
        },
        {
          "name": "transmitting",
          "_type": "boolean",
          "permissions": "Read",
          "description": "true if this cell is active."
        },
        {
          "name": "charge_approach_distance",
          "_type": "float",
          "permissions": "Read",
          "description": "Radius at which the robots hover when waiting to be charged."
        },
        {
          "name": "charging_robot_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "Number of robots currently charging."
        },
        {
          "name": "to_charge_robot_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "Number of robots waiting to charge."
        },
        {
          "name": "owner",
          "_type": "LuaEntity",
          "permissions": "Read",
          "description": "This cell's owner."
        },
        {
          "name": "logistic_network",
          "_type": "LuaLogisticNetwork|nil",
          "permissions": "Read",
          "description": "The network that owns this cell, if any."
        },
        {
          "name": "neighbours",
          "_type": "array[LuaLogisticCell]",
          "permissions": "Read",
          "description": "Neighbouring cells."
        },
        {
          "name": "charging_robots",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "Robots currently being charged."
        },
        {
          "name": "to_charge_robots",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "Robots waiting to charge."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaLogisticContainerControlBehavior",
      "extends": "",
      "desc": "Control behavior for logistic chests.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "circuit_mode_of_operation",
          "_type": "defines.control_behavior.logistic_container.circuit_mode_of_operation",
          "permissions": "Read/Write",
          "description": "The circuit mode of operations for the logistic container. Can only be set on containers whose logistic_mode is set to \"requester\"."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaLogisticNetwork",
      "extends": "",
      "desc": "A single logistic network of a given force on a given surface.",
      "methods": [
        {
          "name": "get_item_count",
          "desc": "Count given or all items in the network or given members.",
          "params": [
            {
              "name": "item",
              "types": [
                "string?"
              ],
              "desc": "Item name to count. If not given, gives counts of all items in the network."
            },
            {
              "name": "member",
              "types": [
                "\"storage\"",
                "\"providers\"?"
              ],
              "desc": "Logistic members to check. If not given, gives count in the entire network."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_contents",
          "desc": "Get item counts for the entire network, similar to how LuaInventory::get_contents does.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "remove_item",
          "desc": "Remove items from the logistic network. This will actually remove the items from some logistic chests.",
          "params": [
            {
              "name": "item",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "What to remove."
            },
            {
              "name": "members",
              "types": [
                "\"active-provider\"",
                "\"passive-provider\"",
                "\"buffer\"",
                "\"storage\"?"
              ],
              "desc": "Which logistic members to remove from. If not specified, removes from the network in the usual order."
            }
          ],
          "takes_table": false
        },
        {
          "name": "insert",
          "desc": "Insert items into the logistic network. This will actually insert the items into some logistic chests.",
          "params": [
            {
              "name": "item",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "What to insert."
            },
            {
              "name": "members",
              "types": [
                "\"storage\"",
                "\"storage-empty\"",
                "\"storage-empty-slot\"",
                "\"requester\"?"
              ],
              "desc": "Which logistic members to insert the items to. \"storage-empty\" inserts into storage chests that are completely empty, \"storage-empty-slot\" inserts into storage chests that have an empty slot. If not specified, inserts items into the logistic network in the usual order."
            }
          ],
          "takes_table": false
        },
        {
          "name": "find_cell_closest_to",
          "desc": "Find logistic cell closest to a given position.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "select_pickup_point",
          "desc": "Find the 'best' logistic point with this item ID and from the given position or from given chest type.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "Name of the item to pick up."
            },
            {
              "name": "position",
              "types": [
                "MapPosition?"
              ],
              "desc": "When given, it will find the storage 'best' storage point from this position."
            },
            {
              "name": "include_buffers",
              "types": [
                "boolean?"
              ],
              "desc": "Whether to consider buffer chests or not. Defaults to false. Only considered if selecting with position."
            },
            {
              "name": "members",
              "types": [
                "\"active-provider\"",
                "\"passive-provider\"",
                "\"buffer\"",
                "\"storage\"?"
              ],
              "desc": "When given, it will find from only the specific type of member. If not specified, selects with normal priorities. Not considered if position is specified."
            }
          ],
          "takes_table": true
        },
        {
          "name": "select_drop_point",
          "desc": "Find a logistic point to drop the specific item stack.",
          "params": [
            {
              "name": "stack",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "Name of the item to drop off."
            },
            {
              "name": "members",
              "types": [
                "\"storage\"",
                "\"storage-empty\"",
                "\"storage-empty-slot\"",
                "\"requester\"?"
              ],
              "desc": "When given, it will find from only the specific type of member. If not specified, selects with normal priorities."
            }
          ],
          "takes_table": true
        },
        {
          "name": "can_satisfy_request",
          "desc": "Can the network satisfy a request for a given item and count.",
          "params": [
            {
              "name": "item",
              "types": [
                "string"
              ],
              "desc": "Item name to check."
            },
            {
              "name": "count",
              "types": [
                "uint?"
              ],
              "desc": "Count to check. Defaults to 1."
            },
            {
              "name": "include_buffers",
              "types": [
                "boolean?"
              ],
              "desc": "Should buffers be considered? Defaults to false."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_supply_counts",
          "desc": "Get the amount of items of the given type indexed by the storage member.",
          "params": [
            {
              "name": "item",
              "types": [
                "string"
              ],
              "desc": "Item name to check."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_supply_points",
          "desc": "Gets the logistic points with of the given type indexed by the storage member.",
          "params": [
            {
              "name": "item",
              "types": [
                "string"
              ],
              "desc": "Item name to check."
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "force",
          "_type": "LuaForce",
          "permissions": "Read",
          "description": "The force this logistic network belongs to."
        },
        {
          "name": "available_logistic_robots",
          "_type": "uint",
          "permissions": "Read",
          "description": "Number of logistic robots available for a job."
        },
        {
          "name": "all_logistic_robots",
          "_type": "uint",
          "permissions": "Read",
          "description": "The total number of logistic robots in the network (idle and active + in roboports)."
        },
        {
          "name": "available_construction_robots",
          "_type": "uint",
          "permissions": "Read",
          "description": "Number of construction robots available for a job."
        },
        {
          "name": "all_construction_robots",
          "_type": "uint",
          "permissions": "Read",
          "description": "The total number of construction robots in the network (idle and active + in roboports)."
        },
        {
          "name": "robot_limit",
          "_type": "uint",
          "permissions": "Read",
          "description": "Maximum number of robots the network can work with. Currently only used for the personal roboport."
        },
        {
          "name": "cells",
          "_type": "array[LuaLogisticCell]",
          "permissions": "Read",
          "description": "All cells in this network."
        },
        {
          "name": "providers",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "All entities that have logistic provider points in this network."
        },
        {
          "name": "empty_providers",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "All entities that have empty logistic provider points in this network."
        },
        {
          "name": "requesters",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "All entities that have logistic requester points in this network."
        },
        {
          "name": "storages",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "All entities that have logistic storage points in this network."
        },
        {
          "name": "logistic_members",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "All other entities that have logistic points in this network (inserters mostly)."
        },
        {
          "name": "provider_points",
          "_type": "array[LuaLogisticPoint]",
          "permissions": "Read",
          "description": "All things that have provider points in this network."
        },
        {
          "name": "passive_provider_points",
          "_type": "array[LuaLogisticPoint]",
          "permissions": "Read",
          "description": "All passive provider points in this network."
        },
        {
          "name": "active_provider_points",
          "_type": "array[LuaLogisticPoint]",
          "permissions": "Read",
          "description": "All active provider points in this network."
        },
        {
          "name": "empty_provider_points",
          "_type": "array[LuaLogisticPoint]",
          "permissions": "Read",
          "description": "All things that have empty provider points in this network."
        },
        {
          "name": "requester_points",
          "_type": "array[LuaLogisticPoint]",
          "permissions": "Read",
          "description": "All things that have requester points in this network."
        },
        {
          "name": "storage_points",
          "_type": "array[LuaLogisticPoint]",
          "permissions": "Read",
          "description": "All things that have storage points in this network."
        },
        {
          "name": "robots",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "All robots in this logistic network."
        },
        {
          "name": "construction_robots",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "All construction robots in this logistic network."
        },
        {
          "name": "logistic_robots",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "All logistic robots in this logistic network."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaLogisticPoint",
      "extends": "",
      "desc": "Logistic point of a particular LuaEntity. A \"Logistic point\" is the name given for settings and properties used by requester, provider, and storage points in a given logistic network. These \"points\" don't have to be a logistic container but often are. One other entity that can own several points is the \"character\" character type entity.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "owner",
          "_type": "LuaEntity",
          "permissions": "Read",
          "description": "The LuaEntity owner of this LuaLogisticPoint."
        },
        {
          "name": "logistic_network",
          "_type": "LuaLogisticNetwork",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "logistic_member_index",
          "_type": "uint",
          "permissions": "Read",
          "description": "The Logistic member index of this logistic point."
        },
        {
          "name": "filters",
          "_type": "array[LogisticFilter]|nil",
          "permissions": "Read",
          "description": "The logistic filters for this logistic point, if this uses any."
        },
        {
          "name": "mode",
          "_type": "defines.logistic_mode",
          "permissions": "Read",
          "description": "The logistic mode."
        },
        {
          "name": "force",
          "_type": "LuaForce",
          "permissions": "Read",
          "description": "The force of this logistic point."
        },
        {
          "name": "targeted_items_pickup",
          "_type": "dictionary[string \u2192 uint]",
          "permissions": "Read",
          "description": "Items targeted to be picked up from this logistic point by robots. The attribute is a dictionary mapping the item prototype names to their item counts."
        },
        {
          "name": "targeted_items_deliver",
          "_type": "dictionary[string \u2192 uint]",
          "permissions": "Read",
          "description": "Items targeted to be dropped off into this logistic point by robots. The attribute is a dictionary mapping the item prototype names to their item counts."
        },
        {
          "name": "exact",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this logistic point is using the exact mode. In exact mode robots never over-deliver requests."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaMiningDrillControlBehavior",
      "extends": "",
      "desc": "Control behavior for mining drills.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "circuit_enable_disable",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if this drill is enabled or disabled using the logistics or circuit condition."
        },
        {
          "name": "circuit_read_resources",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if this drill should send the resources in the field to the circuit network. Which resources depends on LuaMiningDrillControlBehavior::resource_read_mode"
        },
        {
          "name": "resource_read_mode",
          "_type": "defines.control_behavior.mining_drill.resource_read_mode",
          "permissions": "Read/Write",
          "description": "If the mining drill should send just the resources in its area or the entire field it's on to the circuit network."
        },
        {
          "name": "resource_read_targets",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "The resource entities that the mining drill will send information about to the circuit network or an empty array."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaModSettingPrototype",
      "extends": "",
      "desc": "Prototype of a mod setting.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "type",
          "_type": "string",
          "permissions": "Read",
          "description": "Type of this prototype."
        },
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "mod",
          "_type": "string",
          "permissions": "Read",
          "description": "The mod that owns this setting."
        },
        {
          "name": "setting_type",
          "_type": "string",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "default_value",
          "_type": "boolean|double|int|string",
          "permissions": "Read",
          "description": "The default value of this setting."
        },
        {
          "name": "minimum_value",
          "_type": "double|int|nil",
          "permissions": "Read",
          "description": "The minimum value for this setting. nil if this setting type doesn't support a minimum."
        },
        {
          "name": "maximum_value",
          "_type": "double|int|nil",
          "permissions": "Read",
          "description": "The maximum value for this setting. nil if this setting type doesn't support a maximum."
        },
        {
          "name": "allowed_values",
          "_type": "array[string]|array[int]|array[double]|nil",
          "permissions": "Read",
          "description": "The allowed values for this setting. nil if this setting doesn't use the a fixed set of values."
        },
        {
          "name": "allow_blank",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this string setting allows blank values. nil if not a string setting."
        },
        {
          "name": "auto_trim",
          "_type": "boolean|nil",
          "permissions": "Read",
          "description": "Whether this string setting auto-trims values. nil if not a string setting"
        },
        {
          "name": "hidden",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether this setting is hidden from the GUI."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaModuleCategoryPrototype",
      "extends": "",
      "desc": "Prototype of a module category.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaNamedNoiseExpression",
      "extends": "",
      "desc": "Prototype of a named noise expression.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "intended_property",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of the property that this expression is intended to provide a value for, if any."
        },
        {
          "name": "expression",
          "_type": "NoiseExpression",
          "permissions": "Read",
          "description": "The expression itself."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaNoiseLayerPrototype",
      "extends": "",
      "desc": "Prototype of a noise layer.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaParticlePrototype",
      "extends": "",
      "desc": "Prototype of an optimized particle.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "regular_trigger_effect",
          "_type": "TriggerEffectItem",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "ended_in_water_trigger_effect",
          "_type": "TriggerEffectItem",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "render_layer",
          "_type": "RenderLayer",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "render_layer_when_on_ground",
          "_type": "RenderLayer",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "life_time",
          "_type": "uint",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "regular_trigger_effect_frequency",
          "_type": "uint",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "movement_modifier_when_on_ground",
          "_type": "float",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "movement_modifier",
          "_type": "float",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "mining_particle_frame_speed",
          "_type": "float",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaPermissionGroup",
      "extends": "",
      "desc": "A permission group that defines what players in this group are allowed to do.",
      "methods": [
        {
          "name": "add_player",
          "desc": "Adds the given player to this group.",
          "params": [
            {
              "name": "player",
              "types": [
                "PlayerIdentification"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove_player",
          "desc": "Removes the given player from this group.",
          "params": [
            {
              "name": "player",
              "types": [
                "PlayerIdentification"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "allows_action",
          "desc": "Whether this group allows the given action.",
          "params": [
            {
              "name": "action",
              "types": [
                "defines.input_action"
              ],
              "desc": "The action in question."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_allows_action",
          "desc": "Sets whether this group allows the performance the given action.",
          "params": [
            {
              "name": "action",
              "types": [
                "defines.input_action"
              ],
              "desc": "The action in question."
            },
            {
              "name": "allow_action",
              "types": [
                "boolean"
              ],
              "desc": "Whether to allow the specified action."
            }
          ],
          "takes_table": false
        },
        {
          "name": "destroy",
          "desc": "Destroys this group.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read/Write",
          "description": "The name of this group."
        },
        {
          "name": "players",
          "_type": "array[LuaPlayer]",
          "permissions": "Read",
          "description": "The players in this group."
        },
        {
          "name": "group_id",
          "_type": "uint",
          "permissions": "Read",
          "description": "The group ID"
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaPermissionGroups",
      "extends": "",
      "desc": "All permission groups.",
      "methods": [
        {
          "name": "create_group",
          "desc": "Creates a new permission group.",
          "params": [
            {
              "name": "name",
              "types": [
                "string?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_group",
          "desc": "Gets the permission group with the given name or group ID.",
          "params": [
            {
              "name": "group",
              "types": [
                "string",
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "groups",
          "_type": "array[LuaPermissionGroup]",
          "permissions": "Read",
          "description": "All of the permission groups."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaPlayer",
      "extends": "",
      "desc": "A player in the game. Pay attention that a player may or may not have a character, which is the LuaEntity of the little guy running around the world doing things.",
      "methods": [
        {
          "name": "set_ending_screen_data",
          "desc": "Setup the screen to be shown when the game is finished.",
          "params": [
            {
              "name": "message",
              "types": [
                "LocalisedString"
              ],
              "desc": "Message to be shown."
            },
            {
              "name": "file",
              "types": [
                "string?"
              ],
              "desc": "Path to image to be shown."
            }
          ],
          "takes_table": false
        },
        {
          "name": "print",
          "desc": "Print text to the chat console.",
          "params": [
            {
              "name": "message",
              "types": [
                "LocalisedString"
              ],
              "desc": ""
            },
            {
              "name": "print_settings",
              "types": [
                "Color",
                "PrintSettings?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_console",
          "desc": "Clear the chat console.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_goal_description",
          "desc": "Get the current goal description, as a localised string.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_goal_description",
          "desc": "Set the text in the goal window (top left).",
          "params": [
            {
              "name": "text",
              "types": [
                "LocalisedString?"
              ],
              "desc": "The text to display. Lines can be delimited with \\n. Passing an empty string or omitting this parameter entirely will make the goal window disappear."
            },
            {
              "name": "only_update",
              "types": [
                "boolean?"
              ],
              "desc": "When true, won't play the \"goal updated\" sound."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_controller",
          "desc": "Set the controller type of the player.",
          "params": [
            {
              "name": "type",
              "types": [
                "defines.controllers"
              ],
              "desc": "Which controller to use."
            },
            {
              "name": "character",
              "types": [
                "LuaEntity?"
              ],
              "desc": "Entity to control. Mandatory when type is defines.controllers.character, ignored otherwise."
            },
            {
              "name": "waypoints",
              "types": [
                "CutsceneWaypoint?"
              ],
              "desc": "List of waypoints for the cutscene controller. This parameter is mandatory when type is defines.controllers.cutscene."
            },
            {
              "name": "start_position",
              "types": [
                "MapPosition?"
              ],
              "desc": "If specified and type is defines.controllers.cutscene, the cutscene will start at this position. If not given the start position will be the player position."
            },
            {
              "name": "start_zoom",
              "types": [
                "double?"
              ],
              "desc": "If specified and type is defines.controllers.cutscene, the cutscene will start at this zoom level. If not given the start zoom will be the players zoom."
            },
            {
              "name": "final_transition_time",
              "types": [
                "uint?"
              ],
              "desc": "If specified and type is defines.controllers.cutscene, it is the time in ticks it will take for the camera to pan from the final waypoint back to the starting position. If not given the camera will not pan back to the start position/zoom."
            },
            {
              "name": "chart_mode_cutoff",
              "types": [
                "double?"
              ],
              "desc": "If specified and type is defines.controllers.cutscene, the game will switch to chart-mode (map zoomed out) rendering when the zoom level is less than this value."
            }
          ],
          "takes_table": true
        },
        {
          "name": "drag_wire",
          "desc": "Start/end wire dragging at the specified location, wire type is based on the cursor contents",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Position at which cursor was clicked. Used only to decide which side of arithmetic combinator, decider combinator or power switch is to be connected. Entity itself to be connected is based on the player's selected entity."
            }
          ],
          "takes_table": true
        },
        {
          "name": "disable_recipe_groups",
          "desc": "Disable recipe groups.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "enable_recipe_groups",
          "desc": "Enable recipe groups.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "disable_recipe_subgroups",
          "desc": "Disable recipe subgroups.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "enable_recipe_subgroups",
          "desc": "Enable recipe subgroups.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "print_entity_statistics",
          "desc": "Print entity statistics to the player's console.",
          "params": [
            {
              "name": "entities",
              "types": [
                "array[string]?"
              ],
              "desc": "Entity prototypes to get statistics for. If not specified or empty, display statistics for all entities."
            }
          ],
          "takes_table": false
        },
        {
          "name": "print_robot_jobs",
          "desc": "Print construction robot job counts to the players console.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "print_lua_object_statistics",
          "desc": "Print LuaObject counts per mod.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "log_active_entity_chunk_counts",
          "desc": "Logs a dictionary of chunks -> active entities for the surface this player is on.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "log_active_entity_counts",
          "desc": "Logs a dictionary of active entities -> count for the surface this player is on.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "unlock_achievement",
          "desc": "Unlock the achievements of the given player. This has any effect only when this is the local player, the achievement isn't unlocked so far and the achievement is of the type \"achievement\".",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "name of the achievement to unlock"
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_cursor",
          "desc": "Invokes the \"clear cursor\" action on the player as if the user pressed it.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "create_character",
          "desc": "Creates and attaches a character entity to this player.",
          "params": [
            {
              "name": "character",
              "types": [
                "string?"
              ],
              "desc": "The character to create else the default is used."
            }
          ],
          "takes_table": false
        },
        {
          "name": "add_alert",
          "desc": "Adds an alert to this player for the given entity of the given alert type.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "type",
              "types": [
                "defines.alert_type"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "add_custom_alert",
          "desc": "Adds a custom alert to this player.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity"
              ],
              "desc": "If the alert is clicked, the map will open at the position of this entity."
            },
            {
              "name": "icon",
              "types": [
                "SignalID"
              ],
              "desc": ""
            },
            {
              "name": "message",
              "types": [
                "LocalisedString"
              ],
              "desc": ""
            },
            {
              "name": "show_on_map",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove_alert",
          "desc": "Removes all alerts matching the given filters or if an empty filters table is given all alerts are removed.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity?"
              ],
              "desc": ""
            },
            {
              "name": "prototype",
              "types": [
                "LuaEntityPrototype",
                "string?"
              ],
              "desc": ""
            },
            {
              "name": "position",
              "types": [
                "MapPosition?"
              ],
              "desc": ""
            },
            {
              "name": "type",
              "types": [
                "defines.alert_type?"
              ],
              "desc": ""
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": ""
            },
            {
              "name": "icon",
              "types": [
                "SignalID?"
              ],
              "desc": ""
            },
            {
              "name": "message",
              "types": [
                "LocalisedString?"
              ],
              "desc": ""
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_alerts",
          "desc": "Get all alerts matching the given filters, or all alerts if no filters are given.",
          "params": [
            {
              "name": "entity",
              "types": [
                "LuaEntity?"
              ],
              "desc": ""
            },
            {
              "name": "prototype",
              "types": [
                "LuaEntityPrototype?"
              ],
              "desc": ""
            },
            {
              "name": "position",
              "types": [
                "MapPosition?"
              ],
              "desc": ""
            },
            {
              "name": "type",
              "types": [
                "defines.alert_type?"
              ],
              "desc": ""
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": ""
            }
          ],
          "takes_table": true
        },
        {
          "name": "mute_alert",
          "desc": "Mutes alerts for the given alert category.",
          "params": [
            {
              "name": "alert_type",
              "types": [
                "defines.alert_type"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "unmute_alert",
          "desc": "Unmutes alerts for the given alert category.",
          "params": [
            {
              "name": "alert_type",
              "types": [
                "defines.alert_type"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_alert_muted",
          "desc": "If the given alert type is currently muted.",
          "params": [
            {
              "name": "alert_type",
              "types": [
                "defines.alert_type"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "enable_alert",
          "desc": "Enables alerts for the given alert category.",
          "params": [
            {
              "name": "alert_type",
              "types": [
                "defines.alert_type"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "disable_alert",
          "desc": "Disables alerts for the given alert category.",
          "params": [
            {
              "name": "alert_type",
              "types": [
                "defines.alert_type"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_alert_enabled",
          "desc": "If the given alert type is currently enabled.",
          "params": [
            {
              "name": "alert_type",
              "types": [
                "defines.alert_type"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "pipette_entity",
          "desc": "Invokes the \"smart pipette\" action on the player as if the user pressed it.",
          "params": [
            {
              "name": "entity",
              "types": [
                "string",
                "LuaEntity",
                "LuaEntityPrototype"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "can_place_entity",
          "desc": "Checks if this player can build the given entity at the given location on the surface the player is on.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "Name of the entity to check."
            },
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Where the entity would be placed."
            },
            {
              "name": "direction",
              "types": [
                "defines.direction?"
              ],
              "desc": "Direction the entity would be placed. Defaults to north."
            }
          ],
          "takes_table": true
        },
        {
          "name": "can_build_from_cursor",
          "desc": "Checks if this player can build what ever is in the cursor on the surface the player is on.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Where the entity would be placed"
            },
            {
              "name": "direction",
              "types": [
                "defines.direction?"
              ],
              "desc": "Direction the entity would be placed"
            },
            {
              "name": "alt",
              "types": [
                "boolean?"
              ],
              "desc": "If alt build should be used instead of normal build. Defaults to normal."
            },
            {
              "name": "terrain_building_size",
              "types": [
                "uint?"
              ],
              "desc": "The size for building terrain if building terrain. Defaults to 2."
            },
            {
              "name": "skip_fog_of_war",
              "types": [
                "boolean?"
              ],
              "desc": "If chunks covered by fog-of-war are skipped."
            }
          ],
          "takes_table": true
        },
        {
          "name": "build_from_cursor",
          "desc": "Builds whatever is in the cursor on the surface the player is on. The cursor stack will automatically be reduced as if the player built normally.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Where the entity would be placed"
            },
            {
              "name": "direction",
              "types": [
                "defines.direction?"
              ],
              "desc": "Direction the entity would be placed"
            },
            {
              "name": "alt",
              "types": [
                "boolean?"
              ],
              "desc": "If alt build should be used instead of normal build. Defaults to normal."
            },
            {
              "name": "terrain_building_size",
              "types": [
                "uint?"
              ],
              "desc": "The size for building terrain if building terrain. Defaults to 2."
            },
            {
              "name": "skip_fog_of_war",
              "types": [
                "boolean?"
              ],
              "desc": "If chunks covered by fog-of-war are skipped."
            }
          ],
          "takes_table": true
        },
        {
          "name": "use_from_cursor",
          "desc": "Uses the current item in the cursor if it's a capsule or does nothing if not.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Where the item would be used."
            }
          ],
          "takes_table": false
        },
        {
          "name": "play_sound",
          "desc": "Play a sound for this player.",
          "params": [
            {
              "name": "path",
              "types": [
                "SoundPath"
              ],
              "desc": "The sound to play."
            },
            {
              "name": "position",
              "types": [
                "MapPosition?"
              ],
              "desc": "Where the sound should be played. If not given, it's played at the current position of the player."
            },
            {
              "name": "volume_modifier",
              "types": [
                "double?"
              ],
              "desc": "The volume of the sound to play. Must be between 0 and 1 inclusive."
            },
            {
              "name": "override_sound_type",
              "types": [
                "SoundType?"
              ],
              "desc": "The volume mixer to play the sound through. Defaults to the default mixer for the given sound type."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_associated_characters",
          "desc": "The characters associated with this player.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "associate_character",
          "desc": "Associates a character with this player.",
          "params": [
            {
              "name": "character",
              "types": [
                "LuaEntity"
              ],
              "desc": "The character entity."
            }
          ],
          "takes_table": false
        },
        {
          "name": "disassociate_character",
          "desc": "Disassociates a character from this player. This is functionally the same as setting LuaEntity::associated_player to nil.",
          "params": [
            {
              "name": "character",
              "types": [
                "LuaEntity"
              ],
              "desc": "The character entity"
            }
          ],
          "takes_table": false
        },
        {
          "name": "create_local_flying_text",
          "desc": "Spawn flying text that is only visible to this player. Either position or create_at_cursor are required. When create_at_cursor is true, all parameters other than text are ignored.",
          "params": [
            {
              "name": "text",
              "types": [
                "LocalisedString"
              ],
              "desc": "The flying text to show."
            },
            {
              "name": "position",
              "types": [
                "MapPosition?"
              ],
              "desc": "The location on the map at which to show the flying text."
            },
            {
              "name": "create_at_cursor",
              "types": [
                "boolean?"
              ],
              "desc": "If true, the flying text is created at the player's cursor. Defaults to false."
            },
            {
              "name": "color",
              "types": [
                "Color?"
              ],
              "desc": "The color of the flying text. Defaults to white text."
            },
            {
              "name": "time_to_live",
              "types": [
                "uint?"
              ],
              "desc": "The amount of ticks that the flying text will be shown for. Defaults to 80."
            },
            {
              "name": "speed",
              "types": [
                "double?"
              ],
              "desc": "The speed at which the text rises upwards in tiles/second. Can't be a negative value."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_quick_bar_slot",
          "desc": "Gets the quick bar filter for the given slot or nil.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_quick_bar_slot",
          "desc": "Sets the quick bar filter for the given slot.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc."
            },
            {
              "name": "filter",
              "types": [
                "string",
                "LuaItemPrototype",
                "LuaItemStack"
              ],
              "desc": "The filter or nil."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_active_quick_bar_page",
          "desc": "Gets which quick bar page is being used for the given screen page or nil if not known.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_active_quick_bar_page",
          "desc": "Sets which quick bar page is being used for the given screen page.",
          "params": [
            {
              "name": "screen_index",
              "types": [
                "uint"
              ],
              "desc": "The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change."
            },
            {
              "name": "page_index",
              "types": [
                "uint"
              ],
              "desc": "The new quick bar page."
            }
          ],
          "takes_table": false
        },
        {
          "name": "jump_to_cutscene_waypoint",
          "desc": "Jump to the specified cutscene waypoint. Only works when the player is viewing a cutscene.",
          "params": [
            {
              "name": "waypoint_index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "exit_cutscene",
          "desc": "Exit the current cutscene. Errors if not in a cutscene.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "open_map",
          "desc": "Queues a request to open the map at the specified position. If the map is already opened, the request will simply set the position, scale, and entity to follow. Render mode change requests are processed before rendering of the next frame.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": ""
            },
            {
              "name": "scale",
              "types": [
                "double?"
              ],
              "desc": ""
            },
            {
              "name": "entity",
              "types": [
                "LuaEntity?"
              ],
              "desc": "The entity to follow. If not given the current entity being followed will be cleared."
            }
          ],
          "takes_table": false
        },
        {
          "name": "zoom_to_world",
          "desc": "Queues a request to zoom to world at the specified position. If the player is already zooming to world, the request will simply set the position, scale, and entity to follow. Render mode change requests are processed before rendering of the next frame.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": ""
            },
            {
              "name": "scale",
              "types": [
                "double?"
              ],
              "desc": ""
            },
            {
              "name": "entity",
              "types": [
                "LuaEntity?"
              ],
              "desc": "The entity to follow. If not given the current entity being followed will be cleared."
            }
          ],
          "takes_table": false
        },
        {
          "name": "close_map",
          "desc": "Queues request to switch to the normal game view from the map or zoom to world view. Render mode change requests are processed before rendering of the next frame.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_shortcut_toggled",
          "desc": "Is a custom Lua shortcut currently toggled?",
          "params": [
            {
              "name": "prototype_name",
              "types": [
                "string"
              ],
              "desc": "Prototype name of the custom shortcut."
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_shortcut_available",
          "desc": "Is a custom Lua shortcut currently available?",
          "params": [
            {
              "name": "prototype_name",
              "types": [
                "string"
              ],
              "desc": "Prototype name of the custom shortcut."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_shortcut_toggled",
          "desc": "Toggle or untoggle a custom Lua shortcut",
          "params": [
            {
              "name": "prototype_name",
              "types": [
                "string"
              ],
              "desc": "Prototype name of the custom shortcut."
            },
            {
              "name": "toggled",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_shortcut_available",
          "desc": "Make a custom Lua shortcut available or unavailable.",
          "params": [
            {
              "name": "prototype_name",
              "types": [
                "string"
              ],
              "desc": "Prototype name of the custom shortcut."
            },
            {
              "name": "available",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "connect_to_server",
          "desc": "Asks the player if they would like to connect to the given server.",
          "params": [
            {
              "name": "address",
              "types": [
                "string"
              ],
              "desc": "The server (address:port) if port is not given the default Factorio port is used."
            },
            {
              "name": "name",
              "types": [
                "LocalisedString?"
              ],
              "desc": "The name of the server."
            },
            {
              "name": "description",
              "types": [
                "LocalisedString?"
              ],
              "desc": ""
            },
            {
              "name": "password",
              "types": [
                "string?"
              ],
              "desc": "The password if different from the one used to join this game. Note, if the current password is not empty but the one required to join the new server is an empty string should be given for this field."
            }
          ],
          "takes_table": true
        },
        {
          "name": "toggle_map_editor",
          "desc": "Toggles this player into or out of the map editor. Does nothing if this player isn't an admin or if the player doesn't have permission to use the map editor.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "request_translation",
          "desc": "Requests a translation for the given localised string. If the request is successful, the on_string_translated event will be fired with the results.",
          "params": [
            {
              "name": "localised_string",
              "types": [
                "LocalisedString"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "request_translations",
          "desc": "Requests translation for the given set of localised strings. If the request is successful, a on_string_translated event will be fired for each string with the results.",
          "params": [
            {
              "name": "localised_strings",
              "types": [
                "array[LocalisedString]"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_infinity_inventory_filter",
          "desc": "Gets the filter for this map editor infinity filters at the given index or nil if the filter index doesn't exist or is empty.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The index to get."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_infinity_inventory_filter",
          "desc": "Sets the filter for this map editor infinity filters at the given index.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": "The index to set."
            },
            {
              "name": "filter",
              "types": [
                "InfinityInventoryFilter",
                "nil"
              ],
              "desc": "The new filter or nil to clear the filter."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_recipe_notifications",
          "desc": "Clears all recipe notifications for this player.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "add_recipe_notification",
          "desc": "Adds the given recipe to the list of recipe notifications for this player.",
          "params": [
            {
              "name": "recipe",
              "types": [
                "string"
              ],
              "desc": "Name of the recipe prototype to add."
            }
          ],
          "takes_table": false
        },
        {
          "name": "add_to_clipboard",
          "desc": "Adds the given blueprint to this player's clipboard queue.",
          "params": [
            {
              "name": "blueprint",
              "types": [
                "LuaItemStack"
              ],
              "desc": "The blueprint to add."
            }
          ],
          "takes_table": false
        },
        {
          "name": "activate_paste",
          "desc": "Gets a copy of the currently selected blueprint in the clipboard queue into the player's cursor, as if the player activated Paste.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "start_selection",
          "desc": "Starts selection with selection tool from the specified position. Does nothing if the players cursor is not a selection tool.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "The position to start selection from."
            },
            {
              "name": "selection_mode",
              "types": [
                "string"
              ],
              "desc": "The type of selection to start. Can be select, alternative-select, reverse-select."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_selection",
          "desc": "Clears the players selection tool selection position.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "character",
          "_type": "LuaEntity|nil",
          "permissions": "Read/Write",
          "description": "The character attached to this player, if any. Returns nil when the player is disconnected (see LuaPlayer::connected)."
        },
        {
          "name": "cutscene_character",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "When in a cutscene; the character this player would be using once the cutscene is over, if any. Returns nil when the player is disconnected (see LuaPlayer::connected)."
        },
        {
          "name": "index",
          "_type": "uint",
          "permissions": "Read",
          "description": "This player's index in LuaGameScript::players (unique ID). It is assigned when a player is created, and remains so (even when the player is not connected) until the player is irreversably removed. Indexes of removed players can be reused."
        },
        {
          "name": "gui",
          "_type": "LuaGui",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "opened_self",
          "_type": "boolean",
          "permissions": "Read",
          "description": "true if the player opened itself. I.e. if they opened the character or god-controller GUI."
        },
        {
          "name": "controller_type",
          "_type": "defines.controllers",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "stashed_controller_type",
          "_type": "defines.controllers|nil",
          "permissions": "Read",
          "description": "The stashed controller type, if any."
        },
        {
          "name": "game_view_settings",
          "_type": "GameViewSettings",
          "permissions": "Read/Write",
          "description": "The player's game view settings."
        },
        {
          "name": "minimap_enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if the minimap is visible."
        },
        {
          "name": "color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": "The color associated with the player. This will be used to tint the player's character as well as their buildings and vehicles."
        },
        {
          "name": "chat_color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": "The color used when this player talks in game."
        },
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "The player's username."
        },
        {
          "name": "tag",
          "_type": "string",
          "permissions": "Read/Write",
          "description": "The tag that is shown after the player in chat and on the map."
        },
        {
          "name": "connected",
          "_type": "boolean",
          "permissions": "Read",
          "description": "true if the player is currently connected to the game."
        },
        {
          "name": "admin",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if the player is an admin."
        },
        {
          "name": "entity_copy_source",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The source entity used during entity settings copy-paste, if any."
        },
        {
          "name": "afk_time",
          "_type": "uint",
          "permissions": "Read",
          "description": "How many ticks since the last action of this player"
        },
        {
          "name": "online_time",
          "_type": "uint",
          "permissions": "Read",
          "description": "How many ticks did this player spend playing this save (all sessions combined)"
        },
        {
          "name": "last_online",
          "_type": "uint",
          "permissions": "Read",
          "description": "At what tick this player was last online."
        },
        {
          "name": "permission_group",
          "_type": "LuaPermissionGroup|nil",
          "permissions": "Read/Write",
          "description": "The permission group this player is part of, if any."
        },
        {
          "name": "mod_settings",
          "_type": "LuaCustomTable[string \u2192 ModSetting]",
          "permissions": "Read",
          "description": "The current per-player settings for the this player, indexed by prototype name. Returns the same structure as LuaSettings::get_player_settings. This table becomes invalid if its associated player does."
        },
        {
          "name": "ticks_to_respawn",
          "_type": "uint|nil",
          "permissions": "Read/Write",
          "description": "The number of ticks until this player will respawn. nil if this player is not waiting to respawn."
        },
        {
          "name": "display_resolution",
          "_type": "DisplayResolution",
          "permissions": "Read",
          "description": "The display resolution for this player."
        },
        {
          "name": "display_scale",
          "_type": "double",
          "permissions": "Read",
          "description": "The display scale for this player."
        },
        {
          "name": "blueprint_to_setup",
          "_type": "LuaItemStack",
          "permissions": "Read",
          "description": "The item stack containing a blueprint to be setup."
        },
        {
          "name": "render_mode",
          "_type": "defines.render_mode",
          "permissions": "Read",
          "description": "The render mode of the player, like map or zoom to world. The render mode can be set using LuaPlayer::open_map, LuaPlayer::zoom_to_world and LuaPlayer::close_map."
        },
        {
          "name": "input_method",
          "_type": "defines.input_method",
          "permissions": "Read",
          "description": "The input method of the player, mouse and keyboard or game controller"
        },
        {
          "name": "spectator",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If true, zoom-to-world noise effect will be disabled and environmental sounds will be based on zoom-to-world view instead of position of player's character."
        },
        {
          "name": "show_on_map",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If true, circle and name of given player is rendered on the map/chart."
        },
        {
          "name": "remove_unfiltered_items",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If items not included in this map editor infinity inventory filters should be removed."
        },
        {
          "name": "infinity_inventory_filters",
          "_type": "array[InfinityInventoryFilter]",
          "permissions": "Read/Write",
          "description": "The filters for this map editor infinity inventory settings."
        },
        {
          "name": "auto_sort_main_inventory",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If the main inventory will be auto sorted."
        },
        {
          "name": "hand_location",
          "_type": "ItemStackLocation|nil",
          "permissions": "Read/Write",
          "description": "The original location of the item in the cursor, marked with a hand. nil if the cursor stack is empty. When writing, the specified inventory slot must be empty and the cursor stack must not be empty."
        },
        {
          "name": "cursor_stack_temporary",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Returns true if the current item stack in cursor will be destroyed after clearing the cursor. Manually putting it into inventory still preserves the item. If the cursor stack is not one of the supported types (blueprint, blueprint-book, deconstruction-planner, upgrade-planner), write operation will be silently ignored."
        },
        {
          "name": "drag_target",
          "_type": "DragTarget|nil",
          "permissions": "Read",
          "description": "The wire drag target for this player, if any."
        },
        {
          "name": "zoom",
          "_type": "double",
          "permissions": "Write",
          "description": "The player's zoom-level."
        },
        {
          "name": "map_view_settings",
          "_type": "MapViewSettings",
          "permissions": "Write",
          "description": "The player's map view settings. To write to this, use a table containing the fields that should be changed."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaProfiler",
      "extends": "",
      "desc": "An object used to measure script performance.",
      "methods": [
        {
          "name": "reset",
          "desc": "Resets the clock, also restarting it.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "stop",
          "desc": "Stops the clock.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "restart",
          "desc": "Start the clock again, without resetting it.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "add",
          "desc": "Add the duration of another timer to this timer. Useful to reduce start/stop overhead when accumulating time onto many timers at once.",
          "params": [
            {
              "name": "other",
              "types": [
                "LuaProfiler"
              ],
              "desc": "The timer to add to this timer."
            }
          ],
          "takes_table": false
        },
        {
          "name": "divide",
          "desc": "Divides the current duration by a set value. Useful for calculating the average of many iterations.",
          "params": [
            {
              "name": "number",
              "types": [
                "double"
              ],
              "desc": "The number to divide by. Must be > 0."
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaProgrammableSpeakerControlBehavior",
      "extends": "",
      "desc": "Control behavior for programmable speakers.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "circuit_parameters",
          "_type": "ProgrammableSpeakerCircuitParameters",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "circuit_condition",
          "_type": "CircuitConditionDefinition",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaRCON",
      "extends": "",
      "desc": "An interface to send messages to the calling RCON interface through the global object named rcon.",
      "methods": [
        {
          "name": "print",
          "desc": "Print text to the calling RCON interface if any.",
          "params": [
            {
              "name": "message",
              "types": [
                "LocalisedString"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "This object's name."
        }
      ]
    },
    {
      "name": "LuaRailChainSignalControlBehavior",
      "extends": "",
      "desc": "Control behavior for rail chain signals.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "red_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "orange_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "green_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "blue_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaRailPath",
      "extends": "",
      "desc": "A rail path.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "size",
          "_type": "uint",
          "permissions": "Read",
          "description": "The total number of rails in this path."
        },
        {
          "name": "current",
          "_type": "uint",
          "permissions": "Read",
          "description": "The current rail index."
        },
        {
          "name": "total_distance",
          "_type": "double",
          "permissions": "Read",
          "description": "The total path distance."
        },
        {
          "name": "travelled_distance",
          "_type": "double",
          "permissions": "Read",
          "description": "The total distance travelled."
        },
        {
          "name": "rails",
          "_type": "LuaCustomTable[uint \u2192 LuaEntity]",
          "permissions": "Read",
          "description": "Array of the rails that this path travels over."
        },
        {
          "name": "is_front",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If the path goes from the front of the train"
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaRailSignalControlBehavior",
      "extends": "",
      "desc": "Control behavior for rail signals.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "red_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "orange_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "green_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "close_signal",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If this will close the rail signal based off the circuit condition."
        },
        {
          "name": "read_signal",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If this will read the rail signal state."
        },
        {
          "name": "circuit_condition",
          "_type": "CircuitConditionDefinition",
          "permissions": "Read/Write",
          "description": "The circuit condition when controlling the signal through the circuit network."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaRandomGenerator",
      "extends": "",
      "desc": "A deterministic random generator independent from the core games random generator that can be seeded and re-seeded at will. This random generator can be saved and loaded and will maintain its state. Note this is entirely different from calling math.random() and you should be sure you actually want to use this over calling math.random(). If you aren't sure if you need to use this over calling math.random() then you probably don't need to use this.",
      "methods": [
        {
          "name": "re_seed",
          "desc": "Re-seeds the random generator with the given value.",
          "params": [
            {
              "name": "seed",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaRecipe",
      "extends": "",
      "desc": "A crafting recipe. Recipes belong to forces (see LuaForce) because some recipes are unlocked by research, and researches are per-force.",
      "methods": [
        {
          "name": "reload",
          "desc": "Reload the recipe from the prototype.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of the recipe. This can be different than the name of the result items as there could be more recipes to make the same item."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": "Localised name of the recipe."
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "prototype",
          "_type": "LuaRecipePrototype",
          "permissions": "Read",
          "description": "The prototype for this recipe."
        },
        {
          "name": "enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Can the recipe be used?"
        },
        {
          "name": "category",
          "_type": "string",
          "permissions": "Read",
          "description": "Category of the recipe."
        },
        {
          "name": "ingredients",
          "_type": "array[Ingredient]",
          "permissions": "Read",
          "description": "The ingredients to this recipe."
        },
        {
          "name": "products",
          "_type": "array[Product]",
          "permissions": "Read",
          "description": "The results/products of this recipe."
        },
        {
          "name": "hidden",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is the recipe hidden? Hidden recipe don't show up in the crafting menu."
        },
        {
          "name": "hidden_from_flow_stats",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Is the recipe hidden from flow statistics?"
        },
        {
          "name": "energy",
          "_type": "double",
          "permissions": "Read",
          "description": "Energy required to execute this recipe. This directly affects the crafting time: Recipe's energy is exactly its crafting time in seconds, when crafted in an assembling machine with crafting speed exactly equal to one."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "group",
          "_type": "LuaGroup",
          "permissions": "Read",
          "description": "Group of this recipe."
        },
        {
          "name": "subgroup",
          "_type": "LuaGroup",
          "permissions": "Read",
          "description": "Subgroup of this recipe."
        },
        {
          "name": "force",
          "_type": "LuaForce",
          "permissions": "Read",
          "description": "The force that owns this recipe."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaRecipeCategoryPrototype",
      "extends": "",
      "desc": "Prototype of a recipe category.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaRecipePrototype",
      "extends": "",
      "desc": "A crafting recipe prototype.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "enabled",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this recipe prototype is enabled by default (enabled at the beginning of a game)."
        },
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of the recipe. This can be different than the name of the result items as there could be more recipes to make the same item."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": "Localised name of the recipe."
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "category",
          "_type": "string",
          "permissions": "Read",
          "description": "Category of the recipe."
        },
        {
          "name": "ingredients",
          "_type": "array[Ingredient]",
          "permissions": "Read",
          "description": "The ingredients to this recipe."
        },
        {
          "name": "products",
          "_type": "array[Product]",
          "permissions": "Read",
          "description": "The results/products of this recipe."
        },
        {
          "name": "main_product",
          "_type": "Product|nil",
          "permissions": "Read",
          "description": "The main product of this recipe, if any."
        },
        {
          "name": "hidden",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is the recipe hidden? Hidden recipe don't show up in the crafting menu."
        },
        {
          "name": "hidden_from_flow_stats",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is the recipe hidden from flow statistics (item/fluid production statistics)?"
        },
        {
          "name": "hidden_from_player_crafting",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is the recipe hidden from player crafting? The recipe will still show up for selection in machines."
        },
        {
          "name": "always_show_made_in",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Should this recipe always show \"Made in\" in the tooltip?"
        },
        {
          "name": "energy",
          "_type": "double",
          "permissions": "Read",
          "description": "Energy required to execute this recipe. This directly affects the crafting time: Recipe's energy is exactly its crafting time in seconds, when crafted in an assembling machine with crafting speed exactly equal to one."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "group",
          "_type": "LuaGroup",
          "permissions": "Read",
          "description": "Group of this recipe."
        },
        {
          "name": "subgroup",
          "_type": "LuaGroup",
          "permissions": "Read",
          "description": "Subgroup of this recipe."
        },
        {
          "name": "request_paste_multiplier",
          "_type": "uint",
          "permissions": "Read",
          "description": "The multiplier used when this recipe is copied from an assembling machine to a requester chest. For each item in the recipe the item count * this value is set in the requester chest."
        },
        {
          "name": "overload_multiplier",
          "_type": "uint",
          "permissions": "Read",
          "description": "Used to determine how many extra items are put into an assembling machine before it's considered \"full enough\"."
        },
        {
          "name": "allow_inserter_overload",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If the recipe is allowed to have the extra inserter overload bonus applied (4 * stack inserter stack size)."
        },
        {
          "name": "allow_as_intermediate",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this recipe is enabled for the purpose of intermediate hand-crafting."
        },
        {
          "name": "allow_intermediates",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this recipe is allowed to use intermediate recipes when hand-crafting."
        },
        {
          "name": "show_amount_in_title",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If the amount is shown in the recipe tooltip title when the recipe produces more than 1 product."
        },
        {
          "name": "always_show_products",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If the products are always shown in the recipe tooltip."
        },
        {
          "name": "emissions_multiplier",
          "_type": "double",
          "permissions": "Read",
          "description": "The emissions multiplier for this recipe."
        },
        {
          "name": "allow_decomposition",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this recipe allowed to be broken down for the recipe tooltip \"Total raw\" calculations?"
        },
        {
          "name": "unlock_results",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this recipe unlocks the result item(s) so they're shown in filter-select GUIs."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaRemote",
      "extends": "",
      "desc": "Registry of interfaces between scripts. An interface is simply a dictionary mapping names to functions. A script or mod can then register an interface with LuaRemote, after that any script can call the registered functions, provided it knows the interface name and the desired function name. An instance of LuaRemote is available through the global object named remote.",
      "methods": [
        {
          "name": "add_interface",
          "desc": "Add a remote interface.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "Name of the interface. If the name matches any existing interface, an error is thrown."
            },
            {
              "name": "functions",
              "types": [
                "dictionary[string\u00a0\u2192 function()]"
              ],
              "desc": "List of functions that are members of the new interface."
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove_interface",
          "desc": "Removes an interface with the given name.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "Name of the interface."
            }
          ],
          "takes_table": false
        },
        {
          "name": "call",
          "desc": "Call a function of an interface.",
          "params": [
            {
              "name": "interface",
              "types": [
                "string"
              ],
              "desc": "Interface to look up function in."
            },
            {
              "name": "function",
              "types": [
                "string"
              ],
              "desc": "Function name that belongs to the interface."
            },
            {
              "name": "...",
              "types": [
                "Any"
              ],
              "desc": "Arguments to pass to the called function. Note that any arguments passed through the interface are a copy of the original, not a reference. Metatables are not retained, while references to LuaObjects stay intact."
            }
          ],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "This object's name."
        },
        {
          "name": "interfaces",
          "_type": "dictionary[string \u2192 dictionary[string \u2192 true]]",
          "permissions": "Read",
          "description": "List of all registered interfaces. For each interface name, remote.interfaces[name] is a dictionary mapping the interface's registered functions to true."
        }
      ]
    },
    {
      "name": "LuaRendering",
      "extends": "",
      "desc": "Allows rendering of geometric shapes, text and sprites in the game world through the global object named rendering. Each render object is identified by an id that is universally unique for the lifetime of a whole game.",
      "methods": [
        {
          "name": "draw_line",
          "desc": "Create a line.",
          "params": [
            {
              "name": "color",
              "types": [
                "Color"
              ],
              "desc": ""
            },
            {
              "name": "width",
              "types": [
                "float"
              ],
              "desc": "In pixels (32 per tile)."
            },
            {
              "name": "gap_length",
              "types": [
                "double?"
              ],
              "desc": "Length of the gaps that this line has, in tiles. Default is 0."
            },
            {
              "name": "dash_length",
              "types": [
                "double?"
              ],
              "desc": "Length of the dashes that this line has. Used only if gap_length > 0. Default is 0."
            },
            {
              "name": "dash_offset",
              "types": [
                "double?"
              ],
              "desc": "Starting offset to apply to dashes. Cannot be greater than dash_length + gap_length. Default is 0."
            },
            {
              "name": "from",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "from_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if from is a LuaEntity."
            },
            {
              "name": "to",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "to_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if to is a LuaEntity."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "time_to_live",
              "types": [
                "uint?"
              ],
              "desc": "In ticks. Defaults to living forever."
            },
            {
              "name": "forces",
              "types": [
                "array[ForceIdentification]?"
              ],
              "desc": "The forces that this object is rendered to. Passing nil or an empty table will render it to all forces."
            },
            {
              "name": "players",
              "types": [
                "array[PlayerIdentification]?"
              ],
              "desc": "The players that this object is rendered to. Passing nil or an empty table will render it to all players."
            },
            {
              "name": "visible",
              "types": [
                "boolean?"
              ],
              "desc": "If this is rendered to anyone at all. Defaults to true."
            },
            {
              "name": "draw_on_ground",
              "types": [
                "boolean?"
              ],
              "desc": "If this should be drawn below sprites and entities."
            },
            {
              "name": "only_in_alt_mode",
              "types": [
                "boolean?"
              ],
              "desc": "If this should only be rendered in alt mode. Defaults to false."
            }
          ],
          "takes_table": true
        },
        {
          "name": "draw_text",
          "desc": "Create a text.",
          "params": [
            {
              "name": "text",
              "types": [
                "LocalisedString"
              ],
              "desc": "The text to display."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "target",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "target_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if target is a LuaEntity."
            },
            {
              "name": "color",
              "types": [
                "Color"
              ],
              "desc": ""
            },
            {
              "name": "scale",
              "types": [
                "double?"
              ],
              "desc": ""
            },
            {
              "name": "font",
              "types": [
                "string?"
              ],
              "desc": "Name of font to use. Defaults to the same font as flying-text."
            },
            {
              "name": "time_to_live",
              "types": [
                "uint?"
              ],
              "desc": "In ticks. Defaults to living forever."
            },
            {
              "name": "forces",
              "types": [
                "array[ForceIdentification]?"
              ],
              "desc": "The forces that this object is rendered to. Passing nil or an empty table will render it to all forces."
            },
            {
              "name": "players",
              "types": [
                "array[PlayerIdentification]?"
              ],
              "desc": "The players that this object is rendered to. Passing nil or an empty table will render it to all players."
            },
            {
              "name": "visible",
              "types": [
                "boolean?"
              ],
              "desc": "If this is rendered to anyone at all. Defaults to true."
            },
            {
              "name": "draw_on_ground",
              "types": [
                "boolean?"
              ],
              "desc": "If this should be drawn below sprites and entities. Rich text does not support this option."
            },
            {
              "name": "orientation",
              "types": [
                "RealOrientation?"
              ],
              "desc": "The orientation of the text. Default is 0."
            },
            {
              "name": "alignment",
              "types": [
                "TextAlign?"
              ],
              "desc": "Defaults to \"left\"."
            },
            {
              "name": "vertical_alignment",
              "types": [
                "VerticalTextAlign?"
              ],
              "desc": "Defaults to \"top\"."
            },
            {
              "name": "scale_with_zoom",
              "types": [
                "boolean?"
              ],
              "desc": "Defaults to false. If true, the text scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes."
            },
            {
              "name": "only_in_alt_mode",
              "types": [
                "boolean?"
              ],
              "desc": "If this should only be rendered in alt mode. Defaults to false."
            },
            {
              "name": "use_rich_text",
              "types": [
                "boolean?"
              ],
              "desc": "If rich text rendering is enabled. Defaults to false."
            }
          ],
          "takes_table": true
        },
        {
          "name": "draw_circle",
          "desc": "Create a circle.",
          "params": [
            {
              "name": "color",
              "types": [
                "Color"
              ],
              "desc": ""
            },
            {
              "name": "radius",
              "types": [
                "double"
              ],
              "desc": "In tiles."
            },
            {
              "name": "width",
              "types": [
                "float?"
              ],
              "desc": "Width of the outline, used only if filled = false. Value is in pixels (32 per tile). Defaults to 1."
            },
            {
              "name": "filled",
              "types": [
                "boolean?"
              ],
              "desc": "If the circle should be filled. Defaults to false."
            },
            {
              "name": "target",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "target_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if target is a LuaEntity."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "time_to_live",
              "types": [
                "uint?"
              ],
              "desc": "In ticks. Defaults to living forever."
            },
            {
              "name": "forces",
              "types": [
                "array[ForceIdentification]?"
              ],
              "desc": "The forces that this object is rendered to. Passing nil or an empty table will render it to all forces."
            },
            {
              "name": "players",
              "types": [
                "array[PlayerIdentification]?"
              ],
              "desc": "The players that this object is rendered to. Passing nil or an empty table will render it to all players."
            },
            {
              "name": "visible",
              "types": [
                "boolean?"
              ],
              "desc": "If this is rendered to anyone at all. Defaults to true."
            },
            {
              "name": "draw_on_ground",
              "types": [
                "boolean?"
              ],
              "desc": "If this should be drawn below sprites and entities."
            },
            {
              "name": "only_in_alt_mode",
              "types": [
                "boolean?"
              ],
              "desc": "If this should only be rendered in alt mode. Defaults to false."
            }
          ],
          "takes_table": true
        },
        {
          "name": "draw_rectangle",
          "desc": "Create a rectangle.",
          "params": [
            {
              "name": "color",
              "types": [
                "Color"
              ],
              "desc": ""
            },
            {
              "name": "width",
              "types": [
                "float?"
              ],
              "desc": "Width of the outline, used only if filled = false. Value is in pixels (32 per tile). Defaults to 1."
            },
            {
              "name": "filled",
              "types": [
                "boolean?"
              ],
              "desc": "If the rectangle should be filled. Defaults to false."
            },
            {
              "name": "left_top",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "left_top_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if left_top is a LuaEntity."
            },
            {
              "name": "right_bottom",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "right_bottom_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if right_bottom is a LuaEntity."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "time_to_live",
              "types": [
                "uint?"
              ],
              "desc": "In ticks. Defaults to living forever."
            },
            {
              "name": "forces",
              "types": [
                "array[ForceIdentification]?"
              ],
              "desc": "The forces that this object is rendered to. Passing nil or an empty table will render it to all forces."
            },
            {
              "name": "players",
              "types": [
                "array[PlayerIdentification]?"
              ],
              "desc": "The players that this object is rendered to. Passing nil or an empty table will render it to all players."
            },
            {
              "name": "visible",
              "types": [
                "boolean?"
              ],
              "desc": "If this is rendered to anyone at all. Defaults to true."
            },
            {
              "name": "draw_on_ground",
              "types": [
                "boolean?"
              ],
              "desc": "If this should be drawn below sprites and entities."
            },
            {
              "name": "only_in_alt_mode",
              "types": [
                "boolean?"
              ],
              "desc": "If this should only be rendered in alt mode. Defaults to false."
            }
          ],
          "takes_table": true
        },
        {
          "name": "draw_arc",
          "desc": "Create an arc.",
          "params": [
            {
              "name": "color",
              "types": [
                "Color"
              ],
              "desc": ""
            },
            {
              "name": "max_radius",
              "types": [
                "double"
              ],
              "desc": "The radius of the outer edge of the arc, in tiles."
            },
            {
              "name": "min_radius",
              "types": [
                "double"
              ],
              "desc": "The radius of the inner edge of the arc, in tiles."
            },
            {
              "name": "start_angle",
              "types": [
                "float"
              ],
              "desc": "Where the arc starts, in radian."
            },
            {
              "name": "angle",
              "types": [
                "float"
              ],
              "desc": "The angle of the arc, in radian."
            },
            {
              "name": "target",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "target_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if target is a LuaEntity."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "time_to_live",
              "types": [
                "uint?"
              ],
              "desc": "In ticks. Defaults to living forever."
            },
            {
              "name": "forces",
              "types": [
                "array[ForceIdentification]?"
              ],
              "desc": "The forces that this object is rendered to. Passing nil or an empty table will render it to all forces."
            },
            {
              "name": "players",
              "types": [
                "array[PlayerIdentification]?"
              ],
              "desc": "The players that this object is rendered to. Passing nil or an empty table will render it to all players."
            },
            {
              "name": "visible",
              "types": [
                "boolean?"
              ],
              "desc": "If this is rendered to anyone at all. Defaults to true."
            },
            {
              "name": "draw_on_ground",
              "types": [
                "boolean?"
              ],
              "desc": "If this should be drawn below sprites and entities."
            },
            {
              "name": "only_in_alt_mode",
              "types": [
                "boolean?"
              ],
              "desc": "If this should only be rendered in alt mode. Defaults to false."
            }
          ],
          "takes_table": true
        },
        {
          "name": "draw_polygon",
          "desc": "Create a triangle mesh defined by a triangle strip.",
          "params": [
            {
              "name": "color",
              "types": [
                "Color"
              ],
              "desc": ""
            },
            {
              "name": "vertices",
              "types": [
                "array[ScriptRenderVertexTarget]"
              ],
              "desc": ""
            },
            {
              "name": "target",
              "types": [
                "MapPosition",
                "LuaEntity?"
              ],
              "desc": "Acts like an offset applied to all vertices that are not set to an entity."
            },
            {
              "name": "target_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if target is a LuaEntity."
            },
            {
              "name": "orientation",
              "types": [
                "RealOrientation?"
              ],
              "desc": "The orientation applied to all vertices. Default is 0."
            },
            {
              "name": "orientation_target",
              "types": [
                "MapPosition",
                "LuaEntity?"
              ],
              "desc": "If given, the vertices (that are not set to an entity) rotate so that it faces this target. Note that orientation is still applied."
            },
            {
              "name": "orientation_target_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if orientation_target is a LuaEntity."
            },
            {
              "name": "use_target_orientation",
              "types": [
                "boolean?"
              ],
              "desc": "Only used if orientation_target is a LuaEntity."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "time_to_live",
              "types": [
                "uint?"
              ],
              "desc": "In ticks. Defaults to living forever."
            },
            {
              "name": "forces",
              "types": [
                "array[ForceIdentification]?"
              ],
              "desc": "The forces that this object is rendered to. Passing nil or an empty table will render it to all forces."
            },
            {
              "name": "players",
              "types": [
                "array[PlayerIdentification]?"
              ],
              "desc": "The players that this object is rendered to. Passing nil or an empty table will render it to all players."
            },
            {
              "name": "visible",
              "types": [
                "boolean?"
              ],
              "desc": "If this is rendered to anyone at all. Defaults to true."
            },
            {
              "name": "draw_on_ground",
              "types": [
                "boolean?"
              ],
              "desc": "If this should be drawn below sprites and entities."
            },
            {
              "name": "only_in_alt_mode",
              "types": [
                "boolean?"
              ],
              "desc": "If this should only be rendered in alt mode. Defaults to false."
            }
          ],
          "takes_table": true
        },
        {
          "name": "draw_sprite",
          "desc": "Create a sprite.",
          "params": [
            {
              "name": "sprite",
              "types": [
                "SpritePath"
              ],
              "desc": ""
            },
            {
              "name": "orientation",
              "types": [
                "RealOrientation?"
              ],
              "desc": "The orientation of the sprite. Default is 0."
            },
            {
              "name": "x_scale",
              "types": [
                "double?"
              ],
              "desc": "Horizontal scale of the sprite. Default is 1."
            },
            {
              "name": "y_scale",
              "types": [
                "double?"
              ],
              "desc": "Vertical scale of the sprite. Default is 1."
            },
            {
              "name": "tint",
              "types": [
                "Color?"
              ],
              "desc": ""
            },
            {
              "name": "render_layer",
              "types": [
                "RenderLayer?"
              ],
              "desc": "Render layer of the sprite. Defaults to \"arrow\"."
            },
            {
              "name": "orientation_target",
              "types": [
                "MapPosition",
                "LuaEntity?"
              ],
              "desc": "If given, the sprite rotates so that it faces this target. Note that orientation is still applied to the sprite."
            },
            {
              "name": "orientation_target_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if orientation_target is a LuaEntity."
            },
            {
              "name": "use_target_orientation",
              "types": [
                "boolean?"
              ],
              "desc": "Only used if orientation_target is a LuaEntity."
            },
            {
              "name": "oriented_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Offsets the center of the sprite if orientation_target is given. This offset will rotate together with the sprite."
            },
            {
              "name": "target",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": "Center of the sprite."
            },
            {
              "name": "target_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if target is a LuaEntity."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "time_to_live",
              "types": [
                "uint?"
              ],
              "desc": "In ticks. Defaults to living forever."
            },
            {
              "name": "forces",
              "types": [
                "array[ForceIdentification]?"
              ],
              "desc": "The forces that this object is rendered to. Passing nil or an empty table will render it to all forces."
            },
            {
              "name": "players",
              "types": [
                "array[PlayerIdentification]?"
              ],
              "desc": "The players that this object is rendered to. Passing nil or an empty table will render it to all players."
            },
            {
              "name": "visible",
              "types": [
                "boolean?"
              ],
              "desc": "If this is rendered to anyone at all. Defaults to true."
            },
            {
              "name": "only_in_alt_mode",
              "types": [
                "boolean?"
              ],
              "desc": "If this should only be rendered in alt mode. Defaults to false."
            }
          ],
          "takes_table": true
        },
        {
          "name": "draw_light",
          "desc": "Create a light.",
          "params": [
            {
              "name": "sprite",
              "types": [
                "SpritePath"
              ],
              "desc": ""
            },
            {
              "name": "orientation",
              "types": [
                "RealOrientation?"
              ],
              "desc": "The orientation of the light. Default is 0."
            },
            {
              "name": "scale",
              "types": [
                "float?"
              ],
              "desc": "Default is 1."
            },
            {
              "name": "intensity",
              "types": [
                "float?"
              ],
              "desc": "Default is 1."
            },
            {
              "name": "minimum_darkness",
              "types": [
                "float?"
              ],
              "desc": "The minimum darkness at which this light is rendered. Default is 0."
            },
            {
              "name": "oriented",
              "types": [
                "boolean?"
              ],
              "desc": "If this light has the same orientation as the entity target, default is false. Note that orientation is still applied to the sprite."
            },
            {
              "name": "color",
              "types": [
                "Color?"
              ],
              "desc": "Defaults to white (no tint)."
            },
            {
              "name": "target",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": "Center of the light."
            },
            {
              "name": "target_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if target is a LuaEntity."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "time_to_live",
              "types": [
                "uint?"
              ],
              "desc": "In ticks. Defaults to living forever."
            },
            {
              "name": "forces",
              "types": [
                "array[ForceIdentification]?"
              ],
              "desc": "The forces that this object is rendered to. Passing nil or an empty table will render it to all forces."
            },
            {
              "name": "players",
              "types": [
                "array[PlayerIdentification]?"
              ],
              "desc": "The players that this object is rendered to. Passing nil or an empty table will render it to all players."
            },
            {
              "name": "visible",
              "types": [
                "boolean?"
              ],
              "desc": "If this is rendered to anyone at all. Defaults to true."
            },
            {
              "name": "only_in_alt_mode",
              "types": [
                "boolean?"
              ],
              "desc": "If this should only be rendered in alt mode. Defaults to false."
            }
          ],
          "takes_table": true
        },
        {
          "name": "draw_animation",
          "desc": "Create an animation.",
          "params": [
            {
              "name": "animation",
              "types": [
                "string"
              ],
              "desc": "Name of an AnimationPrototype."
            },
            {
              "name": "orientation",
              "types": [
                "RealOrientation?"
              ],
              "desc": "The orientation of the animation. Default is 0."
            },
            {
              "name": "x_scale",
              "types": [
                "double?"
              ],
              "desc": "Horizontal scale of the animation. Default is 1."
            },
            {
              "name": "y_scale",
              "types": [
                "double?"
              ],
              "desc": "Vertical scale of the animation. Default is 1."
            },
            {
              "name": "tint",
              "types": [
                "Color?"
              ],
              "desc": ""
            },
            {
              "name": "render_layer",
              "types": [
                "RenderLayer?"
              ],
              "desc": "Render layer of the animation. Defaults to \"arrow\"."
            },
            {
              "name": "animation_speed",
              "types": [
                "double?"
              ],
              "desc": "How many frames the animation goes forward per tick. Default is 1."
            },
            {
              "name": "animation_offset",
              "types": [
                "double?"
              ],
              "desc": "Offset of the animation in frames. Default is 0."
            },
            {
              "name": "orientation_target",
              "types": [
                "MapPosition",
                "LuaEntity?"
              ],
              "desc": "If given, the animation rotates so that it faces this target. Note that orientation is still applied to the animation."
            },
            {
              "name": "orientation_target_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if orientation_target is a LuaEntity."
            },
            {
              "name": "use_target_orientation",
              "types": [
                "boolean?"
              ],
              "desc": "Only used if orientation_target is a LuaEntity."
            },
            {
              "name": "oriented_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Offsets the center of the animation if orientation_target is given. This offset will rotate together with the animation."
            },
            {
              "name": "target",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": "Center of the animation."
            },
            {
              "name": "target_offset",
              "types": [
                "Vector?"
              ],
              "desc": "Only used if target is a LuaEntity."
            },
            {
              "name": "surface",
              "types": [
                "SurfaceIdentification"
              ],
              "desc": ""
            },
            {
              "name": "time_to_live",
              "types": [
                "uint?"
              ],
              "desc": "In ticks. Defaults to living forever."
            },
            {
              "name": "forces",
              "types": [
                "array[ForceIdentification]?"
              ],
              "desc": "The forces that this object is rendered to. Passing nil or an empty table will render it to all forces."
            },
            {
              "name": "players",
              "types": [
                "array[PlayerIdentification]?"
              ],
              "desc": "The players that this object is rendered to. Passing nil or an empty table will render it to all players."
            },
            {
              "name": "visible",
              "types": [
                "boolean?"
              ],
              "desc": "If this is rendered to anyone at all. Defaults to true."
            },
            {
              "name": "only_in_alt_mode",
              "types": [
                "boolean?"
              ],
              "desc": "If this should only be rendered in alt mode. Defaults to false."
            }
          ],
          "takes_table": true
        },
        {
          "name": "destroy",
          "desc": "Destroy the object with the given id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_font_valid",
          "desc": "Does a font with this name exist?",
          "params": [
            {
              "name": "font_name",
              "types": [
                "string"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "is_valid",
          "desc": "Does a valid object with this id exist?",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_all_ids",
          "desc": "Gets an array of all valid object ids.",
          "params": [
            {
              "name": "mod_name",
              "types": [
                "string?"
              ],
              "desc": "If provided, get only the render objects created by this mod. An empty string (\"\") refers to all objects not belonging to a mod, such as those created using console commands."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear",
          "desc": "Destroys all render objects.",
          "params": [
            {
              "name": "mod_name",
              "types": [
                "string?"
              ],
              "desc": "If provided, only the render objects created by this mod are destroyed. An empty string (\"\") refers to all objects not belonging to a mod, such as those created using console commands."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_type",
          "desc": "Gets the type of the given object.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "bring_to_front",
          "desc": "Reorder this object so that it is drawn in front of the already existing objects.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_surface",
          "desc": "The surface the object with this id is rendered on.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_time_to_live",
          "desc": "Get the time to live of the object with this id. This will be 0 if the object does not expire.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_time_to_live",
          "desc": "Set the time to live of the object with this id. Set to 0 if the object should not expire.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "time_to_live",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_forces",
          "desc": "Get the forces that the object with this id is rendered to or nil if visible to all forces.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_forces",
          "desc": "Set the forces that the object with this id is rendered to.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "forces",
              "types": [
                "array[ForceIdentification]"
              ],
              "desc": "Providing an empty array will set the object to be visible to all forces."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_players",
          "desc": "Get the players that the object with this id is rendered to or nil if visible to all players.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_players",
          "desc": "Set the players that the object with this id is rendered to.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "players",
              "types": [
                "array[PlayerIdentification]"
              ],
              "desc": "Providing an empty array will set the object to be visible to all players."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_visible",
          "desc": "Get whether this is rendered to anyone at all.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_visible",
          "desc": "Set whether this is rendered to anyone at all.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "visible",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_draw_on_ground",
          "desc": "Get whether this is being drawn on the ground, under most entities and sprites.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_draw_on_ground",
          "desc": "Set whether this is being drawn on the ground, under most entities and sprites.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "draw_on_ground",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_only_in_alt_mode",
          "desc": "Get whether this is only rendered in alt-mode.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_only_in_alt_mode",
          "desc": "Set whether this is only rendered in alt-mode.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "only_in_alt_mode",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_use_target_orientation",
          "desc": "Get whether this uses the target orientation.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_use_target_orientation",
          "desc": "Set whether this uses the target orientation.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "use_target_orientation",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_color",
          "desc": "Get the color or tint of the object with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_color",
          "desc": "Set the color or tint of the object with this id. Does nothing if this object does not support color.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "color",
              "types": [
                "Color"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_width",
          "desc": "Get the width of the object with this id. Value is in pixels (32 per tile).",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_width",
          "desc": "Set the width of the object with this id. Does nothing if this object does not support width. Value is in pixels (32 per tile).",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "width",
              "types": [
                "float"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_from",
          "desc": "Get from where the line with this id is drawn.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_from",
          "desc": "Set from where the line with this id is drawn. Does nothing if the object is not a line.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "from",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "from_offset",
              "types": [
                "Vector?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_to",
          "desc": "Get where the line with this id is drawn to.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_to",
          "desc": "Set where the line with this id is drawn to. Does nothing if this object is not a line.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "to",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "to_offset",
              "types": [
                "Vector?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_dash_length",
          "desc": "Get the dash length of the line with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_dash_length",
          "desc": "Set the dash length of the line with this id. Does nothing if this object is not a line.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "dash_length",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_gap_length",
          "desc": "Get the length of the gaps in the line with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_gap_length",
          "desc": "Set the length of the gaps in the line with this id. Does nothing if this object is not a line.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "gap_length",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_dashes",
          "desc": "Set the length of the dashes and the length of the gaps in the line with this id. Does nothing if this object is not a line.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "dash_length",
              "types": [
                "double"
              ],
              "desc": ""
            },
            {
              "name": "gap_length",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_target",
          "desc": "Get where the object with this id is drawn.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_target",
          "desc": "Set where the object with this id is drawn. Does nothing if this object does not support target.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "target",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "target_offset",
              "types": [
                "Vector?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_orientation",
          "desc": "Get the orientation of the object with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_orientation",
          "desc": "Set the orientation of the object with this id. Does nothing if this object is not a text, polygon, sprite, light or animation.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "orientation",
              "types": [
                "RealOrientation"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_scale",
          "desc": "Get the scale of the text or light with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_scale",
          "desc": "Set the scale of the text or light with this id. Does nothing if this object is not a text or light.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "scale",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_text",
          "desc": "Get the text that is displayed by the text with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_text",
          "desc": "Set the text that is displayed by the text with this id. Does nothing if this object is not a text.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "text",
              "types": [
                "LocalisedString"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_font",
          "desc": "Get the font of the text with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_font",
          "desc": "Set the font of the text with this id. Does nothing if this object is not a text.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "font",
              "types": [
                "string"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_alignment",
          "desc": "Get the alignment of the text with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_alignment",
          "desc": "Set the alignment of the text with this id. Does nothing if this object is not a text.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "alignment",
              "types": [
                "TextAlign"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_vertical_alignment",
          "desc": "Get the vertical alignment of the text with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_vertical_alignment",
          "desc": "Set the vertical alignment of the text with this id. Does nothing if this object is not a text.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "alignment",
              "types": [
                "VerticalTextAlign"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_scale_with_zoom",
          "desc": "Get if the text with this id scales with player zoom.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_scale_with_zoom",
          "desc": "Set if the text with this id scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes. Does nothing if this object is not a text.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "scale_with_zoom",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_use_rich_text",
          "desc": "Get if the text with this id parses rich text tags.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_use_rich_text",
          "desc": "Set if the text with this id parses rich text tags.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "use_rich_text",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_filled",
          "desc": "Get if the circle or rectangle with this id is filled.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_filled",
          "desc": "Set if the circle or rectangle with this id is filled. Does nothing if this object is not a circle or rectangle.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "filled",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_radius",
          "desc": "Get the radius of the circle with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_radius",
          "desc": "Set the radius of the circle with this id. Does nothing if this object is not a circle.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "radius",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_left_top",
          "desc": "Get where top left corner of the rectangle with this id is drawn.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_left_top",
          "desc": "Set where top left corner of the rectangle with this id is drawn. Does nothing if this object is not a rectangle.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "left_top",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "left_top_offset",
              "types": [
                "Vector?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_right_bottom",
          "desc": "Get where bottom right corner of the rectangle with this id is drawn.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_right_bottom",
          "desc": "Set where top bottom right of the rectangle with this id is drawn. Does nothing if this object is not a rectangle.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "right_bottom",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "right_bottom_offset",
              "types": [
                "Vector?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_corners",
          "desc": "Set the corners of the rectangle with this id. Does nothing if this object is not a rectangle.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "left_top",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "left_top_offset",
              "types": [
                "Vector"
              ],
              "desc": ""
            },
            {
              "name": "right_bottom",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "right_bottom_offset",
              "types": [
                "Vector"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_max_radius",
          "desc": "Get the radius of the outer edge of the arc with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_max_radius",
          "desc": "Set the radius of the outer edge of the arc with this id. Does nothing if this object is not a arc.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "max_radius",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_min_radius",
          "desc": "Get the radius of the inner edge of the arc with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_min_radius",
          "desc": "Set the radius of the inner edge of the arc with this id. Does nothing if this object is not a arc.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "min_radius",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_start_angle",
          "desc": "Get where the arc with this id starts.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_start_angle",
          "desc": "Set where the arc with this id starts. Does nothing if this object is not a arc.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "start_angle",
              "types": [
                "float"
              ],
              "desc": "angle in radian"
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_angle",
          "desc": "Get the angle of the arc with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_angle",
          "desc": "Set the angle of the arc with this id. Does nothing if this object is not a arc.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "angle",
              "types": [
                "float"
              ],
              "desc": "angle in radian"
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_vertices",
          "desc": "Get the vertices of the polygon with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_vertices",
          "desc": "Set the vertices of the polygon with this id. Does nothing if this object is not a polygon.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "vertices",
              "types": [
                "array[ScriptRenderVertexTarget]"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_sprite",
          "desc": "Get the sprite of the sprite or light with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_sprite",
          "desc": "Set the sprite of the sprite or light with this id. Does nothing if this object is not a sprite or light.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "sprite",
              "types": [
                "SpritePath"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_x_scale",
          "desc": "Get the horizontal scale of the sprite or animation with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_x_scale",
          "desc": "Set the horizontal scale of the sprite or animation with this id. Does nothing if this object is not a sprite or animation.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "x_scale",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_y_scale",
          "desc": "Get the vertical scale of the sprite or animation with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_y_scale",
          "desc": "Set the vertical scale of the sprite or animation with this id. Does nothing if this object is not a sprite or animation.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "y_scale",
              "types": [
                "double"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_render_layer",
          "desc": "Get the render layer of the sprite or animation with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_render_layer",
          "desc": "Set the render layer of the sprite or animation with this id. Does nothing if this object is not a sprite or animation.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "render_layer",
              "types": [
                "RenderLayer"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_orientation_target",
          "desc": "The object rotates so that it faces this target. Note that orientation is still applied to the object. Get the orientation_target of the object with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_orientation_target",
          "desc": "The object rotates so that it faces this target. Note that orientation is still applied to the object. Set the orientation_target of the object with this id. Does nothing if this object is not a polygon, sprite, or animation. Set to nil if the object should not have an orientation_target.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "orientation_target",
              "types": [
                "MapPosition",
                "LuaEntity"
              ],
              "desc": ""
            },
            {
              "name": "orientation_target_offset",
              "types": [
                "Vector?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_oriented_offset",
          "desc": "Offsets the center of the sprite or animation if orientation_target is given. This offset will rotate together with the sprite or animation. Get the oriented_offset of the sprite or animation with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_oriented_offset",
          "desc": "Offsets the center of the sprite or animation if orientation_target is given. This offset will rotate together with the sprite or animation. Set the oriented_offset of the sprite or animation with this id. Does nothing if this object is not a sprite or animation.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "oriented_offset",
              "types": [
                "Vector"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_intensity",
          "desc": "Get the intensity of the light with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_intensity",
          "desc": "Set the intensity of the light with this id. Does nothing if this object is not a light.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "intensity",
              "types": [
                "float"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_minimum_darkness",
          "desc": "Get the minimum darkness at which the light with this id is rendered.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_minimum_darkness",
          "desc": "Set the minimum darkness at which the light with this id is rendered. Does nothing if this object is not a light.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "minimum_darkness",
              "types": [
                "float"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_oriented",
          "desc": "Get if the light with this id is rendered has the same orientation as the target entity. Note that orientation is still applied to the sprite.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_oriented",
          "desc": "Set if the light with this id is rendered has the same orientation as the target entity. Does nothing if this object is not a light. Note that orientation is still applied to the sprite.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "oriented",
              "types": [
                "boolean"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_animation",
          "desc": "Get the animation prototype name of the animation with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_animation",
          "desc": "Set the animation prototype name of the animation with this id. Does nothing if this object is not an animation.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "animation",
              "types": [
                "string"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_animation_speed",
          "desc": "Get the animation speed of the animation with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_animation_speed",
          "desc": "Set the animation speed of the animation with this id. Does nothing if this object is not an animation.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "animation_speed",
              "types": [
                "double"
              ],
              "desc": "Animation speed in frames per tick."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_animation_offset",
          "desc": "Get the animation offset of the animation with this id.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_animation_offset",
          "desc": "Set the animation offset of the animation with this id. Does nothing if this object is not an animation.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint64"
              ],
              "desc": ""
            },
            {
              "name": "animation_offset",
              "types": [
                "double"
              ],
              "desc": "Animation offset in frames."
            }
          ],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "This object's name."
        }
      ]
    },
    {
      "name": "LuaResourceCategoryPrototype",
      "extends": "",
      "desc": "Prototype of a resource category.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaRoboportControlBehavior",
      "extends": "",
      "desc": "Control behavior for roboports.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "read_logistics",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if the roboport should report the logistics network content to the circuit network."
        },
        {
          "name": "read_robot_stats",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if the roboport should report the robot statistics to the circuit network."
        },
        {
          "name": "available_logistic_output_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "total_logistic_output_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "available_construction_output_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "total_construction_output_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaSettings",
      "extends": "",
      "desc": "Object containing mod settings of three distinct types: startup, global, and player. An instance of LuaSettings is available through the global object named settings.",
      "methods": [
        {
          "name": "get_player_settings",
          "desc": "Gets the current per-player settings for the given player, indexed by prototype name. Returns the same structure as LuaPlayer::mod_settings. This table becomes invalid if its associated player does.",
          "params": [
            {
              "name": "player",
              "types": [
                "PlayerIdentification"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "startup",
          "_type": "LuaCustomTable[string \u2192 ModSetting]",
          "permissions": "Read",
          "description": "The startup mod settings, indexed by prototype name."
        },
        {
          "name": "global",
          "_type": "LuaCustomTable[string \u2192 ModSetting]",
          "permissions": "Read",
          "description": "The current global mod settings, indexed by prototype name."
        },
        {
          "name": "player",
          "_type": "LuaCustomTable[string \u2192 ModSetting]",
          "permissions": "Read",
          "description": "The default player mod settings for this map, indexed by prototype name."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "This object's name."
        }
      ]
    },
    {
      "name": "LuaShortcutPrototype",
      "extends": "",
      "desc": "Prototype of a shortcut.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "action",
          "_type": "string",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "item_to_spawn",
          "_type": "LuaItemPrototype|nil",
          "permissions": "Read",
          "description": "The item to create when this shortcut is used, if any."
        },
        {
          "name": "technology_to_unlock",
          "_type": "LuaTechnologyPrototype|nil",
          "permissions": "Read",
          "description": "The technology that needs to be researched once (in any save) for this shortcut to be unlocked (in all saves)."
        },
        {
          "name": "toggleable",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "associated_control_input",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The control input that is associated with this shortcut, if any."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaStorageTankControlBehavior",
      "extends": "",
      "desc": "Control behavior for storage tanks.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaStyle",
      "extends": "",
      "desc": "Style of a GUI element. All of the attributes listed here may be nil if not available for a particular GUI element.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "gui",
          "_type": "LuaGui",
          "permissions": "Read",
          "description": "Gui of the LuaGuiElement of this style."
        },
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this style."
        },
        {
          "name": "minimal_width",
          "_type": "int",
          "permissions": "Read/Write",
          "description": "Minimal width ensures, that the widget will never be smaller than than that size. It can't be squashed to be smaller."
        },
        {
          "name": "maximal_width",
          "_type": "int",
          "permissions": "Read/Write",
          "description": "Maximal width ensures, that the widget will never be bigger than than that size. It can't be stretched to be bigger."
        },
        {
          "name": "minimal_height",
          "_type": "int",
          "permissions": "Read/Write",
          "description": "Minimal height ensures, that the widget will never be smaller than than that size. It can't be squashed to be smaller."
        },
        {
          "name": "maximal_height",
          "_type": "int",
          "permissions": "Read/Write",
          "description": "Maximal height ensures, that the widget will never be bigger than than that size. It can't be stretched to be bigger."
        },
        {
          "name": "natural_width",
          "_type": "int",
          "permissions": "Read/Write",
          "description": "Natural width specifies the width of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger size."
        },
        {
          "name": "natural_height",
          "_type": "int",
          "permissions": "Read/Write",
          "description": "Natural height specifies the height of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger size."
        },
        {
          "name": "top_padding",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "right_padding",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "bottom_padding",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "left_padding",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "top_margin",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "right_margin",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "bottom_margin",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "left_margin",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "horizontal_align",
          "_type": "\"left\"|\"center\"|\"right\"|nil",
          "permissions": "Read/Write",
          "description": "Horizontal align of the inner content of the widget, if any."
        },
        {
          "name": "vertical_align",
          "_type": "\"top\"|\"center\"|\"bottom\"|nil",
          "permissions": "Read/Write",
          "description": "Vertical align of the inner content of the widget, if any."
        },
        {
          "name": "font_color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "font",
          "_type": "string",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "top_cell_padding",
          "_type": "int",
          "permissions": "Read/Write",
          "description": "Space between the table cell contents top and border."
        },
        {
          "name": "right_cell_padding",
          "_type": "int",
          "permissions": "Read/Write",
          "description": "Space between the table cell contents right and border."
        },
        {
          "name": "bottom_cell_padding",
          "_type": "int",
          "permissions": "Read/Write",
          "description": "Space between the table cell contents bottom and border."
        },
        {
          "name": "left_cell_padding",
          "_type": "int",
          "permissions": "Read/Write",
          "description": "Space between the table cell contents left and border."
        },
        {
          "name": "horizontally_stretchable",
          "_type": "boolean|nil",
          "permissions": "Read/Write",
          "description": "Whether the GUI element stretches its size horizontally to other elements. nil if this element does not support stretching."
        },
        {
          "name": "vertically_stretchable",
          "_type": "boolean|nil",
          "permissions": "Read/Write",
          "description": "Whether the GUI element stretches its size vertically to other elements. nil if this element does not support stretching."
        },
        {
          "name": "horizontally_squashable",
          "_type": "boolean|nil",
          "permissions": "Read/Write",
          "description": "Whether the GUI element can be squashed (by maximal width of some parent element) horizontally. nil if this element does not support squashing. This is mainly meant to be used for scroll-pane The default value is false."
        },
        {
          "name": "vertically_squashable",
          "_type": "boolean|nil",
          "permissions": "Read/Write",
          "description": "Whether the GUI element can be squashed (by maximal height of some parent element) vertically. nil if this element does not support squashing. This is mainly meant to be used for scroll-pane The default (parent) value for scroll pane is true, false otherwise."
        },
        {
          "name": "rich_text_setting",
          "_type": "defines.rich_text_setting",
          "permissions": "Read/Write",
          "description": "How this GUI element handles rich text."
        },
        {
          "name": "hovered_font_color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "clicked_font_color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "disabled_font_color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "pie_progress_color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "clicked_vertical_offset",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "selected_font_color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "selected_hovered_font_color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "selected_clicked_font_color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "strikethrough_color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "draw_grayscale_picture",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "horizontal_spacing",
          "_type": "int",
          "permissions": "Read/Write",
          "description": "Horizontal space between individual cells."
        },
        {
          "name": "vertical_spacing",
          "_type": "int",
          "permissions": "Read/Write",
          "description": "Vertical space between individual cells."
        },
        {
          "name": "use_header_filler",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "bar_width",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "column_alignments",
          "_type": "LuaCustomTable[uint \u2192 Alignment]",
          "permissions": "Read",
          "description": "Array containing the alignment for every column of this table element. Even though this property is marked as read-only, the alignment can be changed by indexing the LuaCustomTable, like so:"
        },
        {
          "name": "single_line",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "extra_top_padding_when_activated",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "extra_bottom_padding_when_activated",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "extra_left_padding_when_activated",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "extra_right_padding_when_activated",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "extra_top_margin_when_activated",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "extra_bottom_margin_when_activated",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "extra_left_margin_when_activated",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "extra_right_margin_when_activated",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "stretch_image_to_widget_size",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "badge_font",
          "_type": "string",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "badge_horizontal_spacing",
          "_type": "int",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "default_badge_font_color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "selected_badge_font_color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "disabled_badge_font_color",
          "_type": "Color",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "width",
          "_type": "int",
          "permissions": "Write",
          "description": "Sets both minimal and maximal width to the given value."
        },
        {
          "name": "height",
          "_type": "int",
          "permissions": "Write",
          "description": "Sets both minimal and maximal height to the given value."
        },
        {
          "name": "size",
          "_type": "int|array[int]",
          "permissions": "Write",
          "description": "Sets both width and height to the given value. Also accepts an array with two values, setting width to the first and height to the second one."
        },
        {
          "name": "padding",
          "_type": "int|array[int]",
          "permissions": "Write",
          "description": "Sets top/right/bottom/left paddings to this value. An array with two values sets top/bottom padding to the first value and left/right padding to the second value. An array with four values sets top, right, bottom, left padding respectively."
        },
        {
          "name": "margin",
          "_type": "int|array[int]",
          "permissions": "Write",
          "description": "Sets top/right/bottom/left margins to this value. An array with two values sets top/bottom margin to the first value and left/right margin to the second value. An array with four values sets top, right, bottom, left margin respectively."
        },
        {
          "name": "cell_padding",
          "_type": "int",
          "permissions": "Write",
          "description": "Space between the table cell contents and border. Sets top/right/bottom/left cell paddings to this value."
        },
        {
          "name": "extra_padding_when_activated",
          "_type": "int|array[int]",
          "permissions": "Write",
          "description": "Sets extra_top/right/bottom/left_padding_when_activated to this value. An array with two values sets top/bottom padding to the first value and left/right padding to the second value. An array with four values sets top, right, bottom, left padding respectively."
        },
        {
          "name": "extra_margin_when_activated",
          "_type": "int|array[int]",
          "permissions": "Write",
          "description": "Sets extra_top/right/bottom/left_margin_when_activated to this value. An array with two values sets top/bottom margin to the first value and left/right margin to the second value. An array with four values sets top, right, bottom, left margin respectively."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaSurface",
      "extends": "",
      "desc": "A \"domain\" of the world. Surfaces can only be created and deleted through the API. Surfaces are uniquely identified by their name. Every game contains at least the surface \"nauvis\".",
      "methods": [
        {
          "name": "get_pollution",
          "desc": "Get the pollution for a given position.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "can_place_entity",
          "desc": "Check for collisions with terrain or other entities.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "Name of the entity prototype to check."
            },
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Where the entity would be placed."
            },
            {
              "name": "direction",
              "types": [
                "defines.direction?"
              ],
              "desc": "Direction of the placed entity. Defaults to north."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "The force that would place the entity. Defaults to the \"neutral\" force."
            },
            {
              "name": "build_check_type",
              "types": [
                "defines.build_check_type?"
              ],
              "desc": "Which type of check should be carried out. Defaults to ghost_revive."
            },
            {
              "name": "forced",
              "types": [
                "boolean?"
              ],
              "desc": "If true, entities that can be marked for deconstruction are ignored. Only used if build_check_type is either manual_ghost, script_ghost or blueprint_ghost. Defaults to false."
            },
            {
              "name": "inner_name",
              "types": [
                "string?"
              ],
              "desc": "The prototype name of the entity contained in the ghost. Only used if name is entity-ghost."
            }
          ],
          "takes_table": true
        },
        {
          "name": "can_fast_replace",
          "desc": "If there exists an entity at the given location that can be fast-replaced with the given entity parameters.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "Name of the entity to check."
            },
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Where the entity would be placed."
            },
            {
              "name": "direction",
              "types": [
                "defines.direction?"
              ],
              "desc": "Direction the entity would be placed. Defaults to north."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "The force that would place the entity. Defaults to the \"neutral\" force."
            }
          ],
          "takes_table": true
        },
        {
          "name": "find_entity",
          "desc": "Find an entity of the given name at the given position. This checks both the exact position and the bounding box of the entity.",
          "params": [
            {
              "name": "entity",
              "types": [
                "string"
              ],
              "desc": "Name of the entity to look for."
            },
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Coordinates to look at."
            }
          ],
          "takes_table": false
        },
        {
          "name": "find_entities",
          "desc": "Find entities in a given area.",
          "params": [
            {
              "name": "area",
              "types": [
                "BoundingBox?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "find_entities_filtered",
          "desc": "Find all entities of the given type or name in the given area.",
          "params": [
            {
              "name": "area",
              "types": [
                "BoundingBox?"
              ],
              "desc": ""
            },
            {
              "name": "position",
              "types": [
                "MapPosition?"
              ],
              "desc": "Has precedence over area field."
            },
            {
              "name": "radius",
              "types": [
                "double?"
              ],
              "desc": ""
            },
            {
              "name": "name",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": ""
            },
            {
              "name": "type",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": ""
            },
            {
              "name": "ghost_name",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": ""
            },
            {
              "name": "ghost_type",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": ""
            },
            {
              "name": "direction",
              "types": [
                "defines.direction",
                "array[defines.direction]?"
              ],
              "desc": ""
            },
            {
              "name": "collision_mask",
              "types": [
                "CollisionMaskLayer",
                "array[CollisionMaskLayer]?"
              ],
              "desc": ""
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification",
                "array[ForceIdentification]?"
              ],
              "desc": ""
            },
            {
              "name": "to_be_deconstructed",
              "types": [
                "boolean?"
              ],
              "desc": ""
            },
            {
              "name": "to_be_upgraded",
              "types": [
                "boolean?"
              ],
              "desc": ""
            },
            {
              "name": "limit",
              "types": [
                "uint?"
              ],
              "desc": ""
            },
            {
              "name": "is_military_target",
              "types": [
                "boolean?"
              ],
              "desc": ""
            },
            {
              "name": "has_item_inside",
              "types": [
                "LuaItemPrototype?"
              ],
              "desc": ""
            },
            {
              "name": "invert",
              "types": [
                "boolean?"
              ],
              "desc": "Whether the filters should be inverted."
            }
          ],
          "takes_table": true
        },
        {
          "name": "find_tiles_filtered",
          "desc": "Find all tiles of the given name in the given area.",
          "params": [
            {
              "name": "area",
              "types": [
                "BoundingBox?"
              ],
              "desc": ""
            },
            {
              "name": "position",
              "types": [
                "MapPosition?"
              ],
              "desc": "Ignored if not given with radius."
            },
            {
              "name": "radius",
              "types": [
                "double?"
              ],
              "desc": "If given with position, will return all entities within the radius of the position."
            },
            {
              "name": "name",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": ""
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification",
                "array[ForceIdentification]?"
              ],
              "desc": ""
            },
            {
              "name": "limit",
              "types": [
                "uint?"
              ],
              "desc": ""
            },
            {
              "name": "has_hidden_tile",
              "types": [
                "boolean?"
              ],
              "desc": ""
            },
            {
              "name": "has_tile_ghost",
              "types": [
                "boolean?"
              ],
              "desc": "Can be further filtered by supplying a force filter."
            },
            {
              "name": "to_be_deconstructed",
              "types": [
                "boolean?"
              ],
              "desc": "Can be further filtered by supplying a force filter."
            },
            {
              "name": "collision_mask",
              "types": [
                "CollisionMaskLayer",
                "array[CollisionMaskLayer]?"
              ],
              "desc": ""
            },
            {
              "name": "invert",
              "types": [
                "boolean?"
              ],
              "desc": "Whether the filters should be inverted."
            }
          ],
          "takes_table": true
        },
        {
          "name": "count_entities_filtered",
          "desc": "Count entities of given type or name in a given area. Works just like LuaSurface::find_entities_filtered, except this only returns the count. As it doesn't construct all the wrapper objects, this is more efficient if one is only interested in the number of entities.",
          "params": [
            {
              "name": "area",
              "types": [
                "BoundingBox?"
              ],
              "desc": ""
            },
            {
              "name": "position",
              "types": [
                "MapPosition?"
              ],
              "desc": ""
            },
            {
              "name": "radius",
              "types": [
                "double?"
              ],
              "desc": "If given with position, will count all entities within the radius of the position."
            },
            {
              "name": "name",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": ""
            },
            {
              "name": "type",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": ""
            },
            {
              "name": "ghost_name",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": ""
            },
            {
              "name": "ghost_type",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": ""
            },
            {
              "name": "direction",
              "types": [
                "defines.direction",
                "array[defines.direction]?"
              ],
              "desc": ""
            },
            {
              "name": "collision_mask",
              "types": [
                "CollisionMaskLayer",
                "array[CollisionMaskLayer]?"
              ],
              "desc": ""
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification",
                "array[ForceIdentification]?"
              ],
              "desc": ""
            },
            {
              "name": "to_be_deconstructed",
              "types": [
                "boolean?"
              ],
              "desc": ""
            },
            {
              "name": "to_be_upgraded",
              "types": [
                "boolean?"
              ],
              "desc": ""
            },
            {
              "name": "limit",
              "types": [
                "uint?"
              ],
              "desc": ""
            },
            {
              "name": "is_military_target",
              "types": [
                "boolean?"
              ],
              "desc": ""
            },
            {
              "name": "invert",
              "types": [
                "boolean?"
              ],
              "desc": "Whether the filters should be inverted."
            }
          ],
          "takes_table": true
        },
        {
          "name": "count_tiles_filtered",
          "desc": "Count tiles of a given name in a given area. Works just like LuaSurface::find_tiles_filtered, except this only returns the count. As it doesn't construct all the wrapper objects, this is more efficient if one is only interested in the number of tiles.",
          "params": [
            {
              "name": "area",
              "types": [
                "BoundingBox?"
              ],
              "desc": ""
            },
            {
              "name": "position",
              "types": [
                "MapPosition?"
              ],
              "desc": "Ignored if not given with radius."
            },
            {
              "name": "radius",
              "types": [
                "double?"
              ],
              "desc": "If given with position, will return all entities within the radius of the position."
            },
            {
              "name": "name",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": ""
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification",
                "array[ForceIdentification]?"
              ],
              "desc": ""
            },
            {
              "name": "limit",
              "types": [
                "uint?"
              ],
              "desc": ""
            },
            {
              "name": "has_hidden_tile",
              "types": [
                "boolean?"
              ],
              "desc": ""
            },
            {
              "name": "has_tile_ghost",
              "types": [
                "boolean?"
              ],
              "desc": "Can be further filtered by supplying a force filter."
            },
            {
              "name": "to_be_deconstructed",
              "types": [
                "boolean?"
              ],
              "desc": "Can be further filtered by supplying a force filter."
            },
            {
              "name": "collision_mask",
              "types": [
                "CollisionMaskLayer",
                "array[CollisionMaskLayer]?"
              ],
              "desc": ""
            },
            {
              "name": "invert",
              "types": [
                "boolean?"
              ],
              "desc": "If the filters should be inverted."
            }
          ],
          "takes_table": true
        },
        {
          "name": "find_non_colliding_position",
          "desc": "Find a non-colliding position within a given radius.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "Prototype name of the entity to find a position for. (The bounding box for the collision checking is taken from this prototype.)"
            },
            {
              "name": "center",
              "types": [
                "MapPosition"
              ],
              "desc": "Center of the search area."
            },
            {
              "name": "radius",
              "types": [
                "double"
              ],
              "desc": "Max distance from center to search in. A radius of 0 means an infinitely-large search area."
            },
            {
              "name": "precision",
              "types": [
                "double"
              ],
              "desc": "The step length from the given position as it searches, in tiles. Minimum value is 0.01."
            },
            {
              "name": "force_to_tile_center",
              "types": [
                "boolean?"
              ],
              "desc": "Will only check tile centers. This can be useful when your intent is to place a building at the resulting position, as they must generally be placed at tile centers. Default false."
            }
          ],
          "takes_table": false
        },
        {
          "name": "find_non_colliding_position_in_box",
          "desc": "Find a non-colliding position within a given rectangle.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "Prototype name of the entity to find a position for. (The bounding box for the collision checking is taken from this prototype.)"
            },
            {
              "name": "search_space",
              "types": [
                "BoundingBox"
              ],
              "desc": "The rectangle to search inside."
            },
            {
              "name": "precision",
              "types": [
                "double"
              ],
              "desc": "The step length from the given position as it searches, in tiles. Minimum value is 0.01."
            },
            {
              "name": "force_to_tile_center",
              "types": [
                "boolean?"
              ],
              "desc": "Will only check tile centers. This can be useful when your intent is to place a building at the resulting position, as they must generally be placed at tile centers. Default false."
            }
          ],
          "takes_table": false
        },
        {
          "name": "spill_item_stack",
          "desc": "Spill items on the ground centered at a given location.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Center of the spillage"
            },
            {
              "name": "items",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "Items to spill"
            },
            {
              "name": "enable_looted",
              "types": [
                "boolean?"
              ],
              "desc": "When true, each created item will be flagged with the LuaEntity::to_be_looted flag."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "When provided (and not nil) the items will be marked for deconstruction by this force."
            },
            {
              "name": "allow_belts",
              "types": [
                "boolean?"
              ],
              "desc": "Whether items can be spilled onto belts. Defaults to true."
            }
          ],
          "takes_table": false
        },
        {
          "name": "find_enemy_units",
          "desc": "Find enemy units (entities with type \"unit\") of a given force within an area.",
          "params": [
            {
              "name": "center",
              "types": [
                "MapPosition"
              ],
              "desc": "Center of the search area"
            },
            {
              "name": "radius",
              "types": [
                "double"
              ],
              "desc": "Radius of the circular search area"
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "Force to find enemies of. If not given, uses the player force."
            }
          ],
          "takes_table": false
        },
        {
          "name": "find_units",
          "desc": "Find units (entities with type \"unit\") of a given force and force condition within a given area.",
          "params": [
            {
              "name": "area",
              "types": [
                "BoundingBox"
              ],
              "desc": "Box to find units within."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "Force performing the search."
            },
            {
              "name": "condition",
              "types": [
                "ForceCondition"
              ],
              "desc": "Only forces which meet the condition will be included in the search."
            }
          ],
          "takes_table": true
        },
        {
          "name": "find_nearest_enemy",
          "desc": "Find the enemy military target (military entity) closest to the given position.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Center of the search area."
            },
            {
              "name": "max_distance",
              "types": [
                "double"
              ],
              "desc": "Radius of the circular search area."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "The force the result will be an enemy of. Uses the player force if not specified."
            }
          ],
          "takes_table": true
        },
        {
          "name": "find_nearest_enemy_entity_with_owner",
          "desc": "Find the enemy entity-with-owner closest to the given position.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Center of the search area."
            },
            {
              "name": "max_distance",
              "types": [
                "double"
              ],
              "desc": "Radius of the circular search area."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "The force the result will be an enemy of. Uses the player force if not specified."
            }
          ],
          "takes_table": true
        },
        {
          "name": "set_multi_command",
          "desc": "Give a command to multiple units. This will automatically select suitable units for the task.",
          "params": [
            {
              "name": "command",
              "types": [
                "Command"
              ],
              "desc": ""
            },
            {
              "name": "unit_count",
              "types": [
                "uint"
              ],
              "desc": "Number of units to give the command to."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "Force of the units this command is to be given to. If not specified, uses the enemy force."
            },
            {
              "name": "unit_search_distance",
              "types": [
                "uint?"
              ],
              "desc": "Radius to search for units. The search area is centered on the destination of the command."
            }
          ],
          "takes_table": true
        },
        {
          "name": "create_entity",
          "desc": "Create an entity on this surface.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "The entity prototype name to create."
            },
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Where to create the entity."
            },
            {
              "name": "direction",
              "types": [
                "defines.direction?"
              ],
              "desc": "Desired orientation of the entity after creation."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "Force of the entity, default is enemy."
            },
            {
              "name": "target",
              "types": [
                "LuaEntity",
                "MapPosition?"
              ],
              "desc": "Entity with health for the new entity to target."
            },
            {
              "name": "source",
              "types": [
                "LuaEntity",
                "MapPosition?"
              ],
              "desc": "Source entity. Used for beams, projectiles, and highlight-boxes."
            },
            {
              "name": "fast_replace",
              "types": [
                "boolean?"
              ],
              "desc": "If true, building will attempt to simulate fast-replace building."
            },
            {
              "name": "player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "If given set the last_user to this player. If fast_replace is true simulate fast replace using this player."
            },
            {
              "name": "character",
              "types": [
                "LuaEntity?"
              ],
              "desc": "If fast_replace is true simulate fast replace using this character."
            },
            {
              "name": "spill",
              "types": [
                "boolean?"
              ],
              "desc": "If false while fast_replace is true and player is nil any items from fast-replacing will be deleted instead of dropped on the ground."
            },
            {
              "name": "raise_built",
              "types": [
                "boolean?"
              ],
              "desc": "If true; defines.events.script_raised_built will be fired on successful entity creation."
            },
            {
              "name": "create_build_effect_smoke",
              "types": [
                "boolean?"
              ],
              "desc": "If false, the building effect smoke will not be shown around the new entity."
            },
            {
              "name": "spawn_decorations",
              "types": [
                "boolean?"
              ],
              "desc": "If true, entity types that have spawn_decorations property will apply triggers defined in the property."
            },
            {
              "name": "move_stuck_players",
              "types": [
                "boolean?"
              ],
              "desc": "If true, any characters that are in the way of the entity are teleported out of the way."
            },
            {
              "name": "item",
              "types": [
                "LuaItemStack?"
              ],
              "desc": "If provided, the entity will attempt to pull stored values from this item (for example; creating a spidertron from a previously named and mined spidertron)"
            }
          ],
          "takes_table": true
        },
        {
          "name": "create_trivial_smoke",
          "desc": "The smoke prototype name to create.",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "The smoke prototype name to create."
            },
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Where to create the smoke."
            }
          ],
          "takes_table": true
        },
        {
          "name": "create_particle",
          "desc": "Creates a particle at the given location",
          "params": [
            {
              "name": "name",
              "types": [
                "string"
              ],
              "desc": "The particle name."
            },
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Where to create the particle."
            },
            {
              "name": "movement",
              "types": [
                "Vector"
              ],
              "desc": ""
            },
            {
              "name": "height",
              "types": [
                "float"
              ],
              "desc": ""
            },
            {
              "name": "vertical_speed",
              "types": [
                "float"
              ],
              "desc": ""
            },
            {
              "name": "frame_speed",
              "types": [
                "float"
              ],
              "desc": ""
            }
          ],
          "takes_table": true
        },
        {
          "name": "create_unit_group",
          "desc": "Create a new unit group at a given position.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Initial position of the new unit group."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "Force of the new unit group. Defaults to \"enemy\"."
            }
          ],
          "takes_table": true
        },
        {
          "name": "build_enemy_base",
          "desc": "Send a group to build a new base.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Location of the new base."
            },
            {
              "name": "unit_count",
              "types": [
                "uint"
              ],
              "desc": "Number of biters to send for the base-building task."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "Force the new base will belong to. Defaults to enemy."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_tile",
          "desc": "Get the tile at a given position. An alternative call signature for this method is passing it a single TilePosition.",
          "params": [
            {
              "name": "x",
              "types": [
                "int"
              ],
              "desc": ""
            },
            {
              "name": "y",
              "types": [
                "int"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_tiles",
          "desc": "Set tiles at specified locations. Can automatically correct the edges around modified tiles.",
          "params": [
            {
              "name": "tiles",
              "types": [
                "array[Tile]"
              ],
              "desc": ""
            },
            {
              "name": "correct_tiles",
              "types": [
                "boolean?"
              ],
              "desc": "If false, the correction logic is not applied to the changed tiles. Defaults to true."
            },
            {
              "name": "remove_colliding_entities",
              "types": [
                "boolean",
                "\"abort_on_collision\"?"
              ],
              "desc": "Defaults to true."
            },
            {
              "name": "remove_colliding_decoratives",
              "types": [
                "boolean?"
              ],
              "desc": "Defaults to true."
            },
            {
              "name": "raise_event",
              "types": [
                "boolean?"
              ],
              "desc": "Defaults to false."
            }
          ],
          "takes_table": false
        },
        {
          "name": "pollute",
          "desc": "Spawn pollution at the given position.",
          "params": [
            {
              "name": "source",
              "types": [
                "MapPosition"
              ],
              "desc": "Where to spawn the pollution."
            },
            {
              "name": "amount",
              "types": [
                "double"
              ],
              "desc": "How much pollution to add."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_chunks",
          "desc": "Get an iterator going over every chunk on this surface.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "is_chunk_generated",
          "desc": "Is a given chunk generated?",
          "params": [
            {
              "name": "position",
              "types": [
                "ChunkPosition"
              ],
              "desc": "The chunk's position."
            }
          ],
          "takes_table": false
        },
        {
          "name": "request_to_generate_chunks",
          "desc": "Request that the game's map generator generate chunks at the given position for the given radius on this surface. If the radius is 0, then only the chunk at the given position is generated.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "Where to generate the new chunks."
            },
            {
              "name": "radius",
              "types": [
                "uint?"
              ],
              "desc": "The chunk radius from position to generate new chunks in. Defaults to 0."
            }
          ],
          "takes_table": false
        },
        {
          "name": "force_generate_chunk_requests",
          "desc": "Blocks and generates all chunks that have been requested using all available threads.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "set_chunk_generated_status",
          "desc": "Set generated status of a chunk. Useful when copying chunks.",
          "params": [
            {
              "name": "position",
              "types": [
                "ChunkPosition"
              ],
              "desc": "The chunk's position."
            },
            {
              "name": "status",
              "types": [
                "defines.chunk_generated_status"
              ],
              "desc": "The chunk's new status."
            }
          ],
          "takes_table": false
        },
        {
          "name": "find_logistic_network_by_position",
          "desc": "Find the logistic network that covers a given position.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": ""
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "Force the logistic network should belong to."
            }
          ],
          "takes_table": false
        },
        {
          "name": "find_closest_logistic_network_by_position",
          "desc": "Find the logistic network with a cell closest to a given position.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": ""
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "Force the logistic network should belong to."
            }
          ],
          "takes_table": false
        },
        {
          "name": "find_logistic_networks_by_construction_area",
          "desc": "Finds all of the logistics networks whose construction area intersects with the given position.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": ""
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "Force the logistic networks should belong to."
            }
          ],
          "takes_table": false
        },
        {
          "name": "deconstruct_area",
          "desc": "Place a deconstruction request.",
          "params": [
            {
              "name": "area",
              "types": [
                "BoundingBox"
              ],
              "desc": "The area to mark for deconstruction."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force whose bots should perform the deconstruction."
            },
            {
              "name": "player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "The player to set the last_user to if any."
            },
            {
              "name": "skip_fog_of_war",
              "types": [
                "boolean?"
              ],
              "desc": "If chunks covered by fog-of-war are skipped."
            },
            {
              "name": "item",
              "types": [
                "LuaItemStack?"
              ],
              "desc": "The deconstruction item to use if any."
            }
          ],
          "takes_table": true
        },
        {
          "name": "cancel_deconstruct_area",
          "desc": "Cancel a deconstruction order.",
          "params": [
            {
              "name": "area",
              "types": [
                "BoundingBox"
              ],
              "desc": "The area to cancel deconstruction orders in."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force whose deconstruction orders to cancel."
            },
            {
              "name": "player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "The player to set the last_user to if any."
            },
            {
              "name": "skip_fog_of_war",
              "types": [
                "boolean?"
              ],
              "desc": "If chunks covered by fog-of-war are skipped."
            },
            {
              "name": "item",
              "types": [
                "LuaItemStack?"
              ],
              "desc": "The deconstruction item to use if any."
            }
          ],
          "takes_table": true
        },
        {
          "name": "upgrade_area",
          "desc": "Place an upgrade request.",
          "params": [
            {
              "name": "area",
              "types": [
                "BoundingBox"
              ],
              "desc": "The area to mark for upgrade."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force whose bots should perform the upgrade."
            },
            {
              "name": "player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "The player to set the last_user to if any."
            },
            {
              "name": "skip_fog_of_war",
              "types": [
                "boolean?"
              ],
              "desc": "If chunks covered by fog-of-war are skipped."
            },
            {
              "name": "item",
              "types": [
                "LuaItemStack"
              ],
              "desc": "The upgrade item to use."
            }
          ],
          "takes_table": true
        },
        {
          "name": "cancel_upgrade_area",
          "desc": "Cancel a upgrade order.",
          "params": [
            {
              "name": "area",
              "types": [
                "BoundingBox"
              ],
              "desc": "The area to cancel upgrade orders in."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force whose upgrade orders to cancel."
            },
            {
              "name": "player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "The player to set the last_user to if any."
            },
            {
              "name": "skip_fog_of_war",
              "types": [
                "boolean?"
              ],
              "desc": "If chunks covered by fog-of-war are skipped."
            },
            {
              "name": "item",
              "types": [
                "LuaItemStack?"
              ],
              "desc": "The upgrade item to use if any."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_hidden_tile",
          "desc": "The hidden tile name.",
          "params": [
            {
              "name": "position",
              "types": [
                "TilePosition"
              ],
              "desc": "The tile position."
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_hidden_tile",
          "desc": "Set the hidden tile for the specified position. While during normal gameplay only non-mineable tiles can become hidden, this method allows any kind of tile to be set as the hidden one.",
          "params": [
            {
              "name": "position",
              "types": [
                "TilePosition"
              ],
              "desc": "The tile position."
            },
            {
              "name": "tile",
              "types": [
                "string",
                "LuaTilePrototype"
              ],
              "desc": "The new hidden tile or nil to clear the hidden tile."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_connected_tiles",
          "desc": "Gets all tiles of the given types that are connected horizontally or vertically to the given tile position including the given tile position.",
          "params": [
            {
              "name": "position",
              "types": [
                "TilePosition"
              ],
              "desc": "The tile position to start at."
            },
            {
              "name": "tiles",
              "types": [
                "array[string]"
              ],
              "desc": "The tiles to search for."
            },
            {
              "name": "include_diagonal",
              "types": [
                "boolean?"
              ],
              "desc": "Include tiles that are connected diagonally."
            },
            {
              "name": "area",
              "types": [
                "BoundingBox?"
              ],
              "desc": "The area to find connected tiles in. If provided the start position must be in this area."
            }
          ],
          "takes_table": false
        },
        {
          "name": "delete_chunk",
          "desc": "The chunk position to delete",
          "params": [
            {
              "name": "position",
              "types": [
                "ChunkPosition"
              ],
              "desc": "The chunk position to delete"
            }
          ],
          "takes_table": false
        },
        {
          "name": "regenerate_entity",
          "desc": "Regenerate autoplacement of some entities on this surface. This can be used to autoplace newly-added entities.",
          "params": [
            {
              "name": "entities",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": "Prototype names of entity or entities to autoplace. When nil all entities with an autoplace are used."
            },
            {
              "name": "chunks",
              "types": [
                "array[ChunkPosition]?"
              ],
              "desc": "The chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status < entities are ignored."
            }
          ],
          "takes_table": false
        },
        {
          "name": "regenerate_decorative",
          "desc": "Regenerate autoplacement of some decoratives on this surface. This can be used to autoplace newly-added decoratives.",
          "params": [
            {
              "name": "decoratives",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": "Prototype names of decorative or decoratives to autoplace. When nil all decoratives with an autoplace are used."
            },
            {
              "name": "chunks",
              "types": [
                "array[ChunkPosition]?"
              ],
              "desc": "The chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status < entities are ignored."
            }
          ],
          "takes_table": false
        },
        {
          "name": "print",
          "desc": "Print text to the chat console of all players on this surface.",
          "params": [
            {
              "name": "message",
              "types": [
                "LocalisedString"
              ],
              "desc": ""
            },
            {
              "name": "print_settings",
              "types": [
                "Color",
                "PrintSettings?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "destroy_decoratives",
          "desc": "Removes all decoratives from the given area. If no area and no position are given, then the entire surface is searched.",
          "params": [
            {
              "name": "area",
              "types": [
                "BoundingBox?"
              ],
              "desc": ""
            },
            {
              "name": "position",
              "types": [
                "TilePosition?"
              ],
              "desc": ""
            },
            {
              "name": "name",
              "types": [
                "string",
                "array[string]",
                "LuaDecorativePrototype",
                "array[LuaDecorativePrototype]?"
              ],
              "desc": ""
            },
            {
              "name": "collision_mask",
              "types": [
                "CollisionMaskLayer",
                "array[CollisionMaskLayer]?"
              ],
              "desc": ""
            },
            {
              "name": "from_layer",
              "types": [
                "string?"
              ],
              "desc": ""
            },
            {
              "name": "to_layer",
              "types": [
                "string?"
              ],
              "desc": ""
            },
            {
              "name": "exclude_soft",
              "types": [
                "boolean?"
              ],
              "desc": "Soft decoratives can be drawn over rails."
            },
            {
              "name": "limit",
              "types": [
                "uint?"
              ],
              "desc": ""
            },
            {
              "name": "invert",
              "types": [
                "boolean?"
              ],
              "desc": "If the filters should be inverted."
            }
          ],
          "takes_table": true
        },
        {
          "name": "create_decoratives",
          "desc": "Adds the given decoratives to the surface.",
          "params": [
            {
              "name": "check_collision",
              "types": [
                "boolean?"
              ],
              "desc": "If collision should be checked against entities/tiles."
            },
            {
              "name": "decoratives",
              "types": [
                "array[Decorative]"
              ],
              "desc": ""
            }
          ],
          "takes_table": true
        },
        {
          "name": "find_decoratives_filtered",
          "desc": "Find decoratives of a given name in a given area.",
          "params": [
            {
              "name": "area",
              "types": [
                "BoundingBox?"
              ],
              "desc": ""
            },
            {
              "name": "position",
              "types": [
                "TilePosition?"
              ],
              "desc": ""
            },
            {
              "name": "name",
              "types": [
                "string",
                "array[string]",
                "LuaDecorativePrototype",
                "array[LuaDecorativePrototype]?"
              ],
              "desc": ""
            },
            {
              "name": "collision_mask",
              "types": [
                "CollisionMaskLayer",
                "array[CollisionMaskLayer]?"
              ],
              "desc": ""
            },
            {
              "name": "from_layer",
              "types": [
                "string?"
              ],
              "desc": ""
            },
            {
              "name": "to_layer",
              "types": [
                "string?"
              ],
              "desc": ""
            },
            {
              "name": "exclude_soft",
              "types": [
                "boolean?"
              ],
              "desc": "Soft decoratives can be drawn over rails."
            },
            {
              "name": "limit",
              "types": [
                "uint?"
              ],
              "desc": ""
            },
            {
              "name": "invert",
              "types": [
                "boolean?"
              ],
              "desc": "If the filters should be inverted."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_trains",
          "desc": "The force to search. Not providing a force will match trains in any force.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "The force to search. Not providing a force will match trains in any force."
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_pollution",
          "desc": "Clears all pollution on this surface.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "play_sound",
          "desc": "Play a sound for every player on this surface.",
          "params": [
            {
              "name": "path",
              "types": [
                "SoundPath"
              ],
              "desc": "The sound to play."
            },
            {
              "name": "position",
              "types": [
                "MapPosition?"
              ],
              "desc": "Where the sound should be played. If not given, it's played at the current position of each player."
            },
            {
              "name": "volume_modifier",
              "types": [
                "double?"
              ],
              "desc": "The volume of the sound to play. Must be between 0 and 1 inclusive."
            },
            {
              "name": "override_sound_type",
              "types": [
                "SoundType?"
              ],
              "desc": "The volume mixer to play the sound through. Defaults to the default mixer for the given sound type."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_resource_counts",
          "desc": "Gets the resource amount of all resources on this surface",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_random_chunk",
          "desc": "Gets a random generated chunk position or 0,0 if no chunks have been generated on this surface.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "clone_area",
          "desc": "Clones the given area.",
          "params": [
            {
              "name": "source_area",
              "types": [
                "BoundingBox"
              ],
              "desc": ""
            },
            {
              "name": "destination_area",
              "types": [
                "BoundingBox"
              ],
              "desc": ""
            },
            {
              "name": "destination_surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": ""
            },
            {
              "name": "destination_force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": ""
            },
            {
              "name": "clone_tiles",
              "types": [
                "boolean?"
              ],
              "desc": "If tiles should be cloned"
            },
            {
              "name": "clone_entities",
              "types": [
                "boolean?"
              ],
              "desc": "If entities should be cloned"
            },
            {
              "name": "clone_decoratives",
              "types": [
                "boolean?"
              ],
              "desc": "If decoratives should be cloned"
            },
            {
              "name": "clear_destination_entities",
              "types": [
                "boolean?"
              ],
              "desc": "If the destination entities should be cleared"
            },
            {
              "name": "clear_destination_decoratives",
              "types": [
                "boolean?"
              ],
              "desc": "If the destination decoratives should be cleared"
            },
            {
              "name": "expand_map",
              "types": [
                "boolean?"
              ],
              "desc": "If the destination surface should be expanded when destination_area is outside current bounds. Default false."
            },
            {
              "name": "create_build_effect_smoke",
              "types": [
                "boolean?"
              ],
              "desc": "If true, the building effect smoke will be shown around the new entities."
            }
          ],
          "takes_table": true
        },
        {
          "name": "clone_brush",
          "desc": "Clones the given area.",
          "params": [
            {
              "name": "source_offset",
              "types": [
                "TilePosition"
              ],
              "desc": ""
            },
            {
              "name": "destination_offset",
              "types": [
                "TilePosition"
              ],
              "desc": ""
            },
            {
              "name": "source_positions",
              "types": [
                "array[TilePosition]"
              ],
              "desc": ""
            },
            {
              "name": "destination_surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": ""
            },
            {
              "name": "destination_force",
              "types": [
                "LuaForce",
                "string?"
              ],
              "desc": ""
            },
            {
              "name": "clone_tiles",
              "types": [
                "boolean?"
              ],
              "desc": "If tiles should be cloned"
            },
            {
              "name": "clone_entities",
              "types": [
                "boolean?"
              ],
              "desc": "If entities should be cloned"
            },
            {
              "name": "clone_decoratives",
              "types": [
                "boolean?"
              ],
              "desc": "If decoratives should be cloned"
            },
            {
              "name": "clear_destination_entities",
              "types": [
                "boolean?"
              ],
              "desc": "If the destination entities should be cleared"
            },
            {
              "name": "clear_destination_decoratives",
              "types": [
                "boolean?"
              ],
              "desc": "If the destination decoratives should be cleared"
            },
            {
              "name": "expand_map",
              "types": [
                "boolean?"
              ],
              "desc": "If the destination surface should be expanded when destination_area is outside current bounds. Default false."
            },
            {
              "name": "manual_collision_mode",
              "types": [
                "boolean?"
              ],
              "desc": "If manual-style collision checks should be done."
            },
            {
              "name": "create_build_effect_smoke",
              "types": [
                "boolean?"
              ],
              "desc": "If true, the building effect smoke will be shown around the new entities."
            }
          ],
          "takes_table": true
        },
        {
          "name": "clone_entities",
          "desc": "Clones the given entities.",
          "params": [
            {
              "name": "entities",
              "types": [
                "array[LuaEntity]"
              ],
              "desc": ""
            },
            {
              "name": "destination_offset",
              "types": [
                "Vector"
              ],
              "desc": ""
            },
            {
              "name": "destination_surface",
              "types": [
                "SurfaceIdentification?"
              ],
              "desc": ""
            },
            {
              "name": "destination_force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": ""
            },
            {
              "name": "snap_to_grid",
              "types": [
                "boolean?"
              ],
              "desc": ""
            },
            {
              "name": "create_build_effect_smoke",
              "types": [
                "boolean?"
              ],
              "desc": "If true, the building effect smoke will be shown around the new entities."
            }
          ],
          "takes_table": true
        },
        {
          "name": "clear",
          "desc": "Clears this surface deleting all entities and chunks on it.",
          "params": [
            {
              "name": "ignore_characters",
              "types": [
                "boolean?"
              ],
              "desc": "Whether characters on this surface that are connected to or associated with players should be ignored (not destroyed)."
            }
          ],
          "takes_table": false
        },
        {
          "name": "request_path",
          "desc": "Generates a path with the specified constraints (as an array of PathfinderWaypoints) using the unit pathfinding algorithm. This path can be used to emulate pathing behavior by script for non-unit entities, such as vehicles. If you want to command actual units (such as biters or spitters) to move, use LuaEntity::set_command instead.",
          "params": [
            {
              "name": "bounding_box",
              "types": [
                "BoundingBox"
              ],
              "desc": "The dimensions of the object that's supposed to travel the path."
            },
            {
              "name": "collision_mask",
              "types": [
                "CollisionMaskWithFlags",
                "array[string]"
              ],
              "desc": "The list of masks the bounding_box collides with."
            },
            {
              "name": "start",
              "types": [
                "MapPosition"
              ],
              "desc": "The position from which to start pathfinding."
            },
            {
              "name": "goal",
              "types": [
                "MapPosition"
              ],
              "desc": "The position to find a path to."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force for which to generate the path, determining which gates can be opened for example."
            },
            {
              "name": "radius",
              "types": [
                "double?"
              ],
              "desc": "How close the pathfinder needs to get to its goal (in tiles). Defaults to 1."
            },
            {
              "name": "pathfind_flags",
              "types": [
                "PathfinderFlags?"
              ],
              "desc": "Flags that affect pathfinder behavior."
            },
            {
              "name": "can_open_gates",
              "types": [
                "boolean?"
              ],
              "desc": "Whether the path request can open gates. Defaults to false."
            },
            {
              "name": "path_resolution_modifier",
              "types": [
                "int?"
              ],
              "desc": "Defines how coarse the pathfinder's grid is, where smaller values mean a coarser grid. Defaults to 0, which equals a resolution of 1x1 tiles, centered on tile centers. Values range from -8 to 8 inclusive, where each integer increment doubles/halves the resolution. So, a resolution of -8 equals a grid of 256x256 tiles, and a resolution of 8 equals 1/256 of a tile."
            },
            {
              "name": "entity_to_ignore",
              "types": [
                "LuaEntity?"
              ],
              "desc": "Makes the pathfinder ignore collisions with this entity if it is given."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_script_areas",
          "desc": "Gets the script areas that match the given name or if no name is given all areas are returned.",
          "params": [
            {
              "name": "name",
              "types": [
                "string?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_script_area",
          "desc": "Gets the first script area by name or id.",
          "params": [
            {
              "name": "key",
              "types": [
                "string",
                "uint?"
              ],
              "desc": "The name or id of the area to get."
            }
          ],
          "takes_table": false
        },
        {
          "name": "edit_script_area",
          "desc": "Sets the given script area to the new values.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint"
              ],
              "desc": "The area to edit."
            },
            {
              "name": "area",
              "types": [
                "ScriptArea"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "add_script_area",
          "desc": "Adds the given script area.",
          "params": [
            {
              "name": "area",
              "types": [
                "ScriptArea"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove_script_area",
          "desc": "Removes the given script area.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_script_positions",
          "desc": "Gets the script positions that match the given name or if no name is given all positions are returned.",
          "params": [
            {
              "name": "name",
              "types": [
                "string?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_script_position",
          "desc": "Gets the first script position by name or id.",
          "params": [
            {
              "name": "key",
              "types": [
                "string",
                "uint?"
              ],
              "desc": "The name or id of the position to get."
            }
          ],
          "takes_table": false
        },
        {
          "name": "edit_script_position",
          "desc": "Sets the given script position to the new values.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint"
              ],
              "desc": "The position to edit."
            },
            {
              "name": "area",
              "types": [
                "ScriptPosition"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "add_script_position",
          "desc": "Adds the given script position.",
          "params": [
            {
              "name": "area",
              "types": [
                "ScriptPosition"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove_script_position",
          "desc": "Removes the given script position.",
          "params": [
            {
              "name": "id",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_map_exchange_string",
          "desc": "Gets the map exchange string for the current map generation settings of this surface.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_starting_area_radius",
          "desc": "Gets the starting area radius of this surface.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_closest",
          "desc": "Gets the closest entity in the list to this position.",
          "params": [
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": ""
            },
            {
              "name": "entities",
              "types": [
                "array[LuaEntity]"
              ],
              "desc": "The Entities to check"
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_train_stops",
          "desc": "Gets train stops matching the given filters.",
          "params": [
            {
              "name": "name",
              "types": [
                "string",
                "array[string]?"
              ],
              "desc": "The name(s) of the train stops. Not providing names will match any stop."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "The force to search. Not providing a force will match stops in any force."
            }
          ],
          "takes_table": true
        },
        {
          "name": "get_total_pollution",
          "desc": "Gets the total amount of pollution on the surface by iterating over all of the chunks containing pollution.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "entity_prototype_collides",
          "desc": "Whether the given entity prototype collides at the given position and direction.",
          "params": [
            {
              "name": "prototype",
              "types": [
                "EntityPrototypeIdentification"
              ],
              "desc": "The entity prototype to check"
            },
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "The position to check"
            },
            {
              "name": "use_map_generation_bounding_box",
              "types": [
                "boolean"
              ],
              "desc": "If the map generation bounding box should be used instead of the collision bounding box"
            },
            {
              "name": "direction",
              "types": [
                "defines.direction?"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "decorative_prototype_collides",
          "desc": "Whether the given decorative prototype collides at the given position and direction.",
          "params": [
            {
              "name": "prototype",
              "types": [
                "string"
              ],
              "desc": "The decorative prototype to check"
            },
            {
              "name": "position",
              "types": [
                "MapPosition"
              ],
              "desc": "The position to check"
            }
          ],
          "takes_table": false
        },
        {
          "name": "calculate_tile_properties",
          "desc": "Names of properties (\"elevation\", etc) to calculate.",
          "params": [
            {
              "name": "property_names",
              "types": [
                "array[string]"
              ],
              "desc": "Names of properties (\"elevation\", etc) to calculate."
            },
            {
              "name": "positions",
              "types": [
                "array[MapPosition]"
              ],
              "desc": "Positions for which to calculate property values"
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_entities_with_force",
          "desc": "Returns all the military targets (entities with force) on this chunk for the given force.",
          "params": [
            {
              "name": "position",
              "types": [
                "ChunkPosition"
              ],
              "desc": "The chunk's position."
            },
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "Entities of this force will be returned."
            }
          ],
          "takes_table": false
        },
        {
          "name": "build_checkerboard",
          "desc": "Sets the given area to the checkerboard lab tiles.",
          "params": [
            {
              "name": "area",
              "types": [
                "BoundingBox"
              ],
              "desc": "The tile area."
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read/Write",
          "description": "The name of this surface. Names are unique among surfaces."
        },
        {
          "name": "index",
          "_type": "uint",
          "permissions": "Read",
          "description": "This surface's index in LuaGameScript::surfaces (unique ID). It is assigned when a surface is created, and remains so until it is deleted. Indexes of deleted surfaces can be reused."
        },
        {
          "name": "map_gen_settings",
          "_type": "MapGenSettings",
          "permissions": "Read/Write",
          "description": "The generation settings for this surface. These can be modified after surface generation, but note that this will not retroactively update the surface. To manually regenerate it, LuaSurface::regenerate_entity, LuaSurface::regenerate_decorative, and LuaSurface::delete_chunk can be used."
        },
        {
          "name": "generate_with_lab_tiles",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "When set to true, new chunks will be generated with lab tiles, instead of using the surface's map generation settings."
        },
        {
          "name": "always_day",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "When set to true, the sun will always shine."
        },
        {
          "name": "daytime",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Current time of day, as a number in range [0, 1)."
        },
        {
          "name": "darkness",
          "_type": "float",
          "permissions": "Read",
          "description": "Amount of darkness at the current time, as a number in range [0, 1]."
        },
        {
          "name": "wind_speed",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Current wind speed in tiles per tick."
        },
        {
          "name": "wind_orientation",
          "_type": "RealOrientation",
          "permissions": "Read/Write",
          "description": "Current wind direction."
        },
        {
          "name": "wind_orientation_change",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Change in wind orientation per tick."
        },
        {
          "name": "peaceful_mode",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Is peaceful mode enabled on this surface?"
        },
        {
          "name": "freeze_daytime",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "True if daytime is currently frozen."
        },
        {
          "name": "ticks_per_day",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The number of ticks per day for this surface."
        },
        {
          "name": "dusk",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The daytime when dusk starts."
        },
        {
          "name": "dawn",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The daytime when dawn starts."
        },
        {
          "name": "evening",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The daytime when evening starts."
        },
        {
          "name": "morning",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The daytime when morning starts."
        },
        {
          "name": "solar_power_multiplier",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The multiplier of solar power on this surface. Cannot be less than 0."
        },
        {
          "name": "min_brightness",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "The minimal brightness during the night. Defaults to 0.15. This has an effect on both rendering and game mechanics such as biter spawns and solar power."
        },
        {
          "name": "brightness_visual_weights",
          "_type": "ColorModifier",
          "permissions": "Read/Write",
          "description": "Defines how surface daytime brightness influences each color channel of the current color lookup table (LUT)."
        },
        {
          "name": "show_clouds",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If clouds are shown on this surface."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaTechnology",
      "extends": "",
      "desc": "One research item.",
      "methods": [
        {
          "name": "reload",
          "desc": "Reload this technology from its prototype.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "force",
          "_type": "LuaForce",
          "permissions": "Read",
          "description": "The force this technology belongs to."
        },
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this technology."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": "Localised name of this technology."
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "prototype",
          "_type": "LuaTechnologyPrototype",
          "permissions": "Read",
          "description": "The prototype of this technology."
        },
        {
          "name": "enabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Can this technology be researched?"
        },
        {
          "name": "visible_when_disabled",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If this technology will be visible in the research GUI even though it is disabled."
        },
        {
          "name": "upgrade",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this an upgrade-type research?"
        },
        {
          "name": "researched",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "Has this technology been researched? Switching from false to true will trigger the technology advancement perks; switching from true to false will reverse them."
        },
        {
          "name": "prerequisites",
          "_type": "dictionary[string \u2192 LuaTechnology]",
          "permissions": "Read",
          "description": "Prerequisites of this technology. The result maps technology name to the LuaTechnology object."
        },
        {
          "name": "research_unit_ingredients",
          "_type": "array[Ingredient]",
          "permissions": "Read",
          "description": "The types of ingredients that labs will require to research this technology."
        },
        {
          "name": "effects",
          "_type": "array[TechnologyModifier]",
          "permissions": "Read",
          "description": "Effects applied when this technology is researched."
        },
        {
          "name": "research_unit_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "The number of research units required for this technology."
        },
        {
          "name": "research_unit_energy",
          "_type": "double",
          "permissions": "Read",
          "description": "Amount of energy required to finish a unit of research."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "level",
          "_type": "uint",
          "permissions": "Read/Write",
          "description": "The current level of this technology. For level-based technology writing to this is the same as researching the technology to the previous level. Writing the level will set LuaTechnology::enabled to true."
        },
        {
          "name": "research_unit_count_formula",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The count formula, if this research has any. See TechnologyUnit::count_formula for details."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaTechnologyPrototype",
      "extends": "",
      "desc": "A Technology prototype.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this technology."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": "Localised name of this technology."
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "enabled",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this technology prototype is enabled by default (enabled at the beginning of a game)."
        },
        {
          "name": "hidden",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this technology prototype is hidden."
        },
        {
          "name": "visible_when_disabled",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this technology will be visible in the research GUI even though it is disabled."
        },
        {
          "name": "ignore_tech_cost_multiplier",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this technology ignores the technology cost multiplier setting."
        },
        {
          "name": "upgrade",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If the is technology prototype is an upgrade to some other technology."
        },
        {
          "name": "prerequisites",
          "_type": "dictionary[string \u2192 LuaTechnologyPrototype]",
          "permissions": "Read",
          "description": "Prerequisites of this technology. The result maps technology name to the LuaTechnologyPrototype object."
        },
        {
          "name": "research_unit_ingredients",
          "_type": "array[Ingredient]",
          "permissions": "Read",
          "description": "The types of ingredients that labs will require to research this technology."
        },
        {
          "name": "effects",
          "_type": "array[TechnologyModifier]",
          "permissions": "Read",
          "description": "Effects applied when this technology is researched."
        },
        {
          "name": "research_unit_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "The number of research units required for this technology."
        },
        {
          "name": "research_unit_energy",
          "_type": "double",
          "permissions": "Read",
          "description": "Amount of energy required to finish a unit of research."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "level",
          "_type": "uint",
          "permissions": "Read",
          "description": "The level of this research."
        },
        {
          "name": "max_level",
          "_type": "uint",
          "permissions": "Read",
          "description": "The max level of this research."
        },
        {
          "name": "research_unit_count_formula",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The count formula, if this research has any. See TechnologyUnit::count_formula for details."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaTile",
      "extends": "",
      "desc": "A single \"square\" on the map.",
      "methods": [
        {
          "name": "collides_with",
          "desc": "What type of things can collide with this tile?",
          "params": [
            {
              "name": "layer",
              "types": [
                "CollisionMaskLayer"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "to_be_deconstructed",
          "desc": "Is this tile marked for deconstruction?",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "The force who did the deconstruction order."
            }
          ],
          "takes_table": false
        },
        {
          "name": "order_deconstruction",
          "desc": "Orders deconstruction of this tile by the given force.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force whose robots are supposed to do the deconstruction."
            },
            {
              "name": "player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "The player to set the last_user to if any."
            }
          ],
          "takes_table": false
        },
        {
          "name": "cancel_deconstruction",
          "desc": "Cancels deconstruction if it is scheduled, does nothing otherwise.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification"
              ],
              "desc": "The force who did the deconstruction order."
            },
            {
              "name": "player",
              "types": [
                "PlayerIdentification?"
              ],
              "desc": "The player to set the last_user to if any."
            }
          ],
          "takes_table": false
        },
        {
          "name": "has_tile_ghost",
          "desc": "Does this tile have any tile ghosts on it.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "Check for tile ghosts of this force."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_tile_ghosts",
          "desc": "Gets all tile ghosts on this tile.",
          "params": [
            {
              "name": "force",
              "types": [
                "ForceIdentification?"
              ],
              "desc": "Get tile ghosts of this force."
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Prototype name of this tile. E.g. \"sand-3\" or \"grass-2\"."
        },
        {
          "name": "prototype",
          "_type": "LuaTilePrototype",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "position",
          "_type": "TilePosition",
          "permissions": "Read",
          "description": "The position this tile references."
        },
        {
          "name": "hidden_tile",
          "_type": "string|nil",
          "permissions": "Read",
          "description": "The name of the LuaTilePrototype hidden under this tile, if any. During normal gameplay, only non-mineable tiles can become hidden. This can however be circumvented with LuaSurface::set_hidden_tile."
        },
        {
          "name": "surface",
          "_type": "LuaSurface",
          "permissions": "Read",
          "description": "The surface this tile is on."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaTilePrototype",
      "extends": "",
      "desc": "Prototype of a tile.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "collision_mask",
          "_type": "CollisionMask",
          "permissions": "Read",
          "description": "The collision mask this tile uses"
        },
        {
          "name": "collision_mask_with_flags",
          "_type": "CollisionMaskWithFlags",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "layer",
          "_type": "uint",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "autoplace_specification",
          "_type": "AutoplaceSpecification|nil",
          "permissions": "Read",
          "description": "Autoplace specification for this prototype, if any."
        },
        {
          "name": "walking_speed_modifier",
          "_type": "float",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "vehicle_friction_modifier",
          "_type": "float",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "map_color",
          "_type": "Color",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "decorative_removal_probability",
          "_type": "float",
          "permissions": "Read",
          "description": "The probability that decorative entities will be removed from on top of this tile when this tile is generated."
        },
        {
          "name": "automatic_neighbors",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "allowed_neighbors",
          "_type": "dictionary[string \u2192 LuaTilePrototype]",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "needs_correction",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this tile needs correction logic applied when it's generated in the world."
        },
        {
          "name": "mineable_properties",
          "_type": "table",
          "permissions": "Read",
          "description": "Is this tile mineable at all?"
        },
        {
          "name": "next_direction",
          "_type": "LuaTilePrototype|nil",
          "permissions": "Read",
          "description": "The next direction of this tile, if any. Used when a tile has multiple directions (such as hazard concrete)"
        },
        {
          "name": "items_to_place_this",
          "_type": "array[ItemStackDefinition]|nil",
          "permissions": "Read",
          "description": "Items that when placed will produce this tile, if any. Construction bots will choose the first item in the list to build this tile."
        },
        {
          "name": "can_be_part_of_blueprint",
          "_type": "boolean",
          "permissions": "Read",
          "description": "False if this tile is not allowed in blueprints regardless of the ability to build it."
        },
        {
          "name": "emissions_per_second",
          "_type": "double",
          "permissions": "Read",
          "description": "Amount of pollution emissions per second this tile will absorb."
        },
        {
          "name": "check_collision_with_entities",
          "_type": "boolean",
          "permissions": "Read",
          "description": "True if building this tile should check for colliding entities above and prevent building if such are found. Also during mining tiles above this tile checks for entities colliding with this tile and prevents mining if such are found."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaTrain",
      "extends": "",
      "desc": "A train. Trains are a sequence of connected rolling stocks -- locomotives and wagons.",
      "methods": [
        {
          "name": "get_item_count",
          "desc": "Get the amount of a particular item stored in the train.",
          "params": [
            {
              "name": "item",
              "types": [
                "string?"
              ],
              "desc": "Item name to count. If not given, counts all items."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_contents",
          "desc": "Get a mapping of the train's inventory.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "remove_item",
          "desc": "Remove some items from the train.",
          "params": [
            {
              "name": "stack",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "The amount and type of items to remove"
            }
          ],
          "takes_table": false
        },
        {
          "name": "insert",
          "desc": "Insert a stack into the train.",
          "params": [
            {
              "name": "stack",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_items_inside",
          "desc": "Clear all items in this train.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "recalculate_path",
          "desc": "Checks if the path is invalid and tries to re-path if it isn't.",
          "params": [
            {
              "name": "force",
              "types": [
                "boolean?"
              ],
              "desc": "Forces the train to re-path regardless of the current path being valid or not."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_fluid_count",
          "desc": "Get the amount of a particular fluid stored in the train.",
          "params": [
            {
              "name": "fluid",
              "types": [
                "string?"
              ],
              "desc": "Fluid name to count. If not given, counts all fluids."
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_fluid_contents",
          "desc": "Gets a mapping of the train's fluid inventory.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "remove_fluid",
          "desc": "Remove some fluid from the train.",
          "params": [
            {
              "name": "fluid",
              "types": [
                "Fluid"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "insert_fluid",
          "desc": "Inserts the given fluid into the first available location in this train.",
          "params": [
            {
              "name": "fluid",
              "types": [
                "Fluid"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "clear_fluids_inside",
          "desc": "Clears all fluids in this train.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "go_to_station",
          "desc": "Go to the station specified by the index in the train's schedule.",
          "params": [
            {
              "name": "index",
              "types": [
                "uint"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_rails",
          "desc": "Gets all rails under the train.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "manual_mode",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "When true, the train is explicitly controlled by the player or script. When false, the train moves autonomously according to its schedule."
        },
        {
          "name": "speed",
          "_type": "double",
          "permissions": "Read/Write",
          "description": "Current speed."
        },
        {
          "name": "max_forward_speed",
          "_type": "double",
          "permissions": "Read",
          "description": "Current max speed when moving forward, depends on locomotive prototype and fuel."
        },
        {
          "name": "max_backward_speed",
          "_type": "double",
          "permissions": "Read",
          "description": "Current max speed when moving backwards, depends on locomotive prototype and fuel."
        },
        {
          "name": "weight",
          "_type": "double",
          "permissions": "Read",
          "description": "The weight of this train."
        },
        {
          "name": "carriages",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "The rolling stocks this train is composed of, with the numbering starting at the front of the train."
        },
        {
          "name": "locomotives",
          "_type": "table",
          "permissions": "Read",
          "description": "Locomotives of the train."
        },
        {
          "name": "cargo_wagons",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "The cargo carriages the train contains."
        },
        {
          "name": "fluid_wagons",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "The fluid carriages the train contains."
        },
        {
          "name": "schedule",
          "_type": "TrainSchedule|nil",
          "permissions": "Read/Write",
          "description": "This train's current schedule, if any. Set to nil to clear."
        },
        {
          "name": "state",
          "_type": "defines.train_state",
          "permissions": "Read",
          "description": "This train's current state."
        },
        {
          "name": "front_rail",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The rail at the front end of the train, if any."
        },
        {
          "name": "back_rail",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The rail at the back end of the train, if any."
        },
        {
          "name": "rail_direction_from_front_rail",
          "_type": "defines.rail_direction",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "rail_direction_from_back_rail",
          "_type": "defines.rail_direction",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "front_stock",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The front stock of this train, if any. The front of the train is in the direction that a majority of locomotives are pointing in. If it's a tie, the North and West directions take precedence."
        },
        {
          "name": "back_stock",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The back stock of this train, if any. The back of the train is at the opposite end of the front."
        },
        {
          "name": "station",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The train stop this train is stopped at, if any."
        },
        {
          "name": "has_path",
          "_type": "boolean",
          "permissions": "Read",
          "description": "If this train has a path."
        },
        {
          "name": "path_end_rail",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The destination rail this train is currently pathing to, if any."
        },
        {
          "name": "path_end_stop",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The destination train stop this train is currently pathing to, if any."
        },
        {
          "name": "id",
          "_type": "uint",
          "permissions": "Read",
          "description": "The unique train ID."
        },
        {
          "name": "passengers",
          "_type": "array[LuaPlayer]",
          "permissions": "Read",
          "description": "The player passengers on the train"
        },
        {
          "name": "riding_state",
          "_type": "RidingState",
          "permissions": "Read",
          "description": "The riding state of this train."
        },
        {
          "name": "killed_players",
          "_type": "dictionary[uint \u2192 uint]",
          "permissions": "Read",
          "description": "The players killed by this train."
        },
        {
          "name": "kill_count",
          "_type": "uint",
          "permissions": "Read",
          "description": "The total number of kills by this train."
        },
        {
          "name": "path",
          "_type": "LuaRailPath|nil",
          "permissions": "Read",
          "description": "The path this train is using, if any."
        },
        {
          "name": "signal",
          "_type": "LuaEntity|nil",
          "permissions": "Read",
          "description": "The signal this train is arriving or waiting at, if any."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaTrainStopControlBehavior",
      "extends": "",
      "desc": "Control behavior for train stops.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "send_to_train",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if the train stop should send the circuit network contents to the train to use."
        },
        {
          "name": "read_from_train",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if the train stop should send the train contents to the circuit network."
        },
        {
          "name": "read_stopped_train",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if the train stop should send the stopped train id to the circuit network."
        },
        {
          "name": "set_trains_limit",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if the trains_limit_signal is used to set a limit of trains incoming for train stop."
        },
        {
          "name": "read_trains_count",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if the train stop should send amount of incoming trains to the circuit network."
        },
        {
          "name": "enable_disable",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "true if the train stop is enabled/disabled through the circuit network."
        },
        {
          "name": "stopped_train_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": "The signal that will be sent when using the send-train-id option."
        },
        {
          "name": "trains_count_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": "The signal that will be sent when using the read-trains-count option."
        },
        {
          "name": "trains_limit_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": "The signal to be used by set-trains-limit to limit amount of incoming trains"
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaTransportBeltControlBehavior",
      "extends": "",
      "desc": "Control behavior for transport belts.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "enable_disable",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If the belt will be enabled/disabled based off the circuit network."
        },
        {
          "name": "read_contents",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": "If the belt will read the contents and send them to the circuit network."
        },
        {
          "name": "read_contents_mode",
          "_type": "defines.control_behavior.transport_belt.content_read_mode",
          "permissions": "Read/Write",
          "description": "The read mode for the belt."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaTransportLine",
      "extends": "",
      "desc": "One line on a transport belt.",
      "methods": [
        {
          "name": "clear",
          "desc": "Remove all items from this transport line.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "get_item_count",
          "desc": "Count some or all items on this line, similar to how LuaInventory::get_item_count does.",
          "params": [
            {
              "name": "item",
              "types": [
                "string?"
              ],
              "desc": "Prototype name of the item to count. If not specified, count all items."
            }
          ],
          "takes_table": false
        },
        {
          "name": "remove_item",
          "desc": "Remove some items from this line.",
          "params": [
            {
              "name": "items",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "Items to remove."
            }
          ],
          "takes_table": false
        },
        {
          "name": "can_insert_at",
          "desc": "Can an item be inserted at a given position?",
          "params": [
            {
              "name": "position",
              "types": [
                "float"
              ],
              "desc": "Where to insert an item."
            }
          ],
          "takes_table": false
        },
        {
          "name": "can_insert_at_back",
          "desc": "Can an item be inserted at the back of this line?",
          "params": [],
          "takes_table": false
        },
        {
          "name": "insert_at",
          "desc": "Insert items at a given position.",
          "params": [
            {
              "name": "position",
              "types": [
                "float"
              ],
              "desc": "Where on the line to insert the items."
            },
            {
              "name": "items",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": "Items to insert."
            }
          ],
          "takes_table": false
        },
        {
          "name": "insert_at_back",
          "desc": "Insert items at the back of this line.",
          "params": [
            {
              "name": "items",
              "types": [
                "ItemStackIdentification"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "get_contents",
          "desc": "Get counts of all items on this line, similar to how LuaInventory::get_contents does.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "line_equals",
          "desc": "Returns whether the associated internal transport line of this line is the same as the others associated internal transport line.",
          "params": [
            {
              "name": "other",
              "types": [
                "LuaTransportLine"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "owner",
          "_type": "LuaEntity",
          "permissions": "Read",
          "description": "The entity this transport line belongs to."
        },
        {
          "name": "output_lines",
          "_type": "array[LuaTransportLine]",
          "permissions": "Read",
          "description": "The transport lines that this transport line outputs items to or an empty table if none."
        },
        {
          "name": "input_lines",
          "_type": "array[LuaTransportLine]",
          "permissions": "Read",
          "description": "The transport lines that this transport line is fed by or an empty table if none."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaTrivialSmokePrototype",
      "extends": "",
      "desc": "Prototype of a trivial smoke.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "color",
          "_type": "Color",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "start_scale",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "end_scale",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "movement_slow_down_factor",
          "_type": "double",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "duration",
          "_type": "uint",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "spread_duration",
          "_type": "uint",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "fade_away_duration",
          "_type": "uint",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "fade_in_duration",
          "_type": "uint",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "glow_fade_away_duration",
          "_type": "uint",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "cyclic",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "affected_by_wind",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "show_when_smoke_off",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "glow_animation",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "render_layer",
          "_type": "RenderLayer",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaUnitGroup",
      "extends": "",
      "desc": "A collection of units moving and attacking together. The engine creates autonomous unit groups to attack polluted areas. The script can create and control such groups as well. Groups can accept commands in the same manner as regular units.",
      "methods": [
        {
          "name": "add_member",
          "desc": "Make a unit a member of this group. Has the same effect as giving a group_command with this group to the unit.",
          "params": [
            {
              "name": "unit",
              "types": [
                "LuaEntity"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_command",
          "desc": "Give this group a command.",
          "params": [
            {
              "name": "command",
              "types": [
                "Command"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_distraction_command",
          "desc": "Give this group a distraction command.",
          "params": [
            {
              "name": "command",
              "types": [
                "Command"
              ],
              "desc": ""
            }
          ],
          "takes_table": false
        },
        {
          "name": "set_autonomous",
          "desc": "Make this group autonomous. Autonomous groups will automatically attack polluted areas. Autonomous groups aren't considered to be script-driven.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "start_moving",
          "desc": "Make the group start moving even if some of its members haven't yet arrived.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "destroy",
          "desc": "Dissolve this group. Its members won't be destroyed, they will be merely unlinked from this group.",
          "params": [],
          "takes_table": false
        },
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "members",
          "_type": "array[LuaEntity]",
          "permissions": "Read",
          "description": "Members of this group."
        },
        {
          "name": "position",
          "_type": "MapPosition",
          "permissions": "Read",
          "description": "Group position. This can have different meanings depending on the group state. When the group is gathering, the position is the place of gathering. When the group is moving, the position is the expected position of its members along the path. When the group is attacking, it is the average position of its members."
        },
        {
          "name": "state",
          "_type": "defines.group_state",
          "permissions": "Read",
          "description": "Whether this group is gathering, moving or attacking."
        },
        {
          "name": "force",
          "_type": "LuaForce",
          "permissions": "Read",
          "description": "The force of this unit group."
        },
        {
          "name": "surface",
          "_type": "LuaSurface",
          "permissions": "Read",
          "description": "The surface of this unit group."
        },
        {
          "name": "group_number",
          "_type": "uint",
          "permissions": "Read",
          "description": "The group number for this unit group."
        },
        {
          "name": "is_script_driven",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether this unit group is controlled by a script or by the game engine. This can be changed using LuaUnitGroup::set_autonomous."
        },
        {
          "name": "command",
          "_type": "Command|nil",
          "permissions": "Read",
          "description": "The command given to this group, if any."
        },
        {
          "name": "distraction_command",
          "_type": "Command|nil",
          "permissions": "Read",
          "description": "The distraction command given to this group, if any."
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaVirtualSignalPrototype",
      "extends": "",
      "desc": "Prototype of a virtual signal.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "name",
          "_type": "string",
          "permissions": "Read",
          "description": "Name of this prototype."
        },
        {
          "name": "order",
          "_type": "string",
          "permissions": "Read",
          "description": "The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning."
        },
        {
          "name": "localised_name",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "localised_description",
          "_type": "LocalisedString",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "special",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Whether this is a special signal. The everything, anything, each, and unknown signals are considered special."
        },
        {
          "name": "subgroup",
          "_type": "LuaGroup",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaVoidEnergySourcePrototype",
      "extends": "",
      "desc": "Prototype of a void energy source.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "emissions",
          "_type": "double",
          "permissions": "Read",
          "description": "The emissions of this energy source in pollution/Joule. Multiplying it by energy consumption in Watt gives pollution/second."
        },
        {
          "name": "render_no_network_icon",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "render_no_power_icon",
          "_type": "boolean",
          "permissions": "Read",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    },
    {
      "name": "LuaWallControlBehavior",
      "extends": "",
      "desc": "Control behavior for walls.",
      "methods": [
        {
          "name": "help",
          "desc": "All methods and properties that this object supports.",
          "params": [],
          "takes_table": false
        }
      ],
      "attributes": [
        {
          "name": "circuit_condition",
          "_type": "CircuitConditionDefinition",
          "permissions": "Read/Write",
          "description": "The circuit condition."
        },
        {
          "name": "open_gate",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "read_sensor",
          "_type": "boolean",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "output_signal",
          "_type": "SignalID",
          "permissions": "Read/Write",
          "description": ""
        },
        {
          "name": "valid",
          "_type": "boolean",
          "permissions": "Read",
          "description": "Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be false. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access."
        },
        {
          "name": "object_name",
          "_type": "string",
          "permissions": "Read",
          "description": "The class name of this object. Available even when valid is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct."
        }
      ]
    }
  ]
}
